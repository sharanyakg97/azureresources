<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Azure.ResourceManager.Resources</name>
    </assembly>
    <members>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentProperties">
            <summary> Deployment properties. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentProperties.Template">
            <summary>
            Template
            </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentProperties.Parameters">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentProperties.#ctor(Azure.ResourceManager.Resources.Models.DeploymentMode)">
            <summary> Initializes a new instance of DeploymentProperties. </summary>
            <param name="mode"> The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentProperties.TemplateLink">
            <summary> The URI of the template. Use either the templateLink property or the template property, but not both. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentProperties.ParametersLink">
            <summary> The URI of parameters file. You use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentProperties.Mode">
            <summary> The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentProperties.DebugSetting">
            <summary> The debug setting of the deployment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentProperties.OnErrorDeployment">
            <summary> The deployment on error behavior. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Alias">
            <summary> The alias type. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Alias.#ctor">
            <summary> Initializes a new instance of Alias. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Alias.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.AliasPath},System.Nullable{Azure.ResourceManager.Resources.Models.AliasType},System.String,Azure.ResourceManager.Resources.Models.AliasPattern)">
            <summary> Initializes a new instance of Alias. </summary>
            <param name="name"> The alias name. </param>
            <param name="paths"> The paths for an alias. </param>
            <param name="type"> The type of the alias. </param>
            <param name="defaultPath"> The default path for an alias. </param>
            <param name="defaultPattern"> The default pattern for an alias. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Alias.Name">
            <summary> The alias name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Alias.Paths">
            <summary> The paths for an alias. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Alias.Type">
            <summary> The type of the alias. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Alias.DefaultPath">
            <summary> The default path for an alias. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Alias.DefaultPattern">
            <summary> The default pattern for an alias. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.AliasPath">
            <summary> The type of the paths for alias. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.AliasPath.#ctor">
            <summary> Initializes a new instance of AliasPath. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.AliasPath.#ctor(System.String,System.Collections.Generic.IReadOnlyList{System.String},Azure.ResourceManager.Resources.Models.AliasPattern)">
            <summary> Initializes a new instance of AliasPath. </summary>
            <param name="path"> The path of an alias. </param>
            <param name="apiVersions"> The API versions. </param>
            <param name="pattern"> The pattern for an alias path. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AliasPath.Path">
            <summary> The path of an alias. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AliasPath.ApiVersions">
            <summary> The API versions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AliasPath.Pattern">
            <summary> The pattern for an alias path. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.AliasPattern">
            <summary> The type of the pattern for an alias path. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.AliasPattern.#ctor">
            <summary> Initializes a new instance of AliasPattern. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.AliasPattern.#ctor(System.String,System.String,System.Nullable{Azure.ResourceManager.Resources.Models.AliasPatternType})">
            <summary> Initializes a new instance of AliasPattern. </summary>
            <param name="phrase"> The alias pattern phrase. </param>
            <param name="variable"> The alias pattern variable. </param>
            <param name="type"> The type of alias pattern. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AliasPattern.Phrase">
            <summary> The alias pattern phrase. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AliasPattern.Variable">
            <summary> The alias pattern variable. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AliasPattern.Type">
            <summary> The type of alias pattern. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.AliasPatternType">
            <summary> The type of alias pattern. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.AliasPatternType.NotSpecified">
            <summary> NotSpecified is not allowed. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.AliasPatternType.Extract">
            <summary> Extract is the only allowed value. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.AliasType">
            <summary> The type of the alias. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.AliasType.NotSpecified">
            <summary> Alias type is unknown (same as not providing alias type). </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.AliasType.PlainText">
            <summary> Alias value is not secret. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.AliasType.Mask">
            <summary> Alias value is secret. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Application">
            <summary> Information about managed application. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Application.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of Application. </summary>
            <param name="kind"> The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog. </param>
            <param name="managedResourceGroupId"> The managed resource group Id. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="kind"/> or <paramref name="managedResourceGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Application.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Azure.ResourceManager.Resources.Models.SkuAutoGenerated,Azure.ResourceManager.Resources.Models.IdentityAutoGenerated2,Azure.ResourceManager.Resources.Models.PlanAutoGenerated,System.String,System.String,System.String,System.Object,System.Object,System.Nullable{Azure.ResourceManager.Resources.Models.ProvisioningState})">
            <summary> Initializes a new instance of Application. </summary>
            <param name="id"> Resource ID. </param>
            <param name="name"> Resource name. </param>
            <param name="type"> Resource type. </param>
            <param name="location"> Resource location. </param>
            <param name="tags"> Resource tags. </param>
            <param name="managedBy"> ID of the resource that manages this resource. </param>
            <param name="sku"> The SKU of the resource. </param>
            <param name="identity"> The identity of the resource. </param>
            <param name="plan"> The plan information. </param>
            <param name="kind"> The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog. </param>
            <param name="managedResourceGroupId"> The managed resource group Id. </param>
            <param name="applicationDefinitionId"> The fully qualified path of managed application definition Id. </param>
            <param name="parameters"> Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string. </param>
            <param name="outputs"> Name and value pairs that define the managed application outputs. </param>
            <param name="provisioningState"> The managed application provisioning state. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Application.Plan">
            <summary> The plan information. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Application.Kind">
            <summary> The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Application.ManagedResourceGroupId">
            <summary> The managed resource group Id. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Application.ApplicationDefinitionId">
            <summary> The fully qualified path of managed application definition Id. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Application.Parameters">
            <summary> Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Application.Outputs">
            <summary> Name and value pairs that define the managed application outputs. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Application.ProvisioningState">
            <summary> The managed application provisioning state. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ApplicationArtifact">
            <summary> Managed application artifact. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ApplicationArtifact.#ctor">
            <summary> Initializes a new instance of ApplicationArtifact. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ApplicationArtifact.#ctor(System.String,System.String,System.Nullable{Azure.ResourceManager.Resources.Models.ApplicationArtifactType})">
            <summary> Initializes a new instance of ApplicationArtifact. </summary>
            <param name="name"> The managed application artifact name. </param>
            <param name="uri"> The managed application artifact blob uri. </param>
            <param name="type"> The managed application artifact type. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationArtifact.Name">
            <summary> The managed application artifact name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationArtifact.Uri">
            <summary> The managed application artifact blob uri. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationArtifact.Type">
            <summary> The managed application artifact type. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ApplicationArtifactType">
            <summary> The managed application artifact type. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ApplicationArtifactType.Template">
            <summary> Template. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ApplicationArtifactType.Custom">
            <summary> Custom. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ApplicationDefinition">
            <summary> Information about managed application definition. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ApplicationDefinition.#ctor(Azure.ResourceManager.Resources.Models.ApplicationLockLevel,System.Collections.Generic.IEnumerable{Azure.ResourceManager.Resources.Models.ApplicationProviderAuthorization})">
            <summary> Initializes a new instance of ApplicationDefinition. </summary>
            <param name="lockLevel"> The managed application lock level. </param>
            <param name="authorizations"> The managed application provider authorizations. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="authorizations"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ApplicationDefinition.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Azure.ResourceManager.Resources.Models.SkuAutoGenerated,Azure.ResourceManager.Resources.Models.IdentityAutoGenerated2,Azure.ResourceManager.Resources.Models.ApplicationLockLevel,System.String,System.String,System.Collections.Generic.IList{Azure.ResourceManager.Resources.Models.ApplicationProviderAuthorization},System.Collections.Generic.IList{Azure.ResourceManager.Resources.Models.ApplicationArtifact},System.String,System.String,System.Object,System.Object)">
            <summary> Initializes a new instance of ApplicationDefinition. </summary>
            <param name="id"> Resource ID. </param>
            <param name="name"> Resource name. </param>
            <param name="type"> Resource type. </param>
            <param name="location"> Resource location. </param>
            <param name="tags"> Resource tags. </param>
            <param name="managedBy"> ID of the resource that manages this resource. </param>
            <param name="sku"> The SKU of the resource. </param>
            <param name="identity"> The identity of the resource. </param>
            <param name="lockLevel"> The managed application lock level. </param>
            <param name="displayName"> The managed application definition display name. </param>
            <param name="isEnabled"> A value indicating whether the package is enabled or not. </param>
            <param name="authorizations"> The managed application provider authorizations. </param>
            <param name="artifacts"> The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition. </param>
            <param name="description"> The managed application definition description. </param>
            <param name="packageFileUri"> The managed application definition package file Uri. Use this element. </param>
            <param name="mainTemplate"> The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string. </param>
            <param name="createUiDefinition"> The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationDefinition.LockLevel">
            <summary> The managed application lock level. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationDefinition.DisplayName">
            <summary> The managed application definition display name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationDefinition.IsEnabled">
            <summary> A value indicating whether the package is enabled or not. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationDefinition.Authorizations">
            <summary> The managed application provider authorizations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationDefinition.Artifacts">
            <summary> The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationDefinition.Description">
            <summary> The managed application definition description. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationDefinition.PackageFileUri">
            <summary> The managed application definition package file Uri. Use this element. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationDefinition.MainTemplate">
            <summary> The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationDefinition.CreateUiDefinition">
            <summary> The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ApplicationDefinitionListResult">
            <summary> List of managed application definitions. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ApplicationDefinitionListResult.#ctor">
            <summary> Initializes a new instance of ApplicationDefinitionListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ApplicationDefinitionListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ApplicationDefinition},System.String)">
            <summary> Initializes a new instance of ApplicationDefinitionListResult. </summary>
            <param name="value"> The array of managed application definitions. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationDefinitionListResult.Value">
            <summary> The array of managed application definitions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationDefinitionListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ApplicationListResult">
            <summary> List of managed applications. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ApplicationListResult.#ctor">
            <summary> Initializes a new instance of ApplicationListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ApplicationListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.Application},System.String)">
            <summary> Initializes a new instance of ApplicationListResult. </summary>
            <param name="value"> The array of managed applications. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationListResult.Value">
            <summary> The array of managed applications. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ApplicationLockLevel">
            <summary> The managed application lock level. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ApplicationLockLevel.CanNotDelete">
            <summary> CanNotDelete. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ApplicationLockLevel.ReadOnly">
            <summary> ReadOnly. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ApplicationLockLevel.None">
            <summary> None. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ApplicationPatchable">
            <summary> Information about managed application. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ApplicationPatchable.#ctor">
            <summary> Initializes a new instance of ApplicationPatchable. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ApplicationPatchable.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Azure.ResourceManager.Resources.Models.SkuAutoGenerated,Azure.ResourceManager.Resources.Models.IdentityAutoGenerated2,Azure.ResourceManager.Resources.Models.PlanPatchable,System.String,System.String,System.String,System.Object,System.Object,System.Nullable{Azure.ResourceManager.Resources.Models.ProvisioningState})">
            <summary> Initializes a new instance of ApplicationPatchable. </summary>
            <param name="id"> Resource ID. </param>
            <param name="name"> Resource name. </param>
            <param name="type"> Resource type. </param>
            <param name="location"> Resource location. </param>
            <param name="tags"> Resource tags. </param>
            <param name="managedBy"> ID of the resource that manages this resource. </param>
            <param name="sku"> The SKU of the resource. </param>
            <param name="identity"> The identity of the resource. </param>
            <param name="plan"> The plan information. </param>
            <param name="kind"> The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog. </param>
            <param name="managedResourceGroupId"> The managed resource group Id. </param>
            <param name="applicationDefinitionId"> The fully qualified path of managed application definition Id. </param>
            <param name="parameters"> Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string. </param>
            <param name="outputs"> Name and value pairs that define the managed application outputs. </param>
            <param name="provisioningState"> The managed application provisioning state. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationPatchable.Plan">
            <summary> The plan information. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationPatchable.Kind">
            <summary> The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationPatchable.ManagedResourceGroupId">
            <summary> The managed resource group Id. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationPatchable.ApplicationDefinitionId">
            <summary> The fully qualified path of managed application definition Id. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationPatchable.Parameters">
            <summary> Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationPatchable.Outputs">
            <summary> Name and value pairs that define the managed application outputs. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationPatchable.ProvisioningState">
            <summary> The managed application provisioning state. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ApplicationProviderAuthorization">
            <summary> The managed application provider authorization. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ApplicationProviderAuthorization.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of ApplicationProviderAuthorization. </summary>
            <param name="principalId"> The provider&apos;s principal identifier. This is the identity that the provider will use to call ARM to manage the managed application resources. </param>
            <param name="roleDefinitionId"> The provider&apos;s role definition identifier. This role will define all the permissions that the provider must have on the managed application&apos;s container resource group. This role definition cannot have permission to delete the resource group. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="principalId"/> or <paramref name="roleDefinitionId"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationProviderAuthorization.PrincipalId">
            <summary> The provider&apos;s principal identifier. This is the identity that the provider will use to call ARM to manage the managed application resources. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ApplicationProviderAuthorization.RoleDefinitionId">
            <summary> The provider&apos;s role definition identifier. This role will define all the permissions that the provider must have on the managed application&apos;s container resource group. This role definition cannot have permission to delete the resource group. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.AzureCliScript">
            <summary> Object model for the Azure CLI script. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.AzureCliScript.#ctor(Azure.ResourceManager.Resources.Models.ManagedServiceIdentity,System.String,System.TimeSpan,System.String)">
            <summary> Initializes a new instance of AzureCliScript. </summary>
            <param name="identity"> Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported. </param>
            <param name="location"> The location of the ACI and the storage account for the deployment script. </param>
            <param name="retentionInterval"> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </param>
            <param name="azCliVersion"> Azure CLI module version to be used. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="identity"/>, <paramref name="location"/>, or <paramref name="azCliVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.AzureCliScript.#ctor(System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.ManagedServiceIdentity,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Azure.ResourceManager.Resources.Models.ScriptType,Azure.ResourceManager.Resources.Models.SystemData,Azure.ResourceManager.Resources.Models.ContainerConfiguration,Azure.ResourceManager.Resources.Models.StorageAccountConfiguration,System.Nullable{Azure.ResourceManager.Resources.Models.CleanupOptions},System.Nullable{Azure.ResourceManager.Resources.Models.ScriptProvisioningState},Azure.ResourceManager.Resources.Models.ScriptStatus,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String,System.Collections.Generic.IList{System.String},System.String,System.String,System.Collections.Generic.IList{Azure.ResourceManager.Resources.Models.EnvironmentVariable},System.String,System.TimeSpan,System.Nullable{System.TimeSpan},System.String)">
            <summary> Initializes a new instance of AzureCliScript. </summary>
            <param name="id"> String Id used to locate any resource on Azure. </param>
            <param name="name"> Name of this resource. </param>
            <param name="type"> Type of this resource. </param>
            <param name="identity"> Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported. </param>
            <param name="location"> The location of the ACI and the storage account for the deployment script. </param>
            <param name="tags"> Resource tags. </param>
            <param name="kind"> Type of the script. </param>
            <param name="systemData"> The system metadata related to this resource. </param>
            <param name="containerSettings"> Container settings. </param>
            <param name="storageAccountSettings"> Storage Account settings. </param>
            <param name="cleanupPreference"> The clean up preference when the script execution gets in a terminal state. Default setting is &apos;Always&apos;. </param>
            <param name="provisioningState"> State of the script execution. This only appears in the response. </param>
            <param name="status"> Contains the results of script execution. </param>
            <param name="outputs"> List of script outputs. </param>
            <param name="primaryScriptUri"> Uri for the script. This is the entry point for the external script. </param>
            <param name="supportingScriptUris"> Supporting files for the external script. </param>
            <param name="scriptContent"> Script body. </param>
            <param name="arguments"> Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &apos;West US 2&apos;. </param>
            <param name="environmentVariables"> The environment variables to pass over to the script. </param>
            <param name="forceUpdateTag"> Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. </param>
            <param name="retentionInterval"> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </param>
            <param name="timeout"> Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H. </param>
            <param name="azCliVersion"> Azure CLI module version to be used. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.ContainerSettings">
            <summary> Container settings. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.StorageAccountSettings">
            <summary> Storage Account settings. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.CleanupPreference">
            <summary> The clean up preference when the script execution gets in a terminal state. Default setting is &apos;Always&apos;. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.ProvisioningState">
            <summary> State of the script execution. This only appears in the response. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.Status">
            <summary> Contains the results of script execution. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.Outputs">
            <summary> List of script outputs. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.PrimaryScriptUri">
            <summary> Uri for the script. This is the entry point for the external script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.SupportingScriptUris">
            <summary> Supporting files for the external script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.ScriptContent">
            <summary> Script body. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.Arguments">
            <summary> Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &apos;West US 2&apos;. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.EnvironmentVariables">
            <summary> The environment variables to pass over to the script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.ForceUpdateTag">
            <summary> Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.RetentionInterval">
            <summary> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.Timeout">
            <summary> Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScript.AzCliVersion">
            <summary> Azure CLI module version to be used. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.AzureCliScriptProperties">
            <summary> Properties of the Azure CLI script object. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.AzureCliScriptProperties.#ctor(System.String,System.TimeSpan)">
            <summary> Initializes a new instance of AzureCliScriptProperties. </summary>
            <param name="azCliVersion"> Azure CLI module version to be used. </param>
            <param name="retentionInterval"> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="azCliVersion"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScriptProperties.AzCliVersion">
            <summary> Azure CLI module version to be used. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScriptProperties.PrimaryScriptUri">
            <summary> Uri for the script. This is the entry point for the external script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScriptProperties.SupportingScriptUris">
            <summary> Supporting files for the external script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScriptProperties.ScriptContent">
            <summary> Script body. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScriptProperties.Arguments">
            <summary> Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &apos;West US 2&apos;. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScriptProperties.EnvironmentVariables">
            <summary> The environment variables to pass over to the script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScriptProperties.ForceUpdateTag">
            <summary> Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScriptProperties.RetentionInterval">
            <summary> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureCliScriptProperties.Timeout">
            <summary> Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.AzurePowerShellScript">
            <summary> Object model for the Azure PowerShell script. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.#ctor(Azure.ResourceManager.Resources.Models.ManagedServiceIdentity,System.String,System.TimeSpan,System.String)">
            <summary> Initializes a new instance of AzurePowerShellScript. </summary>
            <param name="identity"> Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported. </param>
            <param name="location"> The location of the ACI and the storage account for the deployment script. </param>
            <param name="retentionInterval"> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </param>
            <param name="azPowerShellVersion"> Azure PowerShell module version to be used. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="identity"/>, <paramref name="location"/>, or <paramref name="azPowerShellVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.#ctor(System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.ManagedServiceIdentity,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Azure.ResourceManager.Resources.Models.ScriptType,Azure.ResourceManager.Resources.Models.SystemData,Azure.ResourceManager.Resources.Models.ContainerConfiguration,Azure.ResourceManager.Resources.Models.StorageAccountConfiguration,System.Nullable{Azure.ResourceManager.Resources.Models.CleanupOptions},System.Nullable{Azure.ResourceManager.Resources.Models.ScriptProvisioningState},Azure.ResourceManager.Resources.Models.ScriptStatus,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String,System.Collections.Generic.IList{System.String},System.String,System.String,System.Collections.Generic.IList{Azure.ResourceManager.Resources.Models.EnvironmentVariable},System.String,System.TimeSpan,System.Nullable{System.TimeSpan},System.String)">
            <summary> Initializes a new instance of AzurePowerShellScript. </summary>
            <param name="id"> String Id used to locate any resource on Azure. </param>
            <param name="name"> Name of this resource. </param>
            <param name="type"> Type of this resource. </param>
            <param name="identity"> Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported. </param>
            <param name="location"> The location of the ACI and the storage account for the deployment script. </param>
            <param name="tags"> Resource tags. </param>
            <param name="kind"> Type of the script. </param>
            <param name="systemData"> The system metadata related to this resource. </param>
            <param name="containerSettings"> Container settings. </param>
            <param name="storageAccountSettings"> Storage Account settings. </param>
            <param name="cleanupPreference"> The clean up preference when the script execution gets in a terminal state. Default setting is &apos;Always&apos;. </param>
            <param name="provisioningState"> State of the script execution. This only appears in the response. </param>
            <param name="status"> Contains the results of script execution. </param>
            <param name="outputs"> List of script outputs. </param>
            <param name="primaryScriptUri"> Uri for the script. This is the entry point for the external script. </param>
            <param name="supportingScriptUris"> Supporting files for the external script. </param>
            <param name="scriptContent"> Script body. </param>
            <param name="arguments"> Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &apos;West US 2&apos;. </param>
            <param name="environmentVariables"> The environment variables to pass over to the script. </param>
            <param name="forceUpdateTag"> Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. </param>
            <param name="retentionInterval"> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </param>
            <param name="timeout"> Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H. </param>
            <param name="azPowerShellVersion"> Azure PowerShell module version to be used. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.ContainerSettings">
            <summary> Container settings. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.StorageAccountSettings">
            <summary> Storage Account settings. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.CleanupPreference">
            <summary> The clean up preference when the script execution gets in a terminal state. Default setting is &apos;Always&apos;. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.ProvisioningState">
            <summary> State of the script execution. This only appears in the response. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.Status">
            <summary> Contains the results of script execution. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.Outputs">
            <summary> List of script outputs. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.PrimaryScriptUri">
            <summary> Uri for the script. This is the entry point for the external script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.SupportingScriptUris">
            <summary> Supporting files for the external script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.ScriptContent">
            <summary> Script body. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.Arguments">
            <summary> Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &apos;West US 2&apos;. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.EnvironmentVariables">
            <summary> The environment variables to pass over to the script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.ForceUpdateTag">
            <summary> Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.RetentionInterval">
            <summary> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.Timeout">
            <summary> Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScript.AzPowerShellVersion">
            <summary> Azure PowerShell module version to be used. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.AzurePowerShellScriptProperties">
            <summary> Properties of the Azure PowerShell script object. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.AzurePowerShellScriptProperties.#ctor(System.String,System.TimeSpan)">
            <summary> Initializes a new instance of AzurePowerShellScriptProperties. </summary>
            <param name="azPowerShellVersion"> Azure PowerShell module version to be used. </param>
            <param name="retentionInterval"> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="azPowerShellVersion"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScriptProperties.AzPowerShellVersion">
            <summary> Azure PowerShell module version to be used. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScriptProperties.PrimaryScriptUri">
            <summary> Uri for the script. This is the entry point for the external script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScriptProperties.SupportingScriptUris">
            <summary> Supporting files for the external script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScriptProperties.ScriptContent">
            <summary> Script body. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScriptProperties.Arguments">
            <summary> Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &apos;West US 2&apos;. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScriptProperties.EnvironmentVariables">
            <summary> The environment variables to pass over to the script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScriptProperties.ForceUpdateTag">
            <summary> Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScriptProperties.RetentionInterval">
            <summary> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzurePowerShellScriptProperties.Timeout">
            <summary> Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.AzureResourceBase">
            <summary> Common properties for all Azure resources. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.AzureResourceBase.#ctor">
            <summary> Initializes a new instance of AzureResourceBase. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.AzureResourceBase.#ctor(System.String,System.String,System.String)">
            <summary> Initializes a new instance of AzureResourceBase. </summary>
            <param name="id"> String Id used to locate any resource on Azure. </param>
            <param name="name"> Name of this resource. </param>
            <param name="type"> Type of this resource. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureResourceBase.Id">
            <summary> String Id used to locate any resource on Azure. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureResourceBase.Name">
            <summary> Name of this resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.AzureResourceBase.Type">
            <summary> Type of this resource. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.BasicDependency">
            <summary> Deployment dependency information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.BasicDependency.#ctor">
            <summary> Initializes a new instance of BasicDependency. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.BasicDependency.#ctor(System.String,System.String,System.String)">
            <summary> Initializes a new instance of BasicDependency. </summary>
            <param name="id"> The ID of the dependency. </param>
            <param name="resourceType"> The dependency resource type. </param>
            <param name="resourceName"> The dependency resource name. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.BasicDependency.Id">
            <summary> The ID of the dependency. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.BasicDependency.ResourceType">
            <summary> The dependency resource type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.BasicDependency.ResourceName">
            <summary> The dependency resource name. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ChangeType">
            <summary> Type of change that will be made to the resource when the deployment is executed. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ChangeType.Create">
            <summary> The resource does not exist in the current state but is present in the desired state. The resource will be created when the deployment is executed. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ChangeType.Delete">
            <summary> The resource exists in the current state and is missing from the desired state. The resource will be deleted when the deployment is executed. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ChangeType.Ignore">
            <summary> The resource exists in the current state and is missing from the desired state. The resource will not be deployed or modified when the deployment is executed. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ChangeType.Deploy">
            <summary> The resource exists in the current state and the desired state and will be redeployed when the deployment is executed. The properties of the resource may or may not change. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ChangeType.NoChange">
            <summary> The resource exists in the current state and the desired state and will be redeployed when the deployment is executed. The properties of the resource will not change. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ChangeType.Modify">
            <summary> The resource exists in the current state and the desired state and will be redeployed when the deployment is executed. The properties of the resource will change. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.CleanupOptions">
            <summary> The clean up preference when the script execution gets in a terminal state. Default setting is &apos;Always&apos;. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CleanupOptions.#ctor(System.String)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.CleanupOptions"/> values are the same. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.CleanupOptions.Always">
            <summary> Always. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.CleanupOptions.OnSuccess">
            <summary> OnSuccess. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.CleanupOptions.OnExpiration">
            <summary> OnExpiration. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CleanupOptions.op_Equality(Azure.ResourceManager.Resources.Models.CleanupOptions,Azure.ResourceManager.Resources.Models.CleanupOptions)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.CleanupOptions"/> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CleanupOptions.op_Inequality(Azure.ResourceManager.Resources.Models.CleanupOptions,Azure.ResourceManager.Resources.Models.CleanupOptions)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.CleanupOptions"/> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CleanupOptions.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.CleanupOptions">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.CleanupOptions"/>. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CleanupOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CleanupOptions.Equals(Azure.ResourceManager.Resources.Models.CleanupOptions)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CleanupOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CleanupOptions.ToString">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.CloudError">
            <summary> An error response for a resource management request. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CloudError.#ctor">
            <summary> Initializes a new instance of CloudError. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CloudError.#ctor(Azure.ResourceManager.Resources.Models.ErrorResponse)">
            <summary> Initializes a new instance of CloudError. </summary>
            <param name="error"> The resource management error response. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.CloudError.Error">
            <summary> The resource management error response. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ContainerConfiguration">
            <summary> Settings to customize ACI container instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ContainerConfiguration.#ctor">
            <summary> Initializes a new instance of ContainerConfiguration. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ContainerConfiguration.#ctor(System.String)">
            <summary> Initializes a new instance of ContainerConfiguration. </summary>
            <param name="containerGroupName"> Container group name, if not specified then the name will get auto-generated. Not specifying a &apos;containerGroupName&apos; indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use &apos;containerGroupName&apos; when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. &apos;containerGroupName&apos; property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed. To specify a &apos;containerGroupName&apos;, add the following object to properties: { &quot;containerSettings&quot;: { &quot;containerGroupName&quot;: &quot;contoso-container&quot; } }. If you do not want to specify a &apos;containerGroupName&apos; then do not add &apos;containerSettings&apos; property. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ContainerConfiguration.ContainerGroupName">
            <summary> Container group name, if not specified then the name will get auto-generated. Not specifying a &apos;containerGroupName&apos; indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use &apos;containerGroupName&apos; when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. &apos;containerGroupName&apos; property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed. To specify a &apos;containerGroupName&apos;, add the following object to properties: { &quot;containerSettings&quot;: { &quot;containerGroupName&quot;: &quot;contoso-container&quot; } }. If you do not want to specify a &apos;containerGroupName&apos; then do not add &apos;containerSettings&apos; property. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.CreatedByType">
            <summary> The type of identity that created the resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CreatedByType.#ctor(System.String)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.CreatedByType"/> values are the same. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.CreatedByType.User">
            <summary> User. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.CreatedByType.Application">
            <summary> Application. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.CreatedByType.ManagedIdentity">
            <summary> ManagedIdentity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.CreatedByType.Key">
            <summary> Key. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CreatedByType.op_Equality(Azure.ResourceManager.Resources.Models.CreatedByType,Azure.ResourceManager.Resources.Models.CreatedByType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.CreatedByType"/> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CreatedByType.op_Inequality(Azure.ResourceManager.Resources.Models.CreatedByType,Azure.ResourceManager.Resources.Models.CreatedByType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.CreatedByType"/> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CreatedByType.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.CreatedByType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.CreatedByType"/>. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CreatedByType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CreatedByType.Equals(Azure.ResourceManager.Resources.Models.CreatedByType)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CreatedByType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.CreatedByType.ToString">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DebugSetting">
            <summary> The debug setting. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DebugSetting.#ctor">
            <summary> Initializes a new instance of DebugSetting. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DebugSetting.#ctor(System.String)">
            <summary> Initializes a new instance of DebugSetting. </summary>
            <param name="detailLevel"> Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DebugSetting.DetailLevel">
            <summary> Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Dependency">
            <summary> Deployment dependency information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Dependency.#ctor">
            <summary> Initializes a new instance of Dependency. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Dependency.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.BasicDependency},System.String,System.String,System.String)">
            <summary> Initializes a new instance of Dependency. </summary>
            <param name="dependsOn"> The list of dependencies. </param>
            <param name="id"> The ID of the dependency. </param>
            <param name="resourceType"> The dependency resource type. </param>
            <param name="resourceName"> The dependency resource name. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Dependency.DependsOn">
            <summary> The list of dependencies. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Dependency.Id">
            <summary> The ID of the dependency. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Dependency.ResourceType">
            <summary> The dependency resource type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Dependency.ResourceName">
            <summary> The dependency resource name. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Deployment">
            <summary> Deployment operation parameters. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Deployment.#ctor(Azure.ResourceManager.Resources.Models.DeploymentProperties)">
            <summary> Initializes a new instance of Deployment. </summary>
            <param name="properties"> The deployment properties. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="properties"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Deployment.Location">
            <summary> The location to store the deployment data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Deployment.Properties">
            <summary> The deployment properties. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Deployment.Tags">
            <summary> Deployment tags. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentExportResult">
            <summary> The deployment export result. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentExportResult.#ctor">
            <summary> Initializes a new instance of DeploymentExportResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentExportResult.#ctor(System.Object)">
            <summary> Initializes a new instance of DeploymentExportResult. </summary>
            <param name="template"> The template content. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentExportResult.Template">
            <summary> The template content. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentExtended">
            <summary> Deployment information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentExtended.#ctor">
            <summary> Initializes a new instance of DeploymentExtended. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentExtended.#ctor(System.String,System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary> Initializes a new instance of DeploymentExtended. </summary>
            <param name="id"> The ID of the deployment. </param>
            <param name="name"> The name of the deployment. </param>
            <param name="type"> The type of the deployment. </param>
            <param name="location"> the location of the deployment. </param>
            <param name="properties"> Deployment properties. </param>
            <param name="tags"> Deployment tags. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentExtended.Id">
            <summary> The ID of the deployment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentExtended.Name">
            <summary> The name of the deployment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentExtended.Type">
            <summary> The type of the deployment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentExtended.Location">
            <summary> the location of the deployment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentExtended.Properties">
            <summary> Deployment properties. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentExtended.Tags">
            <summary> Deployment tags. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentExtendedFilter">
            <summary> Deployment filter. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentExtendedFilter.#ctor">
            <summary> Initializes a new instance of DeploymentExtendedFilter. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentExtendedFilter.ProvisioningState">
            <summary> The provisioning state. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentListResult">
            <summary> List of deployments. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentListResult.#ctor">
            <summary> Initializes a new instance of DeploymentListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.DeploymentExtended},System.String)">
            <summary> Initializes a new instance of DeploymentListResult. </summary>
            <param name="value"> An array of deployments. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentListResult.Value">
            <summary> An array of deployments. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentMode">
            <summary> The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.DeploymentMode.Incremental">
            <summary> Incremental. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.DeploymentMode.Complete">
            <summary> Complete. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentOperation">
            <summary> Deployment operation information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentOperation.#ctor">
            <summary> Initializes a new instance of DeploymentOperation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentOperation.#ctor(System.String,System.String,Azure.ResourceManager.Resources.Models.DeploymentOperationProperties)">
            <summary> Initializes a new instance of DeploymentOperation. </summary>
            <param name="id"> Full deployment operation ID. </param>
            <param name="operationId"> Deployment operation ID. </param>
            <param name="properties"> Deployment properties. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperation.Id">
            <summary> Full deployment operation ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperation.OperationId">
            <summary> Deployment operation ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperation.Properties">
            <summary> Deployment properties. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentOperationProperties">
            <summary> Deployment operation properties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentOperationProperties.#ctor">
            <summary> Initializes a new instance of DeploymentOperationProperties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentOperationProperties.#ctor(System.Nullable{Azure.ResourceManager.Resources.Models.ProvisioningOperation},System.String,System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Object,Azure.ResourceManager.Resources.Models.TargetResource,Azure.ResourceManager.Resources.Models.HttpMessage,Azure.ResourceManager.Resources.Models.HttpMessage)">
            <summary> Initializes a new instance of DeploymentOperationProperties. </summary>
            <param name="provisioningOperation"> The name of the current provisioning operation. </param>
            <param name="provisioningState"> The state of the provisioning. </param>
            <param name="timestamp"> The date and time of the operation. </param>
            <param name="duration"> The duration of the operation. </param>
            <param name="serviceRequestId"> Deployment operation service request id. </param>
            <param name="statusCode"> Operation status code. </param>
            <param name="statusMessage"> Operation status message. </param>
            <param name="targetResource"> The target resource. </param>
            <param name="request"> The HTTP request message. </param>
            <param name="response"> The HTTP response message. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperationProperties.ProvisioningOperation">
            <summary> The name of the current provisioning operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperationProperties.ProvisioningState">
            <summary> The state of the provisioning. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperationProperties.Timestamp">
            <summary> The date and time of the operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperationProperties.Duration">
            <summary> The duration of the operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperationProperties.ServiceRequestId">
            <summary> Deployment operation service request id. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperationProperties.StatusCode">
            <summary> Operation status code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperationProperties.StatusMessage">
            <summary> Operation status message. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperationProperties.TargetResource">
            <summary> The target resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperationProperties.Request">
            <summary> The HTTP request message. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperationProperties.Response">
            <summary> The HTTP response message. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentOperationsListResult">
            <summary> List of deployment operations. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentOperationsListResult.#ctor">
            <summary> Initializes a new instance of DeploymentOperationsListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentOperationsListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.DeploymentOperation},System.String)">
            <summary> Initializes a new instance of DeploymentOperationsListResult. </summary>
            <param name="value"> An array of deployment operations. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperationsListResult.Value">
            <summary> An array of deployment operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentOperationsListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended">
            <summary> Deployment properties with additional details. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.#ctor">
            <summary> Initializes a new instance of DeploymentPropertiesExtended. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.#ctor(System.String,System.String,System.Nullable{System.DateTimeOffset},System.String,System.Object,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.Provider},System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.Dependency},Azure.ResourceManager.Resources.Models.TemplateLink,System.Object,Azure.ResourceManager.Resources.Models.ParametersLink,System.Nullable{Azure.ResourceManager.Resources.Models.DeploymentMode},Azure.ResourceManager.Resources.Models.DebugSetting,Azure.ResourceManager.Resources.Models.OnErrorDeploymentExtended,System.String,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ResourceReference},System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ResourceReference},Azure.ResourceManager.Resources.Models.ErrorResponse)">
            <summary> Initializes a new instance of DeploymentPropertiesExtended. </summary>
            <param name="provisioningState"> The state of the provisioning. </param>
            <param name="correlationId"> The correlation ID of the deployment. </param>
            <param name="timestamp"> The timestamp of the template deployment. </param>
            <param name="duration"> The duration of the template deployment. </param>
            <param name="outputs"> Key/value pairs that represent deployment output. </param>
            <param name="providers"> The list of resource providers needed for the deployment. </param>
            <param name="dependencies"> The list of deployment dependencies. </param>
            <param name="templateLink"> The URI referencing the template. </param>
            <param name="parameters"> Deployment parameters. </param>
            <param name="parametersLink"> The URI referencing the parameters. </param>
            <param name="mode"> The deployment mode. Possible values are Incremental and Complete. </param>
            <param name="debugSetting"> The debug setting of the deployment. </param>
            <param name="onErrorDeployment"> The deployment on error behavior. </param>
            <param name="templateHash"> The hash produced for the template. </param>
            <param name="outputResources"> Array of provisioned resources. </param>
            <param name="validatedResources"> Array of validated resources. </param>
            <param name="error"> The deployment error. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.ProvisioningState">
            <summary> The state of the provisioning. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.CorrelationId">
            <summary> The correlation ID of the deployment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.Timestamp">
            <summary> The timestamp of the template deployment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.Duration">
            <summary> The duration of the template deployment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.Outputs">
            <summary> Key/value pairs that represent deployment output. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.Providers">
            <summary> The list of resource providers needed for the deployment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.Dependencies">
            <summary> The list of deployment dependencies. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.TemplateLink">
            <summary> The URI referencing the template. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.Parameters">
            <summary> Deployment parameters. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.ParametersLink">
            <summary> The URI referencing the parameters. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.Mode">
            <summary> The deployment mode. Possible values are Incremental and Complete. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.DebugSetting">
            <summary> The debug setting of the deployment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.OnErrorDeployment">
            <summary> The deployment on error behavior. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.TemplateHash">
            <summary> The hash produced for the template. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.OutputResources">
            <summary> Array of provisioned resources. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.ValidatedResources">
            <summary> Array of validated resources. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended.Error">
            <summary> The deployment error. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentScript">
            <summary> Deployment script object. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentScript.#ctor(Azure.ResourceManager.Resources.Models.ManagedServiceIdentity,System.String)">
            <summary> Initializes a new instance of DeploymentScript. </summary>
            <param name="identity"> Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported. </param>
            <param name="location"> The location of the ACI and the storage account for the deployment script. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="identity"/> or <paramref name="location"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentScript.#ctor(System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.ManagedServiceIdentity,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Azure.ResourceManager.Resources.Models.ScriptType,Azure.ResourceManager.Resources.Models.SystemData)">
            <summary> Initializes a new instance of DeploymentScript. </summary>
            <param name="id"> String Id used to locate any resource on Azure. </param>
            <param name="name"> Name of this resource. </param>
            <param name="type"> Type of this resource. </param>
            <param name="identity"> Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported. </param>
            <param name="location"> The location of the ACI and the storage account for the deployment script. </param>
            <param name="tags"> Resource tags. </param>
            <param name="kind"> Type of the script. </param>
            <param name="systemData"> The system metadata related to this resource. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScript.Identity">
            <summary> Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScript.Location">
            <summary> The location of the ACI and the storage account for the deployment script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScript.Tags">
            <summary> Resource tags. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScript.Kind">
            <summary> Type of the script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScript.SystemData">
            <summary> The system metadata related to this resource. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentScriptListResult">
            <summary> List of deployment scripts. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentScriptListResult.#ctor">
            <summary> Initializes a new instance of DeploymentScriptListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentScriptListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.DeploymentScript},System.String)">
            <summary> Initializes a new instance of DeploymentScriptListResult. </summary>
            <param name="value"> An array of deployment scripts. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScriptListResult.Value">
            <summary> An array of deployment scripts. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScriptListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentScriptPropertiesBase">
            <summary> Common properties for the deployment script. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentScriptPropertiesBase.#ctor">
            <summary> Initializes a new instance of DeploymentScriptPropertiesBase. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScriptPropertiesBase.ContainerSettings">
            <summary> Container settings. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScriptPropertiesBase.StorageAccountSettings">
            <summary> Storage Account settings. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScriptPropertiesBase.CleanupPreference">
            <summary> The clean up preference when the script execution gets in a terminal state. Default setting is &apos;Always&apos;. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScriptPropertiesBase.ProvisioningState">
            <summary> State of the script execution. This only appears in the response. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScriptPropertiesBase.Status">
            <summary> Contains the results of script execution. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScriptPropertiesBase.Outputs">
            <summary> List of script outputs. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentScriptsError">
            <summary> Deployment scripts error response. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentScriptsError.#ctor">
            <summary> Initializes a new instance of DeploymentScriptsError. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentScriptsError.#ctor(Azure.ResourceManager.Resources.Models.ErrorResponse)">
            <summary> Initializes a new instance of DeploymentScriptsError. </summary>
            <param name="error"> The resource management error response. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScriptsError.Error">
            <summary> The resource management error response. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentScriptUpdateParameter">
            <summary> Deployment script parameters to be updated. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentScriptUpdateParameter.#ctor">
            <summary> Initializes a new instance of DeploymentScriptUpdateParameter. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentScriptUpdateParameter.#ctor(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary> Initializes a new instance of DeploymentScriptUpdateParameter. </summary>
            <param name="id"> String Id used to locate any resource on Azure. </param>
            <param name="name"> Name of this resource. </param>
            <param name="type"> Type of this resource. </param>
            <param name="tags"> Resource tags to be updated. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentScriptUpdateParameter.Tags">
            <summary> Resource tags to be updated. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentValidateResult">
            <summary> Information from validate template deployment response. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentValidateResult.#ctor">
            <summary> Initializes a new instance of DeploymentValidateResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentValidateResult.#ctor(Azure.ResourceManager.Resources.Models.ErrorResponse,Azure.ResourceManager.Resources.Models.DeploymentPropertiesExtended)">
            <summary> Initializes a new instance of DeploymentValidateResult. </summary>
            <param name="error"> The deployment validation error. </param>
            <param name="properties"> The template deployment properties. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentValidateResult.Error">
            <summary> The deployment validation error. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentValidateResult.Properties">
            <summary> The template deployment properties. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentWhatIf">
            <summary> Deployment What-if operation parameters. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentWhatIf.#ctor(Azure.ResourceManager.Resources.Models.DeploymentWhatIfProperties)">
            <summary> Initializes a new instance of DeploymentWhatIf. </summary>
            <param name="properties"> The deployment properties. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="properties"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentWhatIf.Location">
            <summary> The location to store the deployment data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentWhatIf.Properties">
            <summary> The deployment properties. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentWhatIfProperties">
            <summary> Deployment What-if properties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentWhatIfProperties.#ctor(Azure.ResourceManager.Resources.Models.DeploymentMode)">
            <summary> Initializes a new instance of DeploymentWhatIfProperties. </summary>
            <param name="mode"> The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentWhatIfProperties.WhatIfSettings">
            <summary> Optional What-If operation settings. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.DeploymentWhatIfSettings">
            <summary> Deployment What-If operation settings. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.DeploymentWhatIfSettings.#ctor">
            <summary> Initializes a new instance of DeploymentWhatIfSettings. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.DeploymentWhatIfSettings.ResultFormat">
            <summary> The format of the What-If results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.EnforcementMode">
            <summary> The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.#ctor(System.String)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.EnforcementMode"/> values are the same. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.EnforcementMode.Default">
            <summary> The policy effect is enforced during resource creation or update. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.EnforcementMode.DoNotEnforce">
            <summary> The policy effect is not enforced during resource creation or update. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.op_Equality(Azure.ResourceManager.Resources.Models.EnforcementMode,Azure.ResourceManager.Resources.Models.EnforcementMode)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.EnforcementMode"/> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.op_Inequality(Azure.ResourceManager.Resources.Models.EnforcementMode,Azure.ResourceManager.Resources.Models.EnforcementMode)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.EnforcementMode"/> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.EnforcementMode">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.EnforcementMode"/>. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.Equals(Azure.ResourceManager.Resources.Models.EnforcementMode)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnforcementMode.ToString">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.EnvironmentVariable">
            <summary> The environment variable to pass to the script in the container instance. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnvironmentVariable.#ctor(System.String)">
            <summary> Initializes a new instance of EnvironmentVariable. </summary>
            <param name="name"> The name of the environment variable. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.EnvironmentVariable.#ctor(System.String,System.String,System.String)">
            <summary> Initializes a new instance of EnvironmentVariable. </summary>
            <param name="name"> The name of the environment variable. </param>
            <param name="value"> The value of the environment variable. </param>
            <param name="secureValue"> The value of the secure environment variable. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.EnvironmentVariable.Name">
            <summary> The name of the environment variable. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.EnvironmentVariable.Value">
            <summary> The value of the environment variable. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.EnvironmentVariable.SecureValue">
            <summary> The value of the secure environment variable. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ErrorAdditionalInfo">
            <summary> The resource management error additional info. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ErrorAdditionalInfo.#ctor">
            <summary> Initializes a new instance of ErrorAdditionalInfo. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ErrorAdditionalInfo.#ctor(System.String,System.Object)">
            <summary> Initializes a new instance of ErrorAdditionalInfo. </summary>
            <param name="type"> The additional info type. </param>
            <param name="info"> The additional info. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ErrorAdditionalInfo.Type">
            <summary> The additional info type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ErrorAdditionalInfo.Info">
            <summary> The additional info. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ErrorResponse">
            <summary> The resource management error response. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ErrorResponse.#ctor">
            <summary> Initializes a new instance of ErrorResponse. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ErrorResponse.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ErrorResponse},System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ErrorAdditionalInfo})">
            <summary> Initializes a new instance of ErrorResponse. </summary>
            <param name="code"> The error code. </param>
            <param name="message"> The error message. </param>
            <param name="target"> The error target. </param>
            <param name="details"> The error details. </param>
            <param name="additionalInfo"> The error additional info. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ErrorResponse.Code">
            <summary> The error code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ErrorResponse.Message">
            <summary> The error message. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ErrorResponse.Target">
            <summary> The error target. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ErrorResponse.Details">
            <summary> The error details. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ErrorResponse.AdditionalInfo">
            <summary> The error additional info. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ErrorResponseAutoGenerated">
            <summary> Error response indicates managed application is not able to process the incoming request. The reason is provided in the error message. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ErrorResponseAutoGenerated.#ctor">
            <summary> Initializes a new instance of ErrorResponseAutoGenerated. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ErrorResponseAutoGenerated.#ctor(System.String,System.String,System.String)">
            <summary> Initializes a new instance of ErrorResponseAutoGenerated. </summary>
            <param name="httpStatus"> Http status code. </param>
            <param name="errorCode"> Error code. </param>
            <param name="errorMessage"> Error message indicating why the operation failed. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ErrorResponseAutoGenerated.HttpStatus">
            <summary> Http status code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ErrorResponseAutoGenerated.ErrorCode">
            <summary> Error code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ErrorResponseAutoGenerated.ErrorMessage">
            <summary> Error message indicating why the operation failed. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ExportTemplateRequest">
            <summary> Export resource group template request parameters. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ExportTemplateRequest.#ctor">
            <summary> Initializes a new instance of ExportTemplateRequest. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ExportTemplateRequest.Resources">
            <summary> The IDs of the resources to filter the export by. To export all resources, supply an array with single entry &apos;*&apos;. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ExportTemplateRequest.Options">
            <summary> The export template options. A CSV-formatted list containing zero or more of the following: &apos;IncludeParameterDefaultValue&apos;, &apos;IncludeComments&apos;, &apos;SkipResourceNameParameterization&apos;, &apos;SkipAllParameterization&apos;. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.FeatureOperationsListResult">
            <summary> List of previewed features. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.FeatureOperationsListResult.#ctor">
            <summary> Initializes a new instance of FeatureOperationsListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.FeatureOperationsListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.FeatureResult},System.String)">
            <summary> Initializes a new instance of FeatureOperationsListResult. </summary>
            <param name="value"> The array of features. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.FeatureOperationsListResult.Value">
            <summary> The array of features. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.FeatureOperationsListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.FeatureProperties">
            <summary> Information about feature. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.FeatureProperties.#ctor">
            <summary> Initializes a new instance of FeatureProperties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.FeatureProperties.#ctor(System.String)">
            <summary> Initializes a new instance of FeatureProperties. </summary>
            <param name="state"> The registration state of the feature for the subscription. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.FeatureProperties.State">
            <summary> The registration state of the feature for the subscription. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.FeatureResult">
            <summary> Previewed feature information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.FeatureResult.#ctor">
            <summary> Initializes a new instance of FeatureResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.FeatureResult.#ctor(System.String,Azure.ResourceManager.Resources.Models.FeatureProperties,System.String,System.String)">
            <summary> Initializes a new instance of FeatureResult. </summary>
            <param name="name"> The name of the feature. </param>
            <param name="properties"> Properties of the previewed feature. </param>
            <param name="id"> The resource ID of the feature. </param>
            <param name="type"> The resource type of the feature. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.FeatureResult.Name">
            <summary> The name of the feature. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.FeatureResult.Properties">
            <summary> Properties of the previewed feature. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.FeatureResult.Id">
            <summary> The resource ID of the feature. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.FeatureResult.Type">
            <summary> The resource type of the feature. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.GenericResource">
            <summary> Resource information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.GenericResource.#ctor">
            <summary> Initializes a new instance of GenericResource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.GenericResource.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Azure.ResourceManager.Resources.Models.Plan,System.Object,System.String,System.String,Azure.ResourceManager.Resources.Models.Sku,Azure.ResourceManager.Resources.Models.Identity)">
            <summary> Initializes a new instance of GenericResource. </summary>
            <param name="id"> Resource ID. </param>
            <param name="name"> Resource name. </param>
            <param name="type"> Resource type. </param>
            <param name="location"> Resource location. </param>
            <param name="tags"> Resource tags. </param>
            <param name="plan"> The plan of the resource. </param>
            <param name="properties"> The resource properties. </param>
            <param name="kind"> The kind of the resource. </param>
            <param name="managedBy"> ID of the resource that manages this resource. </param>
            <param name="sku"> The SKU of the resource. </param>
            <param name="identity"> The identity of the resource. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResource.Plan">
            <summary> The plan of the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResource.Properties">
            <summary> The resource properties. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResource.Kind">
            <summary> The kind of the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResource.ManagedBy">
            <summary> ID of the resource that manages this resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResource.Sku">
            <summary> The SKU of the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResource.Identity">
            <summary> The identity of the resource. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.GenericResourceAutoGenerated">
            <summary> Resource information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.GenericResourceAutoGenerated.#ctor">
            <summary> Initializes a new instance of GenericResourceAutoGenerated. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.GenericResourceAutoGenerated.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Azure.ResourceManager.Resources.Models.SkuAutoGenerated,Azure.ResourceManager.Resources.Models.IdentityAutoGenerated2)">
            <summary> Initializes a new instance of GenericResourceAutoGenerated. </summary>
            <param name="id"> Resource ID. </param>
            <param name="name"> Resource name. </param>
            <param name="type"> Resource type. </param>
            <param name="location"> Resource location. </param>
            <param name="tags"> Resource tags. </param>
            <param name="managedBy"> ID of the resource that manages this resource. </param>
            <param name="sku"> The SKU of the resource. </param>
            <param name="identity"> The identity of the resource. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResourceAutoGenerated.ManagedBy">
            <summary> ID of the resource that manages this resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResourceAutoGenerated.Sku">
            <summary> The SKU of the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResourceAutoGenerated.Identity">
            <summary> The identity of the resource. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.GenericResourceExpanded">
            <summary> Resource information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.GenericResourceExpanded.#ctor">
            <summary> Initializes a new instance of GenericResourceExpanded. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.GenericResourceExpanded.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Azure.ResourceManager.Resources.Models.Plan,System.Object,System.String,System.String,Azure.ResourceManager.Resources.Models.Sku,Azure.ResourceManager.Resources.Models.Identity,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String)">
            <summary> Initializes a new instance of GenericResourceExpanded. </summary>
            <param name="id"> Resource ID. </param>
            <param name="name"> Resource name. </param>
            <param name="type"> Resource type. </param>
            <param name="location"> Resource location. </param>
            <param name="tags"> Resource tags. </param>
            <param name="plan"> The plan of the resource. </param>
            <param name="properties"> The resource properties. </param>
            <param name="kind"> The kind of the resource. </param>
            <param name="managedBy"> ID of the resource that manages this resource. </param>
            <param name="sku"> The SKU of the resource. </param>
            <param name="identity"> The identity of the resource. </param>
            <param name="createdTime"> The created time of the resource. This is only present if requested via the $expand query parameter. </param>
            <param name="changedTime"> The changed time of the resource. This is only present if requested via the $expand query parameter. </param>
            <param name="provisioningState"> The provisioning state of the resource. This is only present if requested via the $expand query parameter. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResourceExpanded.CreatedTime">
            <summary> The created time of the resource. This is only present if requested via the $expand query parameter. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResourceExpanded.ChangedTime">
            <summary> The changed time of the resource. This is only present if requested via the $expand query parameter. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResourceExpanded.ProvisioningState">
            <summary> The provisioning state of the resource. This is only present if requested via the $expand query parameter. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.GenericResourceFilter">
            <summary> Resource filter. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.GenericResourceFilter.#ctor">
            <summary> Initializes a new instance of GenericResourceFilter. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResourceFilter.ResourceType">
            <summary> The resource type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResourceFilter.Tagname">
            <summary> The tag name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.GenericResourceFilter.Tagvalue">
            <summary> The tag value. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.HttpMessage">
            <summary> HTTP message. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.HttpMessage.#ctor">
            <summary> Initializes a new instance of HttpMessage. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.HttpMessage.#ctor(System.Object)">
            <summary> Initializes a new instance of HttpMessage. </summary>
            <param name="content"> HTTP message content. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.HttpMessage.Content">
            <summary> HTTP message content. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Identity">
            <summary> Identity for the resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Identity.#ctor">
            <summary> Initializes a new instance of Identity. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Identity.#ctor(System.String,System.String,System.Nullable{Azure.ResourceManager.Resources.Models.ResourceIdentityType},System.Collections.Generic.IDictionary{System.String,Azure.ResourceManager.Resources.Models.IdentityUserAssignedIdentitiesValue})">
            <summary> Initializes a new instance of Identity. </summary>
            <param name="principalId"> The principal ID of resource identity. </param>
            <param name="tenantId"> The tenant ID of resource. </param>
            <param name="type"> The identity type. </param>
            <param name="userAssignedIdentities"> The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Identity.PrincipalId">
            <summary> The principal ID of resource identity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Identity.TenantId">
            <summary> The tenant ID of resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Identity.Type">
            <summary> The identity type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Identity.UserAssignedIdentities">
            <summary> The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.IdentityAutoGenerated">
            <summary> Identity for the resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.IdentityAutoGenerated.#ctor">
            <summary> Initializes a new instance of IdentityAutoGenerated. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.IdentityAutoGenerated.#ctor(System.String,System.String,System.Nullable{Azure.ResourceManager.Resources.Models.ResourceIdentityType})">
            <summary> Initializes a new instance of IdentityAutoGenerated. </summary>
            <param name="principalId"> The principal ID of the resource identity. </param>
            <param name="tenantId"> The tenant ID of the resource identity. </param>
            <param name="type"> The identity type. This is the only required field when adding a system assigned identity to a resource. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.IdentityAutoGenerated.PrincipalId">
            <summary> The principal ID of the resource identity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.IdentityAutoGenerated.TenantId">
            <summary> The tenant ID of the resource identity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.IdentityAutoGenerated.Type">
            <summary> The identity type. This is the only required field when adding a system assigned identity to a resource. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.IdentityAutoGenerated2">
            <summary> Identity for the resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.IdentityAutoGenerated2.#ctor">
            <summary> Initializes a new instance of IdentityAutoGenerated2. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.IdentityAutoGenerated2.#ctor(System.String,System.String,System.Nullable{Azure.ResourceManager.Resources.Models.ResourceIdentityType})">
            <summary> Initializes a new instance of IdentityAutoGenerated2. </summary>
            <param name="principalId"> The principal ID of resource identity. </param>
            <param name="tenantId"> The tenant ID of resource. </param>
            <param name="type"> The identity type. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.IdentityAutoGenerated2.PrincipalId">
            <summary> The principal ID of resource identity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.IdentityAutoGenerated2.TenantId">
            <summary> The tenant ID of resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.IdentityAutoGenerated2.Type">
            <summary> The identity type. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.IdentityUserAssignedIdentitiesValue">
            <summary> The IdentityUserAssignedIdentitiesValue. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.IdentityUserAssignedIdentitiesValue.#ctor">
            <summary> Initializes a new instance of IdentityUserAssignedIdentitiesValue. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.IdentityUserAssignedIdentitiesValue.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of IdentityUserAssignedIdentitiesValue. </summary>
            <param name="principalId"> The principal id of user assigned identity. </param>
            <param name="clientId"> The client id of user assigned identity. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.IdentityUserAssignedIdentitiesValue.PrincipalId">
            <summary> The principal id of user assigned identity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.IdentityUserAssignedIdentitiesValue.ClientId">
            <summary> The client id of user assigned identity. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Location">
            <summary> Location information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Location.#ctor">
            <summary> Initializes a new instance of Location. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Location.#ctor(System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.LocationMetadata)">
            <summary> Initializes a new instance of Location. </summary>
            <param name="id"> The fully qualified ID of the location. For example, /subscriptions/00000000-0000-0000-0000-000000000000/locations/westus. </param>
            <param name="subscriptionId"> The subscription ID. </param>
            <param name="name"> The location name. </param>
            <param name="displayName"> The display name of the location. </param>
            <param name="regionalDisplayName"> The display name of the location and its region. </param>
            <param name="metadata"> Metadata of the location, such as lat/long, paired region, and others. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Location.Id">
            <summary> The fully qualified ID of the location. For example, /subscriptions/00000000-0000-0000-0000-000000000000/locations/westus. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Location.SubscriptionId">
            <summary> The subscription ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Location.Name">
            <summary> The location name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Location.DisplayName">
            <summary> The display name of the location. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Location.RegionalDisplayName">
            <summary> The display name of the location and its region. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Location.Metadata">
            <summary> Metadata of the location, such as lat/long, paired region, and others. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.LocationListResult">
            <summary> Location list operation response. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LocationListResult.#ctor">
            <summary> Initializes a new instance of LocationListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LocationListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.Location})">
            <summary> Initializes a new instance of LocationListResult. </summary>
            <param name="value"> An array of locations. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationListResult.Value">
            <summary> An array of locations. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.LocationMetadata">
            <summary> Location metadata information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LocationMetadata.#ctor">
            <summary> Initializes a new instance of LocationMetadata. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LocationMetadata.#ctor(System.Nullable{Azure.ResourceManager.Resources.Models.RegionType},System.Nullable{Azure.ResourceManager.Resources.Models.RegionCategory},System.String,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.PairedRegion})">
            <summary> Initializes a new instance of LocationMetadata. </summary>
            <param name="regionType"> The type of the region. </param>
            <param name="regionCategory"> The category of the region. </param>
            <param name="geographyGroup"> The geography group of the location. </param>
            <param name="longitude"> The longitude of the location. </param>
            <param name="latitude"> The latitude of the location. </param>
            <param name="physicalLocation"> The physical location of the Azure location. </param>
            <param name="pairedRegion"> The regions paired to this region. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.RegionType">
            <summary> The type of the region. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.RegionCategory">
            <summary> The category of the region. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.GeographyGroup">
            <summary> The geography group of the location. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.Longitude">
            <summary> The longitude of the location. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.Latitude">
            <summary> The latitude of the location. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.PhysicalLocation">
            <summary> The physical location of the Azure location. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LocationMetadata.PairedRegion">
            <summary> The regions paired to this region. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.LockLevel">
            <summary> The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&apos;t modify or delete it. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LockLevel.#ctor(System.String)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.LockLevel"/> values are the same. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LockLevel.NotSpecified">
            <summary> NotSpecified. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LockLevel.CanNotDelete">
            <summary> CanNotDelete. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.LockLevel.ReadOnly">
            <summary> ReadOnly. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LockLevel.op_Equality(Azure.ResourceManager.Resources.Models.LockLevel,Azure.ResourceManager.Resources.Models.LockLevel)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.LockLevel"/> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LockLevel.op_Inequality(Azure.ResourceManager.Resources.Models.LockLevel,Azure.ResourceManager.Resources.Models.LockLevel)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.LockLevel"/> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LockLevel.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.LockLevel">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.LockLevel"/>. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LockLevel.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LockLevel.Equals(Azure.ResourceManager.Resources.Models.LockLevel)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LockLevel.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.LockLevel.ToString">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ManagedByTenant">
            <summary> Information about a tenant managing the subscription. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagedByTenant.#ctor">
            <summary> Initializes a new instance of ManagedByTenant. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagedByTenant.#ctor(System.String)">
            <summary> Initializes a new instance of ManagedByTenant. </summary>
            <param name="tenantId"> The tenant ID of the managing tenant. This is a GUID. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagedByTenant.TenantId">
            <summary> The tenant ID of the managing tenant. This is a GUID. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ManagedServiceIdentity">
            <summary> Managed identity generic object. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagedServiceIdentity.#ctor">
            <summary> Initializes a new instance of ManagedServiceIdentity. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagedServiceIdentity.#ctor(System.Nullable{Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType},System.Collections.Generic.IDictionary{System.String,Azure.ResourceManager.Resources.Models.UserAssignedIdentity})">
            <summary> Initializes a new instance of ManagedServiceIdentity. </summary>
            <param name="type"> Type of the managed identity. </param>
            <param name="userAssignedIdentities"> The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagedServiceIdentity.Type">
            <summary> Type of the managed identity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagedServiceIdentity.UserAssignedIdentities">
            <summary> The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType">
            <summary> Type of the managed identity. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType.#ctor(System.String)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType"/> values are the same. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType.UserAssigned">
            <summary> UserAssigned. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType.op_Equality(Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType,Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType"/> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType.op_Inequality(Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType,Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType"/> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType"/>. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType.Equals(Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagedServiceIdentityType.ToString">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ManagementLockListResult">
            <summary> The list of locks. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockListResult.#ctor">
            <summary> Initializes a new instance of ManagementLockListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ManagementLockObject},System.String)">
            <summary> Initializes a new instance of ManagementLockListResult. </summary>
            <param name="value"> The list of locks. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockListResult.Value">
            <summary> The list of locks. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ManagementLockObject">
            <summary> The lock information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockObject.#ctor(Azure.ResourceManager.Resources.Models.LockLevel)">
            <summary> Initializes a new instance of ManagementLockObject. </summary>
            <param name="level"> The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&apos;t modify or delete it. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockObject.#ctor(System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.LockLevel,System.String,System.Collections.Generic.IList{Azure.ResourceManager.Resources.Models.ManagementLockOwner})">
            <summary> Initializes a new instance of ManagementLockObject. </summary>
            <param name="id"> The resource ID of the lock. </param>
            <param name="type"> The resource type of the lock - Microsoft.Authorization/locks. </param>
            <param name="name"> The name of the lock. </param>
            <param name="level"> The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&apos;t modify or delete it. </param>
            <param name="notes"> Notes about the lock. Maximum of 512 characters. </param>
            <param name="owners"> The owners of the lock. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockObject.Id">
            <summary> The resource ID of the lock. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockObject.Type">
            <summary> The resource type of the lock - Microsoft.Authorization/locks. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockObject.Name">
            <summary> The name of the lock. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockObject.Level">
            <summary> The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&apos;t modify or delete it. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockObject.Notes">
            <summary> Notes about the lock. Maximum of 512 characters. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockObject.Owners">
            <summary> The owners of the lock. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ManagementLockOwner">
            <summary> Lock owner properties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockOwner.#ctor">
            <summary> Initializes a new instance of ManagementLockOwner. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ManagementLockOwner.#ctor(System.String)">
            <summary> Initializes a new instance of ManagementLockOwner. </summary>
            <param name="applicationId"> The application ID of the lock owner. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ManagementLockOwner.ApplicationId">
            <summary> The application ID of the lock owner. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.OnErrorDeployment">
            <summary> Deployment on error behavior. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OnErrorDeployment.#ctor">
            <summary> Initializes a new instance of OnErrorDeployment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OnErrorDeployment.Type">
            <summary> The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OnErrorDeployment.DeploymentName">
            <summary> The deployment to be used on error case. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.OnErrorDeploymentExtended">
            <summary> Deployment on error behavior with additional details. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OnErrorDeploymentExtended.#ctor">
            <summary> Initializes a new instance of OnErrorDeploymentExtended. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OnErrorDeploymentExtended.#ctor(System.String,System.Nullable{Azure.ResourceManager.Resources.Models.OnErrorDeploymentType},System.String)">
            <summary> Initializes a new instance of OnErrorDeploymentExtended. </summary>
            <param name="provisioningState"> The state of the provisioning for the on error deployment. </param>
            <param name="type"> The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment. </param>
            <param name="deploymentName"> The deployment to be used on error case. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OnErrorDeploymentExtended.ProvisioningState">
            <summary> The state of the provisioning for the on error deployment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OnErrorDeploymentExtended.Type">
            <summary> The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OnErrorDeploymentExtended.DeploymentName">
            <summary> The deployment to be used on error case. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.OnErrorDeploymentType">
            <summary> The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.OnErrorDeploymentType.LastSuccessful">
            <summary> LastSuccessful. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.OnErrorDeploymentType.SpecificDeployment">
            <summary> SpecificDeployment. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Operation">
            <summary> Microsoft.Resources operation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Operation.#ctor">
            <summary> Initializes a new instance of Operation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Operation.#ctor(System.String,Azure.ResourceManager.Resources.Models.OperationDisplay)">
            <summary> Initializes a new instance of Operation. </summary>
            <param name="name"> Operation name: {provider}/{resource}/{operation}. </param>
            <param name="display"> The object that represents the operation. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Operation.Name">
            <summary> Operation name: {provider}/{resource}/{operation}. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Operation.Display">
            <summary> The object that represents the operation. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.OperationAutoGenerated">
            <summary> Microsoft.Features operation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationAutoGenerated.#ctor">
            <summary> Initializes a new instance of OperationAutoGenerated. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationAutoGenerated.#ctor(System.String,Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated)">
            <summary> Initializes a new instance of OperationAutoGenerated. </summary>
            <param name="name"> Operation name: {provider}/{resource}/{operation}. </param>
            <param name="display"> The object that represents the operation. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationAutoGenerated.Name">
            <summary> Operation name: {provider}/{resource}/{operation}. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationAutoGenerated.Display">
            <summary> The object that represents the operation. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.OperationAutoGenerated2">
            <summary> Microsoft.Authorization operation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationAutoGenerated2.#ctor">
            <summary> Initializes a new instance of OperationAutoGenerated2. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationAutoGenerated2.#ctor(System.String,Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated2)">
            <summary> Initializes a new instance of OperationAutoGenerated2. </summary>
            <param name="name"> Operation name: {provider}/{resource}/{operation}. </param>
            <param name="display"> The object that represents the operation. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationAutoGenerated2.Name">
            <summary> Operation name: {provider}/{resource}/{operation}. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationAutoGenerated2.Display">
            <summary> The object that represents the operation. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.OperationAutoGenerated3">
            <summary> Microsoft.Resources operation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationAutoGenerated3.#ctor">
            <summary> Initializes a new instance of OperationAutoGenerated3. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationAutoGenerated3.Name">
            <summary> Operation name: {provider}/{resource}/{operation}. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationAutoGenerated3.Display">
            <summary> The object that represents the operation. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.OperationDisplay">
            <summary> The object that represents the operation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationDisplay.#ctor">
            <summary> Initializes a new instance of OperationDisplay. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationDisplay.#ctor(System.String,System.String,System.String,System.String)">
            <summary> Initializes a new instance of OperationDisplay. </summary>
            <param name="provider"> Service provider: Microsoft.Resources. </param>
            <param name="resource"> Resource on which the operation is performed: Profile, endpoint, etc. </param>
            <param name="operation"> Operation type: Read, write, delete, etc. </param>
            <param name="description"> Description of the operation. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationDisplay.Provider">
            <summary> Service provider: Microsoft.Resources. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationDisplay.Resource">
            <summary> Resource on which the operation is performed: Profile, endpoint, etc. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationDisplay.Operation">
            <summary> Operation type: Read, write, delete, etc. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationDisplay.Description">
            <summary> Description of the operation. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated">
            <summary> The object that represents the operation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated.#ctor">
            <summary> Initializes a new instance of OperationDisplayAutoGenerated. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated.#ctor(System.String,System.String,System.String)">
            <summary> Initializes a new instance of OperationDisplayAutoGenerated. </summary>
            <param name="provider"> Service provider: Microsoft.Features. </param>
            <param name="resource"> Resource on which the operation is performed: Profile, endpoint, etc. </param>
            <param name="operation"> Operation type: Read, write, delete, etc. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated.Provider">
            <summary> Service provider: Microsoft.Features. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated.Resource">
            <summary> Resource on which the operation is performed: Profile, endpoint, etc. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated.Operation">
            <summary> Operation type: Read, write, delete, etc. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated2">
            <summary> The object that represents the operation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated2.#ctor">
            <summary> Initializes a new instance of OperationDisplayAutoGenerated2. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated2.#ctor(System.String,System.String,System.String)">
            <summary> Initializes a new instance of OperationDisplayAutoGenerated2. </summary>
            <param name="provider"> Service provider: Microsoft.Authorization. </param>
            <param name="resource"> Resource on which the operation is performed: Profile, endpoint, etc. </param>
            <param name="operation"> Operation type: Read, write, delete, etc. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated2.Provider">
            <summary> Service provider: Microsoft.Authorization. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated2.Resource">
            <summary> Resource on which the operation is performed: Profile, endpoint, etc. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated2.Operation">
            <summary> Operation type: Read, write, delete, etc. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated3">
            <summary> The object that represents the operation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated3.#ctor">
            <summary> Initializes a new instance of OperationDisplayAutoGenerated3. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated3.Provider">
            <summary> Service provider: Microsoft.Resources. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated3.Resource">
            <summary> Resource on which the operation is performed: Profile, endpoint, etc. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated3.Operation">
            <summary> Operation type: Read, write, delete, etc. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationDisplayAutoGenerated3.Description">
            <summary> Description of the operation. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.OperationListResult">
            <summary> Result of the request to list Microsoft.Resources operations. It contains a list of operations and a URL link to get the next set of results. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationListResult.#ctor">
            <summary> Initializes a new instance of OperationListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.Operation},System.String)">
            <summary> Initializes a new instance of OperationListResult. </summary>
            <param name="value"> List of Microsoft.Resources operations. </param>
            <param name="nextLink"> URL to get the next set of operation list results if there are any. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationListResult.Value">
            <summary> List of Microsoft.Resources operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationListResult.NextLink">
            <summary> URL to get the next set of operation list results if there are any. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.OperationListResultAutoGenerated">
            <summary> Result of the request to list Microsoft.Features operations. It contains a list of operations and a URL link to get the next set of results. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationListResultAutoGenerated.#ctor">
            <summary> Initializes a new instance of OperationListResultAutoGenerated. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationListResultAutoGenerated.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.OperationAutoGenerated},System.String)">
            <summary> Initializes a new instance of OperationListResultAutoGenerated. </summary>
            <param name="value"> List of Microsoft.Features operations. </param>
            <param name="nextLink"> URL to get the next set of operation list results if there are any. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationListResultAutoGenerated.Value">
            <summary> List of Microsoft.Features operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationListResultAutoGenerated.NextLink">
            <summary> URL to get the next set of operation list results if there are any. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.OperationListResultAutoGenerated2">
            <summary> Result of the request to list Microsoft.Authorization operations. It contains a list of operations and a URL link to get the next set of results. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationListResultAutoGenerated2.#ctor">
            <summary> Initializes a new instance of OperationListResultAutoGenerated2. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationListResultAutoGenerated2.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.OperationAutoGenerated2},System.String)">
            <summary> Initializes a new instance of OperationListResultAutoGenerated2. </summary>
            <param name="value"> List of Microsoft.Authorization operations. </param>
            <param name="nextLink"> URL to get the next set of operation list results if there are any. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationListResultAutoGenerated2.Value">
            <summary> List of Microsoft.Authorization operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationListResultAutoGenerated2.NextLink">
            <summary> URL to get the next set of operation list results if there are any. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.OperationListResultAutoGenerated3">
            <summary> Result of the request to list Microsoft.Resources operations. It contains a list of operations and a URL link to get the next set of results. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.OperationListResultAutoGenerated3.#ctor">
            <summary> Initializes a new instance of OperationListResultAutoGenerated3. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationListResultAutoGenerated3.Value">
            <summary> List of Microsoft.Resources operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.OperationListResultAutoGenerated3.NextLink">
            <summary> URL to get the next set of operation list results if there are any. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PairedRegion">
            <summary> Information regarding paired region. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PairedRegion.#ctor">
            <summary> Initializes a new instance of PairedRegion. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PairedRegion.#ctor(System.String,System.String,System.String)">
            <summary> Initializes a new instance of PairedRegion. </summary>
            <param name="name"> The name of the paired region. </param>
            <param name="id"> The fully qualified ID of the location. For example, /subscriptions/00000000-0000-0000-0000-000000000000/locations/westus. </param>
            <param name="subscriptionId"> The subscription ID. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PairedRegion.Name">
            <summary> The name of the paired region. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PairedRegion.Id">
            <summary> The fully qualified ID of the location. For example, /subscriptions/00000000-0000-0000-0000-000000000000/locations/westus. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PairedRegion.SubscriptionId">
            <summary> The subscription ID. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValue">
            <summary> The definition of a parameter that can be provided to the policy. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValue.#ctor">
            <summary> Initializes a new instance of ParameterDefinitionsValue. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValue.#ctor(System.Nullable{Azure.ResourceManager.Resources.Models.ParameterType},System.Collections.Generic.IList{System.Object},System.Object,Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata)">
            <summary> Initializes a new instance of ParameterDefinitionsValue. </summary>
            <param name="type"> The data type of the parameter. </param>
            <param name="allowedValues"> The allowed values for the parameter. </param>
            <param name="defaultValue"> The default value for the parameter if no value is provided. </param>
            <param name="metadata"> General metadata for the parameter. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValue.Type">
            <summary> The data type of the parameter. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValue.AllowedValues">
            <summary> The allowed values for the parameter. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValue.DefaultValue">
            <summary> The default value for the parameter if no value is provided. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValue.Metadata">
            <summary> General metadata for the parameter. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata">
            <summary> General metadata for the parameter. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.#ctor">
            <summary> Initializes a new instance of ParameterDefinitionsValueMetadata. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary> Initializes a new instance of ParameterDefinitionsValueMetadata. </summary>
            <param name="displayName"> The display name for the parameter. </param>
            <param name="description"> The description of the parameter. </param>
            <param name="additionalProperties"> . </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.DisplayName">
            <summary> The display name for the parameter. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.Description">
            <summary> The description of the parameter. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.TryGetValue(System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.ContainsKey(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.Keys">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.Values">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Count">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.Add(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Clear">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterDefinitionsValueMetadata.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ParametersLink">
            <summary> Entity representing the reference to the deployment parameters. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParametersLink.#ctor(System.String)">
            <summary> Initializes a new instance of ParametersLink. </summary>
            <param name="uri"> The URI of the parameters file. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="uri"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParametersLink.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of ParametersLink. </summary>
            <param name="uri"> The URI of the parameters file. </param>
            <param name="contentVersion"> If included, must match the ContentVersion in the template. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParametersLink.Uri">
            <summary> The URI of the parameters file. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParametersLink.ContentVersion">
            <summary> If included, must match the ContentVersion in the template. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ParameterType">
            <summary> The data type of the parameter. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterType.#ctor(System.String)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ParameterType"/> values are the same. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterType.String">
            <summary> String. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterType.Array">
            <summary> Array. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterType.Object">
            <summary> Object. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterType.Boolean">
            <summary> Boolean. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterType.Integer">
            <summary> Integer. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterType.Float">
            <summary> Float. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterType.DateTime">
            <summary> DateTime. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterType.op_Equality(Azure.ResourceManager.Resources.Models.ParameterType,Azure.ResourceManager.Resources.Models.ParameterType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ParameterType"/> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterType.op_Inequality(Azure.ResourceManager.Resources.Models.ParameterType,Azure.ResourceManager.Resources.Models.ParameterType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ParameterType"/> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterType.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.ParameterType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.ParameterType"/>. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterType.Equals(Azure.ResourceManager.Resources.Models.ParameterType)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterType.ToString">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ParameterValuesValue">
            <summary> The value of a parameter. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterValuesValue.#ctor">
            <summary> Initializes a new instance of ParameterValuesValue. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ParameterValuesValue.#ctor(System.Object)">
            <summary> Initializes a new instance of ParameterValuesValue. </summary>
            <param name="value"> The value of the parameter. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ParameterValuesValue.Value">
            <summary> The value of the parameter. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Plan">
            <summary> Plan for the resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Plan.#ctor">
            <summary> Initializes a new instance of Plan. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Plan.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary> Initializes a new instance of Plan. </summary>
            <param name="name"> The plan ID. </param>
            <param name="publisher"> The publisher ID. </param>
            <param name="product"> The offer ID. </param>
            <param name="promotionCode"> The promotion code. </param>
            <param name="version"> The plan&apos;s version. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Plan.Name">
            <summary> The plan ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Plan.Publisher">
            <summary> The publisher ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Plan.Product">
            <summary> The offer ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Plan.PromotionCode">
            <summary> The promotion code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Plan.Version">
            <summary> The plan&apos;s version. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PlanAutoGenerated">
            <summary> Plan for the managed application. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PlanAutoGenerated.#ctor(System.String,System.String,System.String,System.String)">
            <summary> Initializes a new instance of PlanAutoGenerated. </summary>
            <param name="name"> The plan name. </param>
            <param name="publisher"> The publisher ID. </param>
            <param name="product"> The product code. </param>
            <param name="version"> The plan&apos;s version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name"/>, <paramref name="publisher"/>, <paramref name="product"/>, or <paramref name="version"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PlanAutoGenerated.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary> Initializes a new instance of PlanAutoGenerated. </summary>
            <param name="name"> The plan name. </param>
            <param name="publisher"> The publisher ID. </param>
            <param name="product"> The product code. </param>
            <param name="promotionCode"> The promotion code. </param>
            <param name="version"> The plan&apos;s version. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PlanAutoGenerated.Name">
            <summary> The plan name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PlanAutoGenerated.Publisher">
            <summary> The publisher ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PlanAutoGenerated.Product">
            <summary> The product code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PlanAutoGenerated.PromotionCode">
            <summary> The promotion code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PlanAutoGenerated.Version">
            <summary> The plan&apos;s version. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PlanPatchable">
            <summary> Plan for the managed application. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PlanPatchable.#ctor">
            <summary> Initializes a new instance of PlanPatchable. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PlanPatchable.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary> Initializes a new instance of PlanPatchable. </summary>
            <param name="name"> The plan name. </param>
            <param name="publisher"> The publisher ID. </param>
            <param name="product"> The product code. </param>
            <param name="promotionCode"> The promotion code. </param>
            <param name="version"> The plan&apos;s version. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PlanPatchable.Name">
            <summary> The plan name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PlanPatchable.Publisher">
            <summary> The publisher ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PlanPatchable.Product">
            <summary> The product code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PlanPatchable.PromotionCode">
            <summary> The promotion code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PlanPatchable.Version">
            <summary> The plan&apos;s version. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicyAssignment">
            <summary> The policy assignment. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyAssignment.#ctor">
            <summary> Initializes a new instance of PolicyAssignment. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyAssignment.#ctor(System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.PolicySku,System.String,Azure.ResourceManager.Resources.Models.IdentityAutoGenerated,System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IDictionary{System.String,Azure.ResourceManager.Resources.Models.ParameterValuesValue},System.String,System.Object,System.Nullable{Azure.ResourceManager.Resources.Models.EnforcementMode})">
            <summary> Initializes a new instance of PolicyAssignment. </summary>
            <param name="id"> The ID of the policy assignment. </param>
            <param name="type"> The type of the policy assignment. </param>
            <param name="name"> The name of the policy assignment. </param>
            <param name="sku"> The policy sku. This property is optional, obsolete, and will be ignored. </param>
            <param name="location"> The location of the policy assignment. Only required when utilizing managed identity. </param>
            <param name="identity"> The managed identity associated with the policy assignment. </param>
            <param name="displayName"> The display name of the policy assignment. </param>
            <param name="policyDefinitionId"> The ID of the policy definition or policy set definition being assigned. </param>
            <param name="scope"> The scope for the policy assignment. </param>
            <param name="notScopes"> The policy&apos;s excluded scopes. </param>
            <param name="parameters"> The parameter values for the assigned policy rule. The keys are the parameter names. </param>
            <param name="description"> This message will be part of response in case of policy violation. </param>
            <param name="metadata"> The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs. </param>
            <param name="enforcementMode"> The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignment.Id">
            <summary> The ID of the policy assignment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignment.Type">
            <summary> The type of the policy assignment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignment.Name">
            <summary> The name of the policy assignment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignment.Sku">
            <summary> The policy sku. This property is optional, obsolete, and will be ignored. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignment.Location">
            <summary> The location of the policy assignment. Only required when utilizing managed identity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignment.Identity">
            <summary> The managed identity associated with the policy assignment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignment.DisplayName">
            <summary> The display name of the policy assignment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignment.PolicyDefinitionId">
            <summary> The ID of the policy definition or policy set definition being assigned. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignment.Scope">
            <summary> The scope for the policy assignment. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignment.NotScopes">
            <summary> The policy&apos;s excluded scopes. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignment.Parameters">
            <summary> The parameter values for the assigned policy rule. The keys are the parameter names. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignment.Description">
            <summary> This message will be part of response in case of policy violation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignment.Metadata">
            <summary> The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignment.EnforcementMode">
            <summary> The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicyAssignmentListResult">
            <summary> List of policy assignments. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyAssignmentListResult.#ctor">
            <summary> Initializes a new instance of PolicyAssignmentListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyAssignmentListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.PolicyAssignment},System.String)">
            <summary> Initializes a new instance of PolicyAssignmentListResult. </summary>
            <param name="value"> An array of policy assignments. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignmentListResult.Value">
            <summary> An array of policy assignments. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyAssignmentListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicyDefinition">
            <summary> The policy definition. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyDefinition.#ctor">
            <summary> Initializes a new instance of PolicyDefinition. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyDefinition.#ctor(System.String,System.String,System.String,System.Nullable{Azure.ResourceManager.Resources.Models.PolicyType},System.String,System.String,System.String,System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,Azure.ResourceManager.Resources.Models.ParameterDefinitionsValue})">
            <summary> Initializes a new instance of PolicyDefinition. </summary>
            <param name="id"> The ID of the policy definition. </param>
            <param name="name"> The name of the policy definition. </param>
            <param name="type"> The type of the resource (Microsoft.Authorization/policyDefinitions). </param>
            <param name="policyType"> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </param>
            <param name="mode"> The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data. </param>
            <param name="displayName"> The display name of the policy definition. </param>
            <param name="description"> The policy definition description. </param>
            <param name="policyRule"> The policy rule. </param>
            <param name="metadata"> The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. </param>
            <param name="parameters"> The parameter definitions for parameters used in the policy rule. The keys are the parameter names. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinition.Id">
            <summary> The ID of the policy definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinition.Name">
            <summary> The name of the policy definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinition.Type">
            <summary> The type of the resource (Microsoft.Authorization/policyDefinitions). </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinition.PolicyType">
            <summary> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinition.Mode">
            <summary> The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinition.DisplayName">
            <summary> The display name of the policy definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinition.Description">
            <summary> The policy definition description. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinition.PolicyRule">
            <summary> The policy rule. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinition.Metadata">
            <summary> The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinition.Parameters">
            <summary> The parameter definitions for parameters used in the policy rule. The keys are the parameter names. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup">
            <summary> The policy definition group. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup.#ctor(System.String)">
            <summary> Initializes a new instance of PolicyDefinitionGroup. </summary>
            <param name="name"> The name of the group. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary> Initializes a new instance of PolicyDefinitionGroup. </summary>
            <param name="name"> The name of the group. </param>
            <param name="displayName"> The group&apos;s display name. </param>
            <param name="category"> The group&apos;s category. </param>
            <param name="description"> The group&apos;s description. </param>
            <param name="additionalMetadataId"> A resource ID of a resource that contains additional metadata about the group. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup.Name">
            <summary> The name of the group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup.DisplayName">
            <summary> The group&apos;s display name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup.Category">
            <summary> The group&apos;s category. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup.Description">
            <summary> The group&apos;s description. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup.AdditionalMetadataId">
            <summary> A resource ID of a resource that contains additional metadata about the group. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicyDefinitionListResult">
            <summary> List of policy definitions. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyDefinitionListResult.#ctor">
            <summary> Initializes a new instance of PolicyDefinitionListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyDefinitionListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.PolicyDefinition},System.String)">
            <summary> Initializes a new instance of PolicyDefinitionListResult. </summary>
            <param name="value"> An array of policy definitions. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionListResult.Value">
            <summary> An array of policy definitions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicyDefinitionReference">
            <summary> The policy definition reference. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyDefinitionReference.#ctor(System.String)">
            <summary> Initializes a new instance of PolicyDefinitionReference. </summary>
            <param name="policyDefinitionId"> The ID of the policy definition or policy set definition. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyDefinitionReference.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,Azure.ResourceManager.Resources.Models.ParameterValuesValue},System.String,System.Collections.Generic.IList{System.String})">
            <summary> Initializes a new instance of PolicyDefinitionReference. </summary>
            <param name="policyDefinitionId"> The ID of the policy definition or policy set definition. </param>
            <param name="parameters"> The parameter values for the referenced policy rule. The keys are the parameter names. </param>
            <param name="policyDefinitionReferenceId"> A unique id (within the policy set definition) for this policy definition reference. </param>
            <param name="groupNames"> The name of the groups that this policy definition reference belongs to. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionReference.PolicyDefinitionId">
            <summary> The ID of the policy definition or policy set definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionReference.Parameters">
            <summary> The parameter values for the referenced policy rule. The keys are the parameter names. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionReference.PolicyDefinitionReferenceId">
            <summary> A unique id (within the policy set definition) for this policy definition reference. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyDefinitionReference.GroupNames">
            <summary> The name of the groups that this policy definition reference belongs to. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicySetDefinition">
            <summary> The policy set definition. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicySetDefinition.#ctor">
            <summary> Initializes a new instance of PolicySetDefinition. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicySetDefinition.#ctor(System.String,System.String,System.String,System.Nullable{Azure.ResourceManager.Resources.Models.PolicyType},System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,Azure.ResourceManager.Resources.Models.ParameterDefinitionsValue},System.Collections.Generic.IList{Azure.ResourceManager.Resources.Models.PolicyDefinitionReference},System.Collections.Generic.IList{Azure.ResourceManager.Resources.Models.PolicyDefinitionGroup})">
            <summary> Initializes a new instance of PolicySetDefinition. </summary>
            <param name="id"> The ID of the policy set definition. </param>
            <param name="name"> The name of the policy set definition. </param>
            <param name="type"> The type of the resource (Microsoft.Authorization/policySetDefinitions). </param>
            <param name="policyType"> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </param>
            <param name="displayName"> The display name of the policy set definition. </param>
            <param name="description"> The policy set definition description. </param>
            <param name="metadata"> The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. </param>
            <param name="parameters"> The policy set definition parameters that can be used in policy definition references. </param>
            <param name="policyDefinitions"> An array of policy definition references. </param>
            <param name="policyDefinitionGroups"> The metadata describing groups of policy definition references within the policy set definition. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySetDefinition.Id">
            <summary> The ID of the policy set definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySetDefinition.Name">
            <summary> The name of the policy set definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySetDefinition.Type">
            <summary> The type of the resource (Microsoft.Authorization/policySetDefinitions). </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySetDefinition.PolicyType">
            <summary> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySetDefinition.DisplayName">
            <summary> The display name of the policy set definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySetDefinition.Description">
            <summary> The policy set definition description. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySetDefinition.Metadata">
            <summary> The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySetDefinition.Parameters">
            <summary> The policy set definition parameters that can be used in policy definition references. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySetDefinition.PolicyDefinitions">
            <summary> An array of policy definition references. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySetDefinition.PolicyDefinitionGroups">
            <summary> The metadata describing groups of policy definition references within the policy set definition. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicySetDefinitionListResult">
            <summary> List of policy set definitions. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicySetDefinitionListResult.#ctor">
            <summary> Initializes a new instance of PolicySetDefinitionListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicySetDefinitionListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.PolicySetDefinition},System.String)">
            <summary> Initializes a new instance of PolicySetDefinitionListResult. </summary>
            <param name="value"> An array of policy set definitions. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySetDefinitionListResult.Value">
            <summary> An array of policy set definitions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySetDefinitionListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicySku">
            <summary> The policy sku. This property is optional, obsolete, and will be ignored. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicySku.#ctor(System.String)">
            <summary> Initializes a new instance of PolicySku. </summary>
            <param name="name"> The name of the policy sku. Possible values are A0 and A1. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicySku.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of PolicySku. </summary>
            <param name="name"> The name of the policy sku. Possible values are A0 and A1. </param>
            <param name="tier"> The policy sku tier. Possible values are Free and Standard. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySku.Name">
            <summary> The name of the policy sku. Possible values are A0 and A1. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicySku.Tier">
            <summary> The policy sku tier. Possible values are Free and Standard. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PolicyType">
            <summary> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.#ctor(System.String)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.PolicyType"/> values are the same. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyType.NotSpecified">
            <summary> NotSpecified. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyType.BuiltIn">
            <summary> BuiltIn. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyType.Custom">
            <summary> Custom. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.PolicyType.Static">
            <summary> Static. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.op_Equality(Azure.ResourceManager.Resources.Models.PolicyType,Azure.ResourceManager.Resources.Models.PolicyType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.PolicyType"/> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.op_Inequality(Azure.ResourceManager.Resources.Models.PolicyType,Azure.ResourceManager.Resources.Models.PolicyType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.PolicyType"/> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.PolicyType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.PolicyType"/>. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.Equals(Azure.ResourceManager.Resources.Models.PolicyType)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.PolicyType.ToString">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.PropertyChangeType">
            <summary> The type of property change. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.PropertyChangeType.Create">
            <summary> The property does not exist in the current state but is present in the desired state. The property will be created when the deployment is executed. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.PropertyChangeType.Delete">
            <summary> The property exists in the current state and is missing from the desired state. It will be deleted when the deployment is executed. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.PropertyChangeType.Modify">
            <summary> The property exists in both current and desired state and is different. The value of the property will change when the deployment is executed. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.PropertyChangeType.Array">
            <summary> The property is an array and contains nested changes. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Provider">
            <summary> Resource provider information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Provider.#ctor">
            <summary> Initializes a new instance of Provider. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Provider.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ProviderResourceType})">
            <summary> Initializes a new instance of Provider. </summary>
            <param name="id"> The provider ID. </param>
            <param name="namespace"> The namespace of the resource provider. </param>
            <param name="registrationState"> The registration state of the resource provider. </param>
            <param name="registrationPolicy"> The registration policy of the resource provider. </param>
            <param name="resourceTypes"> The collection of provider resource types. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Provider.Id">
            <summary> The provider ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Provider.Namespace">
            <summary> The namespace of the resource provider. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Provider.RegistrationState">
            <summary> The registration state of the resource provider. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Provider.RegistrationPolicy">
            <summary> The registration policy of the resource provider. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Provider.ResourceTypes">
            <summary> The collection of provider resource types. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ProviderListResult">
            <summary> List of resource providers. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderListResult.#ctor">
            <summary> Initializes a new instance of ProviderListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.Provider},System.String)">
            <summary> Initializes a new instance of ProviderListResult. </summary>
            <param name="value"> An array of resource providers. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderListResult.Value">
            <summary> An array of resource providers. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ProviderResourceType">
            <summary> Resource type managed by the resource provider. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderResourceType.#ctor">
            <summary> Initializes a new instance of ProviderResourceType. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProviderResourceType.#ctor(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.Alias},System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary> Initializes a new instance of ProviderResourceType. </summary>
            <param name="resourceType"> The resource type. </param>
            <param name="locations"> The collection of locations where this resource type can be created. </param>
            <param name="aliases"> The aliases that are supported by this resource type. </param>
            <param name="apiVersions"> The API version. </param>
            <param name="capabilities"> The additional capabilities offered by this resource type. </param>
            <param name="properties"> The properties. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.ResourceType">
            <summary> The resource type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.Locations">
            <summary> The collection of locations where this resource type can be created. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.Aliases">
            <summary> The aliases that are supported by this resource type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.ApiVersions">
            <summary> The API version. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.Capabilities">
            <summary> The additional capabilities offered by this resource type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProviderResourceType.Properties">
            <summary> The properties. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ProvisioningOperation">
            <summary> The name of the current provisioning operation. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ProvisioningOperation.NotSpecified">
            <summary> The provisioning operation is not specified. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ProvisioningOperation.Create">
            <summary> The provisioning operation is create. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ProvisioningOperation.Delete">
            <summary> The provisioning operation is delete. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ProvisioningOperation.Waiting">
            <summary> The provisioning operation is waiting. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ProvisioningOperation.AzureAsyncOperationWaiting">
            <summary> The provisioning operation is waiting Azure async operation. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ProvisioningOperation.ResourceCacheWaiting">
            <summary> The provisioning operation is waiting for resource cache. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ProvisioningOperation.Action">
            <summary> The provisioning operation is action. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ProvisioningOperation.Read">
            <summary> The provisioning operation is read. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ProvisioningOperation.EvaluateDeploymentOutput">
            <summary> The provisioning operation is evaluate output. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ProvisioningOperation.DeploymentCleanup">
            <summary> The provisioning operation is cleanup. This operation is part of the &apos;complete&apos; mode deployment. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ProvisioningState">
            <summary> Provisioning status of the managed application. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProvisioningState.#ctor(System.String)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ProvisioningState"/> values are the same. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProvisioningState.Accepted">
            <summary> Accepted. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProvisioningState.Running">
            <summary> Running. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProvisioningState.Ready">
            <summary> Ready. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProvisioningState.Creating">
            <summary> Creating. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProvisioningState.Created">
            <summary> Created. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProvisioningState.Deleting">
            <summary> Deleting. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProvisioningState.Deleted">
            <summary> Deleted. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProvisioningState.Canceled">
            <summary> Canceled. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProvisioningState.Failed">
            <summary> Failed. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProvisioningState.Succeeded">
            <summary> Succeeded. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ProvisioningState.Updating">
            <summary> Updating. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProvisioningState.op_Equality(Azure.ResourceManager.Resources.Models.ProvisioningState,Azure.ResourceManager.Resources.Models.ProvisioningState)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ProvisioningState"/> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProvisioningState.op_Inequality(Azure.ResourceManager.Resources.Models.ProvisioningState,Azure.ResourceManager.Resources.Models.ProvisioningState)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ProvisioningState"/> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProvisioningState.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.ProvisioningState">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.ProvisioningState"/>. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProvisioningState.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProvisioningState.Equals(Azure.ResourceManager.Resources.Models.ProvisioningState)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProvisioningState.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ProvisioningState.ToString">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.RegionCategory">
            <summary> The category of the region. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.#ctor(System.String)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.RegionCategory"/> values are the same. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.RegionCategory.Recommended">
            <summary> Recommended. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.RegionCategory.Other">
            <summary> Other. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.op_Equality(Azure.ResourceManager.Resources.Models.RegionCategory,Azure.ResourceManager.Resources.Models.RegionCategory)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.RegionCategory"/> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.op_Inequality(Azure.ResourceManager.Resources.Models.RegionCategory,Azure.ResourceManager.Resources.Models.RegionCategory)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.RegionCategory"/> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.RegionCategory">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.RegionCategory"/>. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.Equals(Azure.ResourceManager.Resources.Models.RegionCategory)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionCategory.ToString">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.RegionType">
            <summary> The type of the region. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.#ctor(System.String)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.RegionType"/> values are the same. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.RegionType.Physical">
            <summary> Physical. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.RegionType.Logical">
            <summary> Logical. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.op_Equality(Azure.ResourceManager.Resources.Models.RegionType,Azure.ResourceManager.Resources.Models.RegionType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.RegionType"/> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.op_Inequality(Azure.ResourceManager.Resources.Models.RegionType,Azure.ResourceManager.Resources.Models.RegionType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.RegionType"/> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.RegionType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.RegionType"/>. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.Equals(Azure.ResourceManager.Resources.Models.RegionType)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.RegionType.ToString">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Resource">
            <summary> Specified resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Resource.#ctor">
            <summary> Initializes a new instance of Resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Resource.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary> Initializes a new instance of Resource. </summary>
            <param name="id"> Resource ID. </param>
            <param name="name"> Resource name. </param>
            <param name="type"> Resource type. </param>
            <param name="location"> Resource location. </param>
            <param name="tags"> Resource tags. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Resource.Id">
            <summary> Resource ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Resource.Name">
            <summary> Resource name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Resource.Type">
            <summary> Resource type. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Resource.Location">
            <summary> Resource location. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Resource.Tags">
            <summary> Resource tags. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceGroup">
            <summary> Resource group information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroup.#ctor(System.String)">
            <summary> Initializes a new instance of ResourceGroup. </summary>
            <param name="location"> The location of the resource group. It cannot be changed after the resource group has been created. It must be one of the supported Azure locations. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="location"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroup.#ctor(System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.ResourceGroupProperties,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary> Initializes a new instance of ResourceGroup. </summary>
            <param name="id"> The ID of the resource group. </param>
            <param name="name"> The name of the resource group. </param>
            <param name="type"> The type of the resource group. </param>
            <param name="properties"> The resource group properties. </param>
            <param name="location"> The location of the resource group. It cannot be changed after the resource group has been created. It must be one of the supported Azure locations. </param>
            <param name="managedBy"> The ID of the resource that manages this resource group. </param>
            <param name="tags"> The tags attached to the resource group. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroup.Id">
            <summary> The ID of the resource group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroup.Name">
            <summary> The name of the resource group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroup.Type">
            <summary> The type of the resource group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroup.Properties">
            <summary> The resource group properties. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroup.Location">
            <summary> The location of the resource group. It cannot be changed after the resource group has been created. It must be one of the supported Azure locations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroup.ManagedBy">
            <summary> The ID of the resource that manages this resource group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroup.Tags">
            <summary> The tags attached to the resource group. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceGroupExportResult">
            <summary> Resource group export result. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupExportResult.#ctor">
            <summary> Initializes a new instance of ResourceGroupExportResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupExportResult.#ctor(System.Object,Azure.ResourceManager.Resources.Models.ErrorResponse)">
            <summary> Initializes a new instance of ResourceGroupExportResult. </summary>
            <param name="template"> The template content. </param>
            <param name="error"> The template export error. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupExportResult.Template">
            <summary> The template content. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupExportResult.Error">
            <summary> The template export error. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceGroupFilter">
            <summary> Resource group filter. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupFilter.#ctor">
            <summary> Initializes a new instance of ResourceGroupFilter. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupFilter.TagName">
            <summary> The tag name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupFilter.TagValue">
            <summary> The tag value. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceGroupListResult">
            <summary> List of resource groups. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupListResult.#ctor">
            <summary> Initializes a new instance of ResourceGroupListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ResourceGroup},System.String)">
            <summary> Initializes a new instance of ResourceGroupListResult. </summary>
            <param name="value"> An array of resource groups. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupListResult.Value">
            <summary> An array of resource groups. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceGroupPatchable">
            <summary> Resource group information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupPatchable.#ctor">
            <summary> Initializes a new instance of ResourceGroupPatchable. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupPatchable.Name">
            <summary> The name of the resource group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupPatchable.Properties">
            <summary> The resource group properties. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupPatchable.ManagedBy">
            <summary> The ID of the resource that manages this resource group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupPatchable.Tags">
            <summary> The tags attached to the resource group. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceGroupProperties">
            <summary> The resource group properties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupProperties.#ctor">
            <summary> Initializes a new instance of ResourceGroupProperties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceGroupProperties.#ctor(System.String)">
            <summary> Initializes a new instance of ResourceGroupProperties. </summary>
            <param name="provisioningState"> The provisioning state. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceGroupProperties.ProvisioningState">
            <summary> The provisioning state. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceIdentityType">
            <summary> The identity type. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ResourceIdentityType.SystemAssigned">
            <summary> SystemAssigned. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ResourceIdentityType.None">
            <summary> None. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ResourceIdentityType.UserAssigned">
            <summary> UserAssigned. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.ResourceIdentityType.SystemAssignedUserAssigned">
            <summary> SystemAssigned, UserAssigned. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceLink">
            <summary> The resource link. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceLink.#ctor">
            <summary> Initializes a new instance of ResourceLink. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceLink.#ctor(System.String,System.String,System.Object,Azure.ResourceManager.Resources.Models.ResourceLinkProperties)">
            <summary> Initializes a new instance of ResourceLink. </summary>
            <param name="id"> The fully qualified ID of the resource link. </param>
            <param name="name"> The name of the resource link. </param>
            <param name="type"> The resource link object. </param>
            <param name="properties"> Properties for resource link. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceLink.Id">
            <summary> The fully qualified ID of the resource link. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceLink.Name">
            <summary> The name of the resource link. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceLink.Type">
            <summary> The resource link object. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceLink.Properties">
            <summary> Properties for resource link. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceLinkFilter">
            <summary> Resource link filter. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceLinkFilter.#ctor(System.String)">
            <summary> Initializes a new instance of ResourceLinkFilter. </summary>
            <param name="targetId"> The ID of the target resource. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="targetId"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceLinkFilter.TargetId">
            <summary> The ID of the target resource. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceLinkProperties">
            <summary> The resource link properties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceLinkProperties.#ctor(System.String)">
            <summary> Initializes a new instance of ResourceLinkProperties. </summary>
            <param name="targetId"> The fully qualified ID of the target resource in the link. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="targetId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceLinkProperties.#ctor(System.String,System.String,System.String)">
            <summary> Initializes a new instance of ResourceLinkProperties. </summary>
            <param name="sourceId"> The fully qualified ID of the source resource in the link. </param>
            <param name="targetId"> The fully qualified ID of the target resource in the link. </param>
            <param name="notes"> Notes about the resource link. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceLinkProperties.SourceId">
            <summary> The fully qualified ID of the source resource in the link. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceLinkProperties.TargetId">
            <summary> The fully qualified ID of the target resource in the link. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceLinkProperties.Notes">
            <summary> Notes about the resource link. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceLinkResult">
            <summary> List of resource links. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceLinkResult.#ctor(System.Collections.Generic.IEnumerable{Azure.ResourceManager.Resources.Models.ResourceLink})">
            <summary> Initializes a new instance of ResourceLinkResult. </summary>
            <param name="value"> An array of resource links. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceLinkResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ResourceLink},System.String)">
            <summary> Initializes a new instance of ResourceLinkResult. </summary>
            <param name="value"> An array of resource links. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceLinkResult.Value">
            <summary> An array of resource links. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceLinkResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceListResult">
            <summary> List of resource groups. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceListResult.#ctor">
            <summary> Initializes a new instance of ResourceListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.GenericResourceExpanded},System.String)">
            <summary> Initializes a new instance of ResourceListResult. </summary>
            <param name="value"> An array of resources. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceListResult.Value">
            <summary> An array of resources. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceProviderOperationDisplayProperties">
            <summary> Resource provider operation&apos;s display properties. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceProviderOperationDisplayProperties.#ctor">
            <summary> Initializes a new instance of ResourceProviderOperationDisplayProperties. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceProviderOperationDisplayProperties.Publisher">
            <summary> Operation description. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceProviderOperationDisplayProperties.Provider">
            <summary> Operation provider. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceProviderOperationDisplayProperties.Resource">
            <summary> Operation resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceProviderOperationDisplayProperties.Operation">
            <summary> Resource provider operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceProviderOperationDisplayProperties.Description">
            <summary> Operation description. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourceReference">
            <summary> The resource Id model. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceReference.#ctor">
            <summary> Initializes a new instance of ResourceReference. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourceReference.#ctor(System.String)">
            <summary> Initializes a new instance of ResourceReference. </summary>
            <param name="id"> The fully qualified resource Id. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourceReference.Id">
            <summary> The fully qualified resource Id. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ResourcesMoveInfo">
            <summary> Parameters of move resources. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ResourcesMoveInfo.#ctor">
            <summary> Initializes a new instance of ResourcesMoveInfo. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourcesMoveInfo.Resources">
            <summary> The IDs of the resources. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ResourcesMoveInfo.TargetResourceGroup">
            <summary> The target resource group. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ScopedDeployment">
            <summary> Deployment operation parameters. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScopedDeployment.#ctor(System.String,Azure.ResourceManager.Resources.Models.DeploymentProperties)">
            <summary> Initializes a new instance of ScopedDeployment. </summary>
            <param name="location"> The location to store the deployment data. </param>
            <param name="properties"> The deployment properties. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="location"/> or <paramref name="properties"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScopedDeployment.Location">
            <summary> The location to store the deployment data. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScopedDeployment.Properties">
            <summary> The deployment properties. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScopedDeployment.Tags">
            <summary> Deployment tags. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ScriptConfigurationBase">
            <summary> Common configuration settings for both Azure PowerShell and Azure CLI scripts. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptConfigurationBase.#ctor(System.TimeSpan)">
            <summary> Initializes a new instance of ScriptConfigurationBase. </summary>
            <param name="retentionInterval"> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptConfigurationBase.PrimaryScriptUri">
            <summary> Uri for the script. This is the entry point for the external script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptConfigurationBase.SupportingScriptUris">
            <summary> Supporting files for the external script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptConfigurationBase.ScriptContent">
            <summary> Script body. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptConfigurationBase.Arguments">
            <summary> Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &apos;West US 2&apos;. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptConfigurationBase.EnvironmentVariables">
            <summary> The environment variables to pass over to the script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptConfigurationBase.ForceUpdateTag">
            <summary> Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptConfigurationBase.RetentionInterval">
            <summary> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptConfigurationBase.Timeout">
            <summary> Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ScriptLog">
            <summary> Script execution log object. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptLog.#ctor">
            <summary> Initializes a new instance of ScriptLog. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptLog.#ctor(System.String,System.String,System.String,System.String)">
            <summary> Initializes a new instance of ScriptLog. </summary>
            <param name="id"> String Id used to locate any resource on Azure. </param>
            <param name="name"> Name of this resource. </param>
            <param name="type"> Type of this resource. </param>
            <param name="log"> Script execution logs in text format. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptLog.Log">
            <summary> Script execution logs in text format. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ScriptLogsList">
            <summary> Deployment script execution logs. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptLogsList.#ctor">
            <summary> Initializes a new instance of ScriptLogsList. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptLogsList.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ScriptLog})">
            <summary> Initializes a new instance of ScriptLogsList. </summary>
            <param name="value"> Deployment scripts logs. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptLogsList.Value">
            <summary> Deployment scripts logs. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ScriptProvisioningState">
            <summary> State of the script execution. This only appears in the response. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptProvisioningState.#ctor(System.String)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ScriptProvisioningState"/> values are the same. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptProvisioningState.Creating">
            <summary> Creating. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptProvisioningState.ProvisioningResources">
            <summary> ProvisioningResources. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptProvisioningState.Running">
            <summary> Running. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptProvisioningState.Succeeded">
            <summary> Succeeded. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptProvisioningState.Failed">
            <summary> Failed. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptProvisioningState.Canceled">
            <summary> Canceled. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptProvisioningState.op_Equality(Azure.ResourceManager.Resources.Models.ScriptProvisioningState,Azure.ResourceManager.Resources.Models.ScriptProvisioningState)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ScriptProvisioningState"/> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptProvisioningState.op_Inequality(Azure.ResourceManager.Resources.Models.ScriptProvisioningState,Azure.ResourceManager.Resources.Models.ScriptProvisioningState)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ScriptProvisioningState"/> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptProvisioningState.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.ScriptProvisioningState">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.ScriptProvisioningState"/>. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptProvisioningState.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptProvisioningState.Equals(Azure.ResourceManager.Resources.Models.ScriptProvisioningState)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptProvisioningState.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptProvisioningState.ToString">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ScriptStatus">
            <summary> Generic object modeling results of script execution. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptStatus.#ctor">
            <summary> Initializes a new instance of ScriptStatus. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptStatus.#ctor(System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},Azure.ResourceManager.Resources.Models.ErrorResponse)">
            <summary> Initializes a new instance of ScriptStatus. </summary>
            <param name="containerInstanceId"> ACI resource Id. </param>
            <param name="storageAccountId"> Storage account resource Id. </param>
            <param name="startTime"> Start time of the script execution. </param>
            <param name="endTime"> End time of the script execution. </param>
            <param name="expirationTime"> Time the deployment script resource will expire. </param>
            <param name="error"> Error that is relayed from the script execution. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptStatus.ContainerInstanceId">
            <summary> ACI resource Id. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptStatus.StorageAccountId">
            <summary> Storage account resource Id. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptStatus.StartTime">
            <summary> Start time of the script execution. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptStatus.EndTime">
            <summary> End time of the script execution. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptStatus.ExpirationTime">
            <summary> Time the deployment script resource will expire. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptStatus.Error">
            <summary> Error that is relayed from the script execution. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.ScriptType">
            <summary> Type of the script. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptType.#ctor(System.String)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ScriptType"/> values are the same. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptType.AzurePowerShell">
            <summary> AzurePowerShell. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.ScriptType.AzureCLI">
            <summary> AzureCLI. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptType.op_Equality(Azure.ResourceManager.Resources.Models.ScriptType,Azure.ResourceManager.Resources.Models.ScriptType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ScriptType"/> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptType.op_Inequality(Azure.ResourceManager.Resources.Models.ScriptType,Azure.ResourceManager.Resources.Models.ScriptType)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.ScriptType"/> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptType.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.ScriptType">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.ScriptType"/>. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptType.Equals(Azure.ResourceManager.Resources.Models.ScriptType)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.ScriptType.ToString">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Sku">
            <summary> SKU for the resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Sku.#ctor">
            <summary> Initializes a new instance of Sku. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Sku.#ctor(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary> Initializes a new instance of Sku. </summary>
            <param name="name"> The SKU name. </param>
            <param name="tier"> The SKU tier. </param>
            <param name="size"> The SKU size. </param>
            <param name="family"> The SKU family. </param>
            <param name="model"> The SKU model. </param>
            <param name="capacity"> The SKU capacity. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Sku.Name">
            <summary> The SKU name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Sku.Tier">
            <summary> The SKU tier. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Sku.Size">
            <summary> The SKU size. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Sku.Family">
            <summary> The SKU family. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Sku.Model">
            <summary> The SKU model. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Sku.Capacity">
            <summary> The SKU capacity. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.SkuAutoGenerated">
            <summary> SKU for the resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SkuAutoGenerated.#ctor(System.String)">
            <summary> Initializes a new instance of SkuAutoGenerated. </summary>
            <param name="name"> The SKU name. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SkuAutoGenerated.#ctor(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary> Initializes a new instance of SkuAutoGenerated. </summary>
            <param name="name"> The SKU name. </param>
            <param name="tier"> The SKU tier. </param>
            <param name="size"> The SKU size. </param>
            <param name="family"> The SKU family. </param>
            <param name="model"> The SKU model. </param>
            <param name="capacity"> The SKU capacity. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SkuAutoGenerated.Name">
            <summary> The SKU name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SkuAutoGenerated.Tier">
            <summary> The SKU tier. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SkuAutoGenerated.Size">
            <summary> The SKU size. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SkuAutoGenerated.Family">
            <summary> The SKU family. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SkuAutoGenerated.Model">
            <summary> The SKU model. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SkuAutoGenerated.Capacity">
            <summary> The SKU capacity. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.SpendingLimit">
            <summary> The subscription spending limit. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SpendingLimit.On">
            <summary> On. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SpendingLimit.Off">
            <summary> Off. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SpendingLimit.CurrentPeriodOff">
            <summary> CurrentPeriodOff. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.StorageAccountConfiguration">
            <summary> Settings to use an existing storage account. Valid storage account kinds are: Storage, StorageV2 and FileStorage. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.StorageAccountConfiguration.#ctor">
            <summary> Initializes a new instance of StorageAccountConfiguration. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.StorageAccountConfiguration.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of StorageAccountConfiguration. </summary>
            <param name="storageAccountName"> The storage account name. </param>
            <param name="storageAccountKey"> The storage account access key. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.StorageAccountConfiguration.StorageAccountName">
            <summary> The storage account name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.StorageAccountConfiguration.StorageAccountKey">
            <summary> The storage account access key. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.SubResource">
            <summary> Sub-resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SubResource.#ctor">
            <summary> Initializes a new instance of SubResource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SubResource.Id">
            <summary> Resource ID. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Subscription">
            <summary> Subscription information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Subscription.#ctor">
            <summary> Initializes a new instance of Subscription. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Subscription.#ctor(System.String,System.String,System.String,System.String,System.Nullable{Azure.ResourceManager.Resources.Models.SubscriptionState},Azure.ResourceManager.Resources.Models.SubscriptionPolicies,System.String,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.ManagedByTenant},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary> Initializes a new instance of Subscription. </summary>
            <param name="id"> The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000. </param>
            <param name="subscriptionId"> The subscription ID. </param>
            <param name="displayName"> The subscription display name. </param>
            <param name="tenantId"> The subscription tenant ID. </param>
            <param name="state"> The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted. </param>
            <param name="subscriptionPolicies"> The subscription policies. </param>
            <param name="authorizationSource"> The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management. For example, &apos;Legacy, RoleBased&apos;. </param>
            <param name="managedByTenants"> An array containing the tenants managing the subscription. </param>
            <param name="tags"> The tags attached to the subscription. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Subscription.Id">
            <summary> The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Subscription.SubscriptionId">
            <summary> The subscription ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Subscription.DisplayName">
            <summary> The subscription display name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Subscription.TenantId">
            <summary> The subscription tenant ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Subscription.State">
            <summary> The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Subscription.SubscriptionPolicies">
            <summary> The subscription policies. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Subscription.AuthorizationSource">
            <summary> The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management. For example, &apos;Legacy, RoleBased&apos;. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Subscription.ManagedByTenants">
            <summary> An array containing the tenants managing the subscription. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Subscription.Tags">
            <summary> The tags attached to the subscription. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.SubscriptionListResult">
            <summary> Subscription list operation response. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SubscriptionListResult.#ctor(System.String)">
            <summary> Initializes a new instance of SubscriptionListResult. </summary>
            <param name="nextLink"> The URL to get the next set of results. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SubscriptionListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.Subscription},System.String)">
            <summary> Initializes a new instance of SubscriptionListResult. </summary>
            <param name="value"> An array of subscriptions. </param>
            <param name="nextLink"> The URL to get the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SubscriptionListResult.Value">
            <summary> An array of subscriptions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SubscriptionListResult.NextLink">
            <summary> The URL to get the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.SubscriptionPolicies">
            <summary> Subscription policies. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SubscriptionPolicies.#ctor">
            <summary> Initializes a new instance of SubscriptionPolicies. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SubscriptionPolicies.#ctor(System.String,System.String,System.Nullable{Azure.ResourceManager.Resources.Models.SpendingLimit})">
            <summary> Initializes a new instance of SubscriptionPolicies. </summary>
            <param name="locationPlacementId"> The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a subscription with a location placement Id of Public_2014-09-01 has access to Azure public regions. </param>
            <param name="quotaId"> The subscription quota ID. </param>
            <param name="spendingLimit"> The subscription spending limit. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SubscriptionPolicies.LocationPlacementId">
            <summary> The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a subscription with a location placement Id of Public_2014-09-01 has access to Azure public regions. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SubscriptionPolicies.QuotaId">
            <summary> The subscription quota ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SubscriptionPolicies.SpendingLimit">
            <summary> The subscription spending limit. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.SubscriptionState">
            <summary> The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SubscriptionState.Enabled">
            <summary> Enabled. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SubscriptionState.Warned">
            <summary> Warned. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SubscriptionState.PastDue">
            <summary> PastDue. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SubscriptionState.Disabled">
            <summary> Disabled. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.SubscriptionState.Deleted">
            <summary> Deleted. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.SystemData">
            <summary> Metadata pertaining to creation and last modification of the resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SystemData.#ctor">
            <summary> Initializes a new instance of SystemData. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.SystemData.#ctor(System.String,System.Nullable{Azure.ResourceManager.Resources.Models.CreatedByType},System.Nullable{System.DateTimeOffset},System.String,System.Nullable{Azure.ResourceManager.Resources.Models.CreatedByType},System.Nullable{System.DateTimeOffset})">
            <summary> Initializes a new instance of SystemData. </summary>
            <param name="createdBy"> The identity that created the resource. </param>
            <param name="createdByType"> The type of identity that created the resource. </param>
            <param name="createdAt"> The timestamp of resource creation (UTC). </param>
            <param name="lastModifiedBy"> The identity that last modified the resource. </param>
            <param name="lastModifiedByType"> The type of identity that last modified the resource. </param>
            <param name="lastModifiedAt"> The type of identity that last modified the resource. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SystemData.CreatedBy">
            <summary> The identity that created the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SystemData.CreatedByType">
            <summary> The type of identity that created the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SystemData.CreatedAt">
            <summary> The timestamp of resource creation (UTC). </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SystemData.LastModifiedBy">
            <summary> The identity that last modified the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SystemData.LastModifiedByType">
            <summary> The type of identity that last modified the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.SystemData.LastModifiedAt">
            <summary> The type of identity that last modified the resource. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TagCount">
            <summary> Tag count. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagCount.#ctor">
            <summary> Initializes a new instance of TagCount. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagCount.#ctor(System.String,System.Nullable{System.Int32})">
            <summary> Initializes a new instance of TagCount. </summary>
            <param name="type"> Type of count. </param>
            <param name="value"> Value of count. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagCount.Type">
            <summary> Type of count. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagCount.Value">
            <summary> Value of count. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TagDetails">
            <summary> Tag details. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagDetails.#ctor">
            <summary> Initializes a new instance of TagDetails. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagDetails.#ctor(System.String,System.String,Azure.ResourceManager.Resources.Models.TagCount,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.TagValue})">
            <summary> Initializes a new instance of TagDetails. </summary>
            <param name="id"> The tag name ID. </param>
            <param name="tagName"> The tag name. </param>
            <param name="count"> The total number of resources that use the resource tag. When a tag is initially created and has no associated resources, the value is 0. </param>
            <param name="values"> The list of tag values. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagDetails.Id">
            <summary> The tag name ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagDetails.TagName">
            <summary> The tag name. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagDetails.Count">
            <summary> The total number of resources that use the resource tag. When a tag is initially created and has no associated resources, the value is 0. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagDetails.Values">
            <summary> The list of tag values. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.Tags">
            <summary> A dictionary of name and value pairs. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Tags.#ctor">
            <summary> Initializes a new instance of Tags. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.Tags.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary> Initializes a new instance of Tags. </summary>
            <param name="tagsValue"> Dictionary of &lt;string&gt;. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.Tags.TagsValue">
            <summary> Dictionary of &lt;string&gt;. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TagsListResult">
            <summary> List of subscription tags. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagsListResult.#ctor">
            <summary> Initializes a new instance of TagsListResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagsListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.TagDetails},System.String)">
            <summary> Initializes a new instance of TagsListResult. </summary>
            <param name="value"> An array of tags. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagsListResult.Value">
            <summary> An array of tags. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagsListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TagsPatchResource">
            <summary> Wrapper resource for tags patch API request only. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagsPatchResource.#ctor">
            <summary> Initializes a new instance of TagsPatchResource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagsPatchResource.Operation">
            <summary> The operation type for the patch API. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagsPatchResource.Properties">
            <summary> The set of tags. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation">
            <summary> The operation type for the patch API. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation.#ctor(System.String)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation"/> values are the same. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation.Replace">
            <summary> Replace. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation.Merge">
            <summary> Merge. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation.Delete">
            <summary> Delete. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation.op_Equality(Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation,Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation"/> values are the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation.op_Inequality(Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation,Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation)">
            <summary> Determines if two <see cref="T:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation"/> values are not the same. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation.op_Implicit(System.String)~Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation">
            <summary> Converts a string to a <see cref="T:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation"/>. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation.Equals(Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagsPatchResourceOperation.ToString">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TagsResource">
            <summary> Wrapper resource for tags API requests and responses. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagsResource.#ctor(Azure.ResourceManager.Resources.Models.Tags)">
            <summary> Initializes a new instance of TagsResource. </summary>
            <param name="properties"> The set of tags. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="properties"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagsResource.#ctor(System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.Tags)">
            <summary> Initializes a new instance of TagsResource. </summary>
            <param name="id"> The ID of the tags wrapper resource. </param>
            <param name="name"> The name of the tags wrapper resource. </param>
            <param name="type"> The type of the tags wrapper resource. </param>
            <param name="properties"> The set of tags. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagsResource.Id">
            <summary> The ID of the tags wrapper resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagsResource.Name">
            <summary> The name of the tags wrapper resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagsResource.Type">
            <summary> The type of the tags wrapper resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagsResource.Properties">
            <summary> The set of tags. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TagValue">
            <summary> Tag information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagValue.#ctor">
            <summary> Initializes a new instance of TagValue. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TagValue.#ctor(System.String,System.String,Azure.ResourceManager.Resources.Models.TagCount)">
            <summary> Initializes a new instance of TagValue. </summary>
            <param name="id"> The tag value ID. </param>
            <param name="tagValueValue"> The tag value. </param>
            <param name="count"> The tag value count. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagValue.Id">
            <summary> The tag value ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagValue.TagValueValue">
            <summary> The tag value. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TagValue.Count">
            <summary> The tag value count. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TargetResource">
            <summary> Target resource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TargetResource.#ctor">
            <summary> Initializes a new instance of TargetResource. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TargetResource.#ctor(System.String,System.String,System.String)">
            <summary> Initializes a new instance of TargetResource. </summary>
            <param name="id"> The ID of the resource. </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="resourceType"> The type of the resource. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TargetResource.Id">
            <summary> The ID of the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TargetResource.ResourceName">
            <summary> The name of the resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TargetResource.ResourceType">
            <summary> The type of the resource. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TemplateHashResult">
            <summary> Result of the request to calculate template hash. It contains a string of minified template and its hash. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TemplateHashResult.#ctor">
            <summary> Initializes a new instance of TemplateHashResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TemplateHashResult.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of TemplateHashResult. </summary>
            <param name="minifiedTemplate"> The minified template string. </param>
            <param name="templateHash"> The template hash. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TemplateHashResult.MinifiedTemplate">
            <summary> The minified template string. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TemplateHashResult.TemplateHash">
            <summary> The template hash. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TemplateLink">
            <summary> Entity representing the reference to the template. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TemplateLink.#ctor(System.String)">
            <summary> Initializes a new instance of TemplateLink. </summary>
            <param name="uri"> The URI of the template to deploy. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="uri"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TemplateLink.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of TemplateLink. </summary>
            <param name="uri"> The URI of the template to deploy. </param>
            <param name="contentVersion"> If included, must match the ContentVersion in the template. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TemplateLink.Uri">
            <summary> The URI of the template to deploy. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TemplateLink.ContentVersion">
            <summary> If included, must match the ContentVersion in the template. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TenantCategory">
            <summary> Category of the tenant. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.TenantCategory.Home">
            <summary> Home. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.TenantCategory.ProjectedBy">
            <summary> ProjectedBy. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.TenantCategory.ManagedBy">
            <summary> ManagedBy. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TenantIdDescription">
            <summary> Tenant Id information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TenantIdDescription.#ctor">
            <summary> Initializes a new instance of TenantIdDescription. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TenantIdDescription.#ctor(System.String,System.String,System.Nullable{Azure.ResourceManager.Resources.Models.TenantCategory},System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary> Initializes a new instance of TenantIdDescription. </summary>
            <param name="id"> The fully qualified ID of the tenant. For example, /tenants/00000000-0000-0000-0000-000000000000. </param>
            <param name="tenantId"> The tenant ID. For example, 00000000-0000-0000-0000-000000000000. </param>
            <param name="tenantCategory"> Category of the tenant. </param>
            <param name="country"> Country/region name of the address for the tenant. </param>
            <param name="countryCode"> Country/region abbreviation for the tenant. </param>
            <param name="displayName"> The display name of the tenant. </param>
            <param name="domains"> The list of domains for the tenant. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantIdDescription.Id">
            <summary> The fully qualified ID of the tenant. For example, /tenants/00000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantIdDescription.TenantId">
            <summary> The tenant ID. For example, 00000000-0000-0000-0000-000000000000. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantIdDescription.TenantCategory">
            <summary> Category of the tenant. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantIdDescription.Country">
            <summary> Country/region name of the address for the tenant. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantIdDescription.CountryCode">
            <summary> Country/region abbreviation for the tenant. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantIdDescription.DisplayName">
            <summary> The display name of the tenant. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantIdDescription.Domains">
            <summary> The list of domains for the tenant. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.TenantListResult">
            <summary> Tenant Ids information. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TenantListResult.#ctor(System.String)">
            <summary> Initializes a new instance of TenantListResult. </summary>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.TenantListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.TenantIdDescription},System.String)">
            <summary> Initializes a new instance of TenantListResult. </summary>
            <param name="value"> An array of tenants. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantListResult.Value">
            <summary> An array of tenants. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.TenantListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.UserAssignedIdentity">
            <summary> User-assigned managed identity. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.UserAssignedIdentity.#ctor">
            <summary> Initializes a new instance of UserAssignedIdentity. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.UserAssignedIdentity.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of UserAssignedIdentity. </summary>
            <param name="principalId"> Azure Active Directory principal ID associated with this identity. </param>
            <param name="clientId"> Client App Id associated with this identity. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.UserAssignedIdentity.PrincipalId">
            <summary> Azure Active Directory principal ID associated with this identity. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.UserAssignedIdentity.ClientId">
            <summary> Client App Id associated with this identity. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.WhatIfChange">
            <summary> Information about a single resource change predicted by What-If operation. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.WhatIfChange.#ctor(System.String,Azure.ResourceManager.Resources.Models.ChangeType)">
            <summary> Initializes a new instance of WhatIfChange. </summary>
            <param name="resourceId"> Resource ID. </param>
            <param name="changeType"> Type of change that will be made to the resource when the deployment is executed. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.WhatIfChange.#ctor(System.String,Azure.ResourceManager.Resources.Models.ChangeType,System.Object,System.Object,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.WhatIfPropertyChange})">
            <summary> Initializes a new instance of WhatIfChange. </summary>
            <param name="resourceId"> Resource ID. </param>
            <param name="changeType"> Type of change that will be made to the resource when the deployment is executed. </param>
            <param name="before"> The snapshot of the resource before the deployment is executed. </param>
            <param name="after"> The predicted snapshot of the resource after the deployment is executed. </param>
            <param name="delta"> The predicted changes to resource properties. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.WhatIfChange.ResourceId">
            <summary> Resource ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.WhatIfChange.ChangeType">
            <summary> Type of change that will be made to the resource when the deployment is executed. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.WhatIfChange.Before">
            <summary> The snapshot of the resource before the deployment is executed. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.WhatIfChange.After">
            <summary> The predicted snapshot of the resource after the deployment is executed. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.WhatIfChange.Delta">
            <summary> The predicted changes to resource properties. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.WhatIfOperationResult">
            <summary> Result of the What-If operation. Contains a list of predicted changes and a URL link to get to the next set of results. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.WhatIfOperationResult.#ctor">
            <summary> Initializes a new instance of WhatIfOperationResult. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.WhatIfOperationResult.#ctor(System.String,Azure.ResourceManager.Resources.Models.ErrorResponse,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.WhatIfChange})">
            <summary> Initializes a new instance of WhatIfOperationResult. </summary>
            <param name="status"> Status of the What-If operation. </param>
            <param name="error"> Error when What-If operation fails. </param>
            <param name="changes"> List of resource changes predicted by What-If operation. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.WhatIfOperationResult.Status">
            <summary> Status of the What-If operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.WhatIfOperationResult.Error">
            <summary> Error when What-If operation fails. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.WhatIfOperationResult.Changes">
            <summary> List of resource changes predicted by What-If operation. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.WhatIfPropertyChange">
            <summary> The predicted change to the resource property. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.WhatIfPropertyChange.#ctor(System.String,Azure.ResourceManager.Resources.Models.PropertyChangeType)">
            <summary> Initializes a new instance of WhatIfPropertyChange. </summary>
            <param name="path"> The path of the property. </param>
            <param name="propertyChangeType"> The type of property change. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Models.WhatIfPropertyChange.#ctor(System.String,Azure.ResourceManager.Resources.Models.PropertyChangeType,System.Object,System.Object,System.Collections.Generic.IReadOnlyList{Azure.ResourceManager.Resources.Models.WhatIfPropertyChange})">
            <summary> Initializes a new instance of WhatIfPropertyChange. </summary>
            <param name="path"> The path of the property. </param>
            <param name="propertyChangeType"> The type of property change. </param>
            <param name="before"> The value of the property before the deployment is executed. </param>
            <param name="after"> The value of the property after the deployment is executed. </param>
            <param name="children"> Nested property changes. </param>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.WhatIfPropertyChange.Path">
            <summary> The path of the property. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.WhatIfPropertyChange.PropertyChangeType">
            <summary> The type of property change. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.WhatIfPropertyChange.Before">
            <summary> The value of the property before the deployment is executed. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.WhatIfPropertyChange.After">
            <summary> The value of the property after the deployment is executed. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.Models.WhatIfPropertyChange.Children">
            <summary> Nested property changes. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Models.WhatIfResultFormat">
            <summary> The format of the What-If results. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.WhatIfResultFormat.ResourceIdOnly">
            <summary> ResourceIdOnly. </summary>
        </member>
        <member name="F:Azure.ResourceManager.Resources.Models.WhatIfResultFormat.FullResourcePayloads">
            <summary> FullResourcePayloads. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateByIdOperation">
            <summary> Creates a new managed application definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateByIdOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateByIdOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateByIdOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateByIdOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateByIdOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateByIdOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateByIdOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateByIdOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateByIdOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateOperation">
            <summary> Creates a new managed application definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsCreateOrUpdateOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteByIdOperation">
            <summary> Deletes the managed application definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteByIdOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteByIdOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteByIdOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteByIdOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteByIdOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteByIdOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteByIdOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteByIdOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteByIdOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteOperation">
            <summary> Deletes the managed application definition. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsDeleteOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations">
            <summary> The ApplicationDefinitions service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.#ctor">
            <summary> Initializes a new instance of ApplicationDefinitionsOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of ApplicationDefinitionsOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application definition. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationDefinitionName"> The name of the managed application definition. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application definition. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationDefinitionName"> The name of the managed application definition. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.GetByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application definition. </summary>
            <param name="applicationDefinitionId"> The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.GetById(System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application definition. </summary>
            <param name="applicationDefinitionId"> The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.ListByResourceGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary> Lists the managed application definitions in a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.ListByResourceGroup(System.String,System.Threading.CancellationToken)">
            <summary> Lists the managed application definitions in a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.StartDeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application definition. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationDefinitionName"> The name of the managed application definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="applicationDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.StartDelete(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application definition. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationDefinitionName"> The name of the managed application definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="applicationDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.StartCreateOrUpdateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ApplicationDefinition,System.Threading.CancellationToken)">
            <summary> Creates a new managed application definition. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationDefinitionName"> The name of the managed application definition. </param>
            <param name="parameters"> Parameters supplied to the create or update an managed application definition. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="applicationDefinitionName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.StartCreateOrUpdate(System.String,System.String,Azure.ResourceManager.Resources.Models.ApplicationDefinition,System.Threading.CancellationToken)">
            <summary> Creates a new managed application definition. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationDefinitionName"> The name of the managed application definition. </param>
            <param name="parameters"> Parameters supplied to the create or update an managed application definition. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="applicationDefinitionName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.StartDeleteByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application definition. </summary>
            <param name="applicationDefinitionId"> The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationDefinitionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.StartDeleteById(System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application definition. </summary>
            <param name="applicationDefinitionId"> The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationDefinitionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.StartCreateOrUpdateByIdAsync(System.String,Azure.ResourceManager.Resources.Models.ApplicationDefinition,System.Threading.CancellationToken)">
            <summary> Creates a new managed application definition. </summary>
            <param name="applicationDefinitionId"> The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}. </param>
            <param name="parameters"> Parameters supplied to the create or update a managed application definition. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationDefinitionId"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsOperations.StartCreateOrUpdateById(System.String,Azure.ResourceManager.Resources.Models.ApplicationDefinition,System.Threading.CancellationToken)">
            <summary> Creates a new managed application definition. </summary>
            <param name="applicationDefinitionId"> The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}. </param>
            <param name="parameters"> Parameters supplied to the create or update a managed application definition. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationDefinitionId"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of ApplicationDefinitionsRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application definition. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationDefinitionName"> The name of the managed application definition. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="applicationDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application definition. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationDefinitionName"> The name of the managed application definition. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="applicationDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application definition. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationDefinitionName"> The name of the managed application definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="applicationDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.Delete(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application definition. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationDefinitionName"> The name of the managed application definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="applicationDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.CreateOrUpdateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ApplicationDefinition,System.Threading.CancellationToken)">
            <summary> Creates a new managed application definition. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationDefinitionName"> The name of the managed application definition. </param>
            <param name="parameters"> Parameters supplied to the create or update an managed application definition. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="applicationDefinitionName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.CreateOrUpdate(System.String,System.String,Azure.ResourceManager.Resources.Models.ApplicationDefinition,System.Threading.CancellationToken)">
            <summary> Creates a new managed application definition. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationDefinitionName"> The name of the managed application definition. </param>
            <param name="parameters"> Parameters supplied to the create or update an managed application definition. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="applicationDefinitionName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.ListByResourceGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary> Lists the managed application definitions in a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.ListByResourceGroup(System.String,System.Threading.CancellationToken)">
            <summary> Lists the managed application definitions in a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.GetByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application definition. </summary>
            <param name="applicationDefinitionId"> The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationDefinitionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.GetById(System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application definition. </summary>
            <param name="applicationDefinitionId"> The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationDefinitionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.DeleteByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application definition. </summary>
            <param name="applicationDefinitionId"> The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationDefinitionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.DeleteById(System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application definition. </summary>
            <param name="applicationDefinitionId"> The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationDefinitionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.CreateOrUpdateByIdAsync(System.String,Azure.ResourceManager.Resources.Models.ApplicationDefinition,System.Threading.CancellationToken)">
            <summary> Creates a new managed application definition. </summary>
            <param name="applicationDefinitionId"> The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}. </param>
            <param name="parameters"> Parameters supplied to the create or update a managed application definition. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationDefinitionId"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.CreateOrUpdateById(System.String,Azure.ResourceManager.Resources.Models.ApplicationDefinition,System.Threading.CancellationToken)">
            <summary> Creates a new managed application definition. </summary>
            <param name="applicationDefinitionId"> The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}. </param>
            <param name="parameters"> Parameters supplied to the create or update a managed application definition. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationDefinitionId"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.ListByResourceGroupNextPageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Lists the managed application definitions in a resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationDefinitionsRestOperations.ListByResourceGroupNextPage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Lists the managed application definitions in a resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateByIdOperation">
            <summary> Creates a new managed application. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateByIdOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateByIdOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateByIdOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateByIdOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateByIdOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateByIdOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateByIdOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateByIdOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateByIdOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateOperation">
            <summary> Creates a new managed application. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsCreateOrUpdateOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ApplicationsDeleteByIdOperation">
            <summary> Deletes the managed application. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsDeleteByIdOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsDeleteByIdOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsDeleteByIdOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsDeleteByIdOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsDeleteByIdOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsDeleteByIdOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsDeleteByIdOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsDeleteByIdOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsDeleteByIdOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ApplicationsDeleteOperation">
            <summary> Deletes the managed application. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsDeleteOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsDeleteOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsDeleteOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ApplicationsDeleteOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsDeleteOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsDeleteOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsDeleteOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsDeleteOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsDeleteOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ApplicationsOperations">
            <summary> The Applications service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.#ctor">
            <summary> Initializes a new instance of ApplicationsOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of ApplicationsOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.UpdateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Updates an existing managed application. The only value that can be updated via PATCH currently is the tags. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="parameters"> Parameters supplied to update an existing managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.Update(System.String,System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Updates an existing managed application. The only value that can be updated via PATCH currently is the tags. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="parameters"> Parameters supplied to update an existing managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.GetByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.GetById(System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.UpdateByIdAsync(System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Updates an existing managed application. The only value that can be updated via PATCH currently is the tags. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="parameters"> Parameters supplied to update an existing managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.UpdateById(System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Updates an existing managed application. The only value that can be updated via PATCH currently is the tags. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="parameters"> Parameters supplied to update an existing managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.ListByResourceGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the applications within a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.ListByResourceGroup(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the applications within a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.ListBySubscriptionAsync(System.Threading.CancellationToken)">
            <summary> Gets all the applications within a subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.ListBySubscription(System.Threading.CancellationToken)">
            <summary> Gets all the applications within a subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.StartDeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="applicationName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.StartDelete(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="applicationName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.StartCreateOrUpdateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Creates a new managed application. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="parameters"> Parameters supplied to the create or update a managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="applicationName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.StartCreateOrUpdate(System.String,System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Creates a new managed application. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="parameters"> Parameters supplied to the create or update a managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="applicationName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.StartDeleteByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.StartDeleteById(System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.StartCreateOrUpdateByIdAsync(System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Creates a new managed application. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="parameters"> Parameters supplied to the create or update a managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationId"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsOperations.StartCreateOrUpdateById(System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Creates a new managed application. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="parameters"> Parameters supplied to the create or update a managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationId"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of ApplicationsRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="applicationName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="applicationName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="applicationName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.Delete(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="applicationName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.CreateOrUpdateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Creates a new managed application. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="parameters"> Parameters supplied to the create or update a managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="applicationName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.CreateOrUpdate(System.String,System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Creates a new managed application. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="parameters"> Parameters supplied to the create or update a managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="applicationName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.UpdateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Updates an existing managed application. The only value that can be updated via PATCH currently is the tags. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="parameters"> Parameters supplied to update an existing managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="applicationName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.Update(System.String,System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Updates an existing managed application. The only value that can be updated via PATCH currently is the tags. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="applicationName"> The name of the managed application. </param>
            <param name="parameters"> Parameters supplied to update an existing managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="applicationName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.ListByResourceGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the applications within a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.ListByResourceGroup(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the applications within a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.ListBySubscriptionAsync(System.Threading.CancellationToken)">
            <summary> Gets all the applications within a subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.ListBySubscription(System.Threading.CancellationToken)">
            <summary> Gets all the applications within a subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.GetByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.GetById(System.String,System.Threading.CancellationToken)">
            <summary> Gets the managed application. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.DeleteByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.DeleteById(System.String,System.Threading.CancellationToken)">
            <summary> Deletes the managed application. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.CreateOrUpdateByIdAsync(System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Creates a new managed application. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="parameters"> Parameters supplied to the create or update a managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationId"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.CreateOrUpdateById(System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Creates a new managed application. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="parameters"> Parameters supplied to the create or update a managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationId"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.UpdateByIdAsync(System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Updates an existing managed application. The only value that can be updated via PATCH currently is the tags. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="parameters"> Parameters supplied to update an existing managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.UpdateById(System.String,Azure.ResourceManager.Resources.Models.Application,System.Threading.CancellationToken)">
            <summary> Updates an existing managed application. The only value that can be updated via PATCH currently is the tags. </summary>
            <param name="applicationId"> The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}. </param>
            <param name="parameters"> Parameters supplied to update an existing managed application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.ListByResourceGroupNextPageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the applications within a resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.ListByResourceGroupNextPage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the applications within a resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.ListBySubscriptionNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the applications within a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ApplicationsRestOperations.ListBySubscriptionNextPage(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the applications within a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.AuthorizationOperations">
            <summary> The Authorization service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.AuthorizationOperations.#ctor">
            <summary> Initializes a new instance of AuthorizationOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.AuthorizationOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.Uri)">
            <summary> Initializes a new instance of AuthorizationOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.AuthorizationOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Authorization REST API operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.AuthorizationOperations.List(System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Authorization REST API operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.AuthorizationRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.Uri)">
            <summary> Initializes a new instance of AuthorizationRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.AuthorizationRestOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Authorization REST API operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.AuthorizationRestOperations.List(System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Authorization REST API operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.AuthorizationRestOperations.ListNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Authorization REST API operations. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.AuthorizationRestOperations.ListNextPage(System.String,System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Authorization REST API operations. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentOperations">
            <summary> The Deployment service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.#ctor">
            <summary> Initializes a new instance of DeploymentOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of DeploymentOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.GetAtScopeAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.GetAtScope(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.GetAtTenantScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.GetAtTenantScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.GetAtManagementGroupScopeAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.GetAtManagementGroupScope(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.GetAtSubscriptionScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.GetAtSubscriptionScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.GetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.Get(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.ListAtScopeAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.ListAtScope(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.ListAtTenantScopeAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.ListAtTenantScope(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.ListAtManagementGroupScopeAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.ListAtManagementGroupScope(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.ListAtSubscriptionScopeAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.ListAtSubscriptionScope(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.ListAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentOperations.List(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of DeploymentRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.GetAtScopeAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/>, <paramref name="deploymentName"/>, or <paramref name="operationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.GetAtScope(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/>, <paramref name="deploymentName"/>, or <paramref name="operationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtScopeAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtScope(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.GetAtTenantScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="operationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.GetAtTenantScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="operationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtTenantScopeAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtTenantScope(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.GetAtManagementGroupScopeAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentName"/>, or <paramref name="operationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.GetAtManagementGroupScope(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentName"/>, or <paramref name="operationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtManagementGroupScopeAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtManagementGroupScope(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.GetAtSubscriptionScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="operationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.GetAtSubscriptionScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="operationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtSubscriptionScopeAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtSubscriptionScope(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.GetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="deploymentName"/>, or <paramref name="operationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.Get(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployments operation. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="operationId"> The ID of the operation to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="deploymentName"/>, or <paramref name="operationId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.List(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtScopeNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="scope"/>, or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtScopeNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="scope"/>, or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtTenantScopeNextPageAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtTenantScopeNextPage(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtManagementGroupScopeNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="groupId"/>, or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtManagementGroupScopeNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="groupId"/>, or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtSubscriptionScopeNextPageAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListAtSubscriptionScopeNextPage(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentRestOperations.ListNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all deployments operations for a deployment. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="top"> The number of results to return. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtManagementGroupScopeOperation">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtManagementGroupScopeOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtManagementGroupScopeOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtManagementGroupScopeOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtManagementGroupScopeOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtManagementGroupScopeOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtManagementGroupScopeOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtManagementGroupScopeOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtManagementGroupScopeOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtManagementGroupScopeOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtScopeOperation">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtScopeOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtScopeOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtScopeOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtScopeOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtScopeOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtScopeOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtScopeOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtScopeOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtScopeOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtSubscriptionScopeOperation">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtSubscriptionScopeOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtSubscriptionScopeOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtSubscriptionScopeOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtSubscriptionScopeOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtSubscriptionScopeOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtSubscriptionScopeOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtSubscriptionScopeOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtSubscriptionScopeOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtSubscriptionScopeOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtTenantScopeOperation">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtTenantScopeOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtTenantScopeOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtTenantScopeOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtTenantScopeOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtTenantScopeOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtTenantScopeOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtTenantScopeOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtTenantScopeOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateAtTenantScopeOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateOperation">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsCreateOrUpdateOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentScriptsCreateOperation">
            <summary> Creates a deployment script. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentScriptsCreateOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentScriptsCreateOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentScriptsCreateOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentScriptsCreateOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsCreateOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsCreateOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsCreateOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsCreateOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsCreateOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentScriptsOperations">
            <summary> The DeploymentScripts service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.#ctor">
            <summary> Initializes a new instance of DeploymentScriptsOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of DeploymentScriptsOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.UpdateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.DeploymentScriptUpdateParameter,System.Threading.CancellationToken)">
            <summary> Updates deployment script tags with specified values. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="deploymentScript"> Deployment script resource with the tags to be updated. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.Update(System.String,System.String,Azure.ResourceManager.Resources.Models.DeploymentScriptUpdateParameter,System.Threading.CancellationToken)">
            <summary> Updates deployment script tags with specified values. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="deploymentScript"> Deployment script resource with the tags to be updated. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment script with a given name. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment script with a given name. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a deployment script. When operation completes, status code 200 returned without content. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.Delete(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a deployment script. When operation completes, status code 200 returned without content. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.GetLogsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets deployment script logs for a given deployment script name. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.GetLogs(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets deployment script logs for a given deployment script name. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.GetLogsDefaultAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets deployment script logs for a given deployment script name. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="tail"> The number of lines to show from the tail of the deployment script log. Valid value is a positive number up to 1000. If &apos;tail&apos; is not provided, all available logs are shown up to container instance log capacity of 4mb. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.GetLogsDefault(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets deployment script logs for a given deployment script name. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="tail"> The number of lines to show from the tail of the deployment script log. Valid value is a positive number up to 1000. If &apos;tail&apos; is not provided, all available logs are shown up to container instance log capacity of 4mb. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.ListBySubscriptionAsync(System.Threading.CancellationToken)">
            <summary> Lists all deployment scripts for a given subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.ListBySubscription(System.Threading.CancellationToken)">
            <summary> Lists all deployment scripts for a given subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.ListByResourceGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary> Lists deployments scripts. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.ListByResourceGroup(System.String,System.Threading.CancellationToken)">
            <summary> Lists deployments scripts. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.StartCreateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.DeploymentScript,System.Threading.CancellationToken)">
            <summary> Creates a deployment script. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="deploymentScript"> Deployment script supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="scriptName"/>, or <paramref name="deploymentScript"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsOperations.StartCreate(System.String,System.String,Azure.ResourceManager.Resources.Models.DeploymentScript,System.Threading.CancellationToken)">
            <summary> Creates a deployment script. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="deploymentScript"> Deployment script supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="scriptName"/>, or <paramref name="deploymentScript"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of DeploymentScriptsRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.CreateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.DeploymentScript,System.Threading.CancellationToken)">
            <summary> Creates a deployment script. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="deploymentScript"> Deployment script supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="scriptName"/>, or <paramref name="deploymentScript"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.Create(System.String,System.String,Azure.ResourceManager.Resources.Models.DeploymentScript,System.Threading.CancellationToken)">
            <summary> Creates a deployment script. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="deploymentScript"> Deployment script supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="scriptName"/>, or <paramref name="deploymentScript"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.UpdateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.DeploymentScriptUpdateParameter,System.Threading.CancellationToken)">
            <summary> Updates deployment script tags with specified values. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="deploymentScript"> Deployment script resource with the tags to be updated. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="scriptName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.Update(System.String,System.String,Azure.ResourceManager.Resources.Models.DeploymentScriptUpdateParameter,System.Threading.CancellationToken)">
            <summary> Updates deployment script tags with specified values. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="deploymentScript"> Deployment script resource with the tags to be updated. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="scriptName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment script with a given name. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="scriptName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment script with a given name. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="scriptName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a deployment script. When operation completes, status code 200 returned without content. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="scriptName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.Delete(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a deployment script. When operation completes, status code 200 returned without content. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="scriptName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.ListBySubscriptionAsync(System.Threading.CancellationToken)">
            <summary> Lists all deployment scripts for a given subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.ListBySubscription(System.Threading.CancellationToken)">
            <summary> Lists all deployment scripts for a given subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.GetLogsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets deployment script logs for a given deployment script name. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="scriptName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.GetLogs(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets deployment script logs for a given deployment script name. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="scriptName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.GetLogsDefaultAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets deployment script logs for a given deployment script name. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="tail"> The number of lines to show from the tail of the deployment script log. Valid value is a positive number up to 1000. If &apos;tail&apos; is not provided, all available logs are shown up to container instance log capacity of 4mb. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="scriptName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.GetLogsDefault(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets deployment script logs for a given deployment script name. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="scriptName"> Name of the deployment script. </param>
            <param name="tail"> The number of lines to show from the tail of the deployment script log. Valid value is a positive number up to 1000. If &apos;tail&apos; is not provided, all available logs are shown up to container instance log capacity of 4mb. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="scriptName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.ListByResourceGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary> Lists deployments scripts. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.ListByResourceGroup(System.String,System.Threading.CancellationToken)">
            <summary> Lists deployments scripts. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.ListBySubscriptionNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> Lists all deployment scripts for a given subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.ListBySubscriptionNextPage(System.String,System.Threading.CancellationToken)">
            <summary> Lists all deployment scripts for a given subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.ListByResourceGroupNextPageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Lists deployments scripts. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentScriptsRestOperations.ListByResourceGroupNextPage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Lists deployments scripts. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsDeleteAtManagementGroupScopeOperation">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtManagementGroupScopeOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtManagementGroupScopeOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtManagementGroupScopeOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtManagementGroupScopeOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtManagementGroupScopeOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtManagementGroupScopeOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtManagementGroupScopeOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtManagementGroupScopeOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtManagementGroupScopeOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsDeleteAtScopeOperation">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtScopeOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtScopeOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtScopeOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtScopeOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtScopeOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtScopeOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtScopeOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtScopeOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtScopeOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsDeleteAtSubscriptionScopeOperation">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtSubscriptionScopeOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtSubscriptionScopeOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtSubscriptionScopeOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtSubscriptionScopeOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtSubscriptionScopeOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtSubscriptionScopeOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtSubscriptionScopeOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtSubscriptionScopeOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtSubscriptionScopeOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsDeleteAtTenantScopeOperation">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtTenantScopeOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtTenantScopeOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtTenantScopeOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteAtTenantScopeOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtTenantScopeOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtTenantScopeOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtTenantScopeOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtTenantScopeOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteAtTenantScopeOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsDeleteOperation">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. Deleting a template deployment does not affect the state of the resource group. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsDeleteOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsDeleteOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsOperations">
            <summary> The Deployments service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.#ctor">
            <summary> Initializes a new instance of DeploymentsOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of DeploymentsOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CheckExistenceAtScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CheckExistenceAtScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.GetAtScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.GetAtScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CancelAtScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CancelAtScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ExportTemplateAtScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ExportTemplateAtScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CheckExistenceAtTenantScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CheckExistenceAtTenantScope(System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.GetAtTenantScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.GetAtTenantScope(System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CancelAtTenantScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CancelAtTenantScope(System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ExportTemplateAtTenantScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ExportTemplateAtTenantScope(System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CheckExistenceAtManagementGroupScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CheckExistenceAtManagementGroupScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.GetAtManagementGroupScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.GetAtManagementGroupScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CancelAtManagementGroupScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CancelAtManagementGroupScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ExportTemplateAtManagementGroupScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ExportTemplateAtManagementGroupScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CheckExistenceAtSubscriptionScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CheckExistenceAtSubscriptionScope(System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.GetAtSubscriptionScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.GetAtSubscriptionScope(System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CancelAtSubscriptionScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CancelAtSubscriptionScope(System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ExportTemplateAtSubscriptionScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ExportTemplateAtSubscriptionScope(System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CheckExistenceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="resourceGroupName"> The name of the resource group with the deployment to check. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CheckExistence(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="resourceGroupName"> The name of the resource group with the deployment to check. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CancelAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resource group partially deployed. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.Cancel(System.String,System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resource group partially deployed. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ExportTemplateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ExportTemplate(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CalculateTemplateHashAsync(System.Object,System.Threading.CancellationToken)">
            <summary> Calculate the hash of the given template. </summary>
            <param name="template"> The template provided to calculate hash. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.CalculateTemplateHash(System.Object,System.Threading.CancellationToken)">
            <summary> Calculate the hash of the given template. </summary>
            <param name="template"> The template provided to calculate hash. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ListAtScopeAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments at the given scope. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ListAtScope(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments at the given scope. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ListAtTenantScopeAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments at the tenant scope. </summary>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ListAtTenantScope(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments at the tenant scope. </summary>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ListAtManagementGroupScopeAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a management group. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ListAtManagementGroupScope(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a management group. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ListAtSubscriptionScopeAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a subscription. </summary>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ListAtSubscriptionScope(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a subscription. </summary>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ListByResourceGroupAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group with the deployments to get. The name is case insensitive. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.ListByResourceGroup(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group with the deployments to get. The name is case insensitive. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartDeleteAtScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartDeleteAtScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartCreateOrUpdateAtScopeAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartCreateOrUpdateAtScope(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartValidateAtScopeAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartValidateAtScope(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartDeleteAtTenantScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartDeleteAtTenantScope(System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartCreateOrUpdateAtTenantScopeAsync(System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartCreateOrUpdateAtTenantScope(System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartValidateAtTenantScopeAsync(System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartValidateAtTenantScope(System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartDeleteAtManagementGroupScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartDeleteAtManagementGroupScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartCreateOrUpdateAtManagementGroupScopeAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartCreateOrUpdateAtManagementGroupScope(System.String,System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartValidateAtManagementGroupScopeAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartValidateAtManagementGroupScope(System.String,System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartDeleteAtSubscriptionScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartDeleteAtSubscriptionScope(System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartCreateOrUpdateAtSubscriptionScopeAsync(System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartCreateOrUpdateAtSubscriptionScope(System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartValidateAtSubscriptionScopeAsync(System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartValidateAtSubscriptionScope(System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartWhatIfAtSubscriptionScopeAsync(System.String,Azure.ResourceManager.Resources.Models.DeploymentWhatIf,System.Threading.CancellationToken)">
            <summary> Returns changes that will be made by the deployment if executed at the scope of the subscription. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to What If. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartWhatIfAtSubscriptionScope(System.String,Azure.ResourceManager.Resources.Models.DeploymentWhatIf,System.Threading.CancellationToken)">
            <summary> Returns changes that will be made by the deployment if executed at the scope of the subscription. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to What If. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartDeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. Deleting a template deployment does not affect the state of the resource group. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="resourceGroupName"> The name of the resource group with the deployment to delete. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartDelete(System.String,System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. Deleting a template deployment does not affect the state of the resource group. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="resourceGroupName"> The name of the resource group with the deployment to delete. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartCreateOrUpdateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="resourceGroupName"> The name of the resource group to deploy the resources to. The name is case insensitive. The resource group must already exist. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartCreateOrUpdate(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="resourceGroupName"> The name of the resource group to deploy the resources to. The name is case insensitive. The resource group must already exist. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartValidateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="resourceGroupName"> The name of the resource group the template will be deployed to. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartValidate(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="resourceGroupName"> The name of the resource group the template will be deployed to. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartWhatIfAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.DeploymentWhatIf,System.Threading.CancellationToken)">
            <summary> Returns changes that will be made by the deployment if executed at the scope of the resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group the template will be deployed to. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsOperations.StartWhatIf(System.String,System.String,Azure.ResourceManager.Resources.Models.DeploymentWhatIf,System.Threading.CancellationToken)">
            <summary> Returns changes that will be made by the deployment if executed at the scope of the resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group the template will be deployed to. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of DeploymentsRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.DeleteAtScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.DeleteAtScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CheckExistenceAtScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CheckExistenceAtScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CreateOrUpdateAtScopeAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CreateOrUpdateAtScope(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.GetAtScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.GetAtScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CancelAtScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CancelAtScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ValidateAtScopeAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ValidateAtScope(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ExportTemplateAtScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ExportTemplateAtScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtScopeAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments at the given scope. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtScope(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments at the given scope. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.DeleteAtTenantScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.DeleteAtTenantScope(System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CheckExistenceAtTenantScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CheckExistenceAtTenantScope(System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CreateOrUpdateAtTenantScopeAsync(System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CreateOrUpdateAtTenantScope(System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.GetAtTenantScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.GetAtTenantScope(System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CancelAtTenantScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CancelAtTenantScope(System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ValidateAtTenantScopeAsync(System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ValidateAtTenantScope(System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ExportTemplateAtTenantScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ExportTemplateAtTenantScope(System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtTenantScopeAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments at the tenant scope. </summary>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtTenantScope(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments at the tenant scope. </summary>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.DeleteAtManagementGroupScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.DeleteAtManagementGroupScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CheckExistenceAtManagementGroupScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CheckExistenceAtManagementGroupScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CreateOrUpdateAtManagementGroupScopeAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CreateOrUpdateAtManagementGroupScope(System.String,System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.GetAtManagementGroupScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.GetAtManagementGroupScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CancelAtManagementGroupScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CancelAtManagementGroupScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ValidateAtManagementGroupScopeAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ValidateAtManagementGroupScope(System.String,System.String,Azure.ResourceManager.Resources.Models.ScopedDeployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ExportTemplateAtManagementGroupScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ExportTemplateAtManagementGroupScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtManagementGroupScopeAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a management group. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtManagementGroupScope(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a management group. </summary>
            <param name="groupId"> The management group ID. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.DeleteAtSubscriptionScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.DeleteAtSubscriptionScope(System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CheckExistenceAtSubscriptionScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CheckExistenceAtSubscriptionScope(System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CreateOrUpdateAtSubscriptionScopeAsync(System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CreateOrUpdateAtSubscriptionScope(System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.GetAtSubscriptionScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.GetAtSubscriptionScope(System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CancelAtSubscriptionScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CancelAtSubscriptionScope(System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ValidateAtSubscriptionScopeAsync(System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ValidateAtSubscriptionScope(System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.WhatIfAtSubscriptionScopeAsync(System.String,Azure.ResourceManager.Resources.Models.DeploymentWhatIf,System.Threading.CancellationToken)">
            <summary> Returns changes that will be made by the deployment if executed at the scope of the subscription. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to What If. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.WhatIfAtSubscriptionScope(System.String,Azure.ResourceManager.Resources.Models.DeploymentWhatIf,System.Threading.CancellationToken)">
            <summary> Returns changes that will be made by the deployment if executed at the scope of the subscription. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to What If. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ExportTemplateAtSubscriptionScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ExportTemplateAtSubscriptionScope(System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtSubscriptionScopeAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a subscription. </summary>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtSubscriptionScope(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a subscription. </summary>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. Deleting a template deployment does not affect the state of the resource group. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="resourceGroupName"> The name of the resource group with the deployment to delete. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.Delete(System.String,System.String,System.Threading.CancellationToken)">
            <summary> A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. Deleting a template deployment does not affect the state of the resource group. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code. </summary>
            <param name="resourceGroupName"> The name of the resource group with the deployment to delete. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CheckExistenceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="resourceGroupName"> The name of the resource group with the deployment to check. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CheckExistence(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether the deployment exists. </summary>
            <param name="resourceGroupName"> The name of the resource group with the deployment to check. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CreateOrUpdateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="resourceGroupName"> The name of the resource group to deploy the resources to. The name is case insensitive. The resource group must already exist. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CreateOrUpdate(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> You can provide the template and parameters directly in the request or link to JSON files. </summary>
            <param name="resourceGroupName"> The name of the resource group to deploy the resources to. The name is case insensitive. The resource group must already exist. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Additional parameters supplied to the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a deployment. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CancelAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resource group partially deployed. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.Cancel(System.String,System.String,System.Threading.CancellationToken)">
            <summary> You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resource group partially deployed. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ValidateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="resourceGroupName"> The name of the resource group the template will be deployed to. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.Validate(System.String,System.String,Azure.ResourceManager.Resources.Models.Deployment,System.Threading.CancellationToken)">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
            <param name="resourceGroupName"> The name of the resource group the template will be deployed to. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.WhatIfAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.DeploymentWhatIf,System.Threading.CancellationToken)">
            <summary> Returns changes that will be made by the deployment if executed at the scope of the resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group the template will be deployed to. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.WhatIf(System.String,System.String,Azure.ResourceManager.Resources.Models.DeploymentWhatIf,System.Threading.CancellationToken)">
            <summary> Returns changes that will be made by the deployment if executed at the scope of the resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group the template will be deployed to. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="parameters"> Parameters to validate. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="deploymentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ExportTemplateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ExportTemplate(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Exports the template used for specified deployment. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="deploymentName"> The name of the deployment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListByResourceGroupAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group with the deployments to get. The name is case insensitive. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListByResourceGroup(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group with the deployments to get. The name is case insensitive. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CalculateTemplateHashAsync(System.Object,System.Threading.CancellationToken)">
            <summary> Calculate the hash of the given template. </summary>
            <param name="template"> The template provided to calculate hash. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="template"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.CalculateTemplateHash(System.Object,System.Threading.CancellationToken)">
            <summary> Calculate the hash of the given template. </summary>
            <param name="template"> The template provided to calculate hash. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="template"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtScopeNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments at the given scope. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="scope"> The resource scope. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtScopeNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments at the given scope. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="scope"> The resource scope. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtTenantScopeNextPageAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments at the tenant scope. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtTenantScopeNextPage(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments at the tenant scope. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtManagementGroupScopeNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a management group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="groupId"> The management group ID. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="groupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtManagementGroupScopeNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a management group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="groupId"> The management group ID. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="groupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtSubscriptionScopeNextPageAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListAtSubscriptionScopeNextPage(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListByResourceGroupNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group with the deployments to get. The name is case insensitive. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsRestOperations.ListByResourceGroupNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the deployments for a resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group with the deployments to get. The name is case insensitive. </param>
            <param name="filter"> The filter to apply on the operation. For example, you can use $filter=provisioningState eq &apos;{state}&apos;. </param>
            <param name="top"> The number of results to get. If null is passed, returns all deployments. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsValidateAtManagementGroupScopeOperation">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtManagementGroupScopeOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtManagementGroupScopeOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtManagementGroupScopeOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtManagementGroupScopeOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtManagementGroupScopeOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtManagementGroupScopeOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtManagementGroupScopeOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtManagementGroupScopeOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtManagementGroupScopeOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsValidateAtScopeOperation">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtScopeOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtScopeOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtScopeOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtScopeOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtScopeOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtScopeOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtScopeOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtScopeOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtScopeOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsValidateAtSubscriptionScopeOperation">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtSubscriptionScopeOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtSubscriptionScopeOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtSubscriptionScopeOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtSubscriptionScopeOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtSubscriptionScopeOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtSubscriptionScopeOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtSubscriptionScopeOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtSubscriptionScopeOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtSubscriptionScopeOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsValidateAtTenantScopeOperation">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtTenantScopeOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtTenantScopeOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtTenantScopeOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateAtTenantScopeOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtTenantScopeOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtTenantScopeOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtTenantScopeOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtTenantScopeOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateAtTenantScopeOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsValidateOperation">
            <summary> Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager.. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsValidateOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsValidateOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsWhatIfAtSubscriptionScopeHeaders.Location">
            <summary> URL to get status of this long-running operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsWhatIfAtSubscriptionScopeHeaders.RetryAfter">
            <summary> Number of seconds to wait before polling for status. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsWhatIfAtSubscriptionScopeOperation">
            <summary> Returns changes that will be made by the deployment if executed at the scope of the subscription. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsWhatIfAtSubscriptionScopeOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsWhatIfAtSubscriptionScopeOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsWhatIfAtSubscriptionScopeOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsWhatIfAtSubscriptionScopeOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsWhatIfAtSubscriptionScopeOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsWhatIfAtSubscriptionScopeOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsWhatIfAtSubscriptionScopeOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsWhatIfAtSubscriptionScopeOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsWhatIfAtSubscriptionScopeOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsWhatIfHeaders.Location">
            <summary> URL to get status of this long-running operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsWhatIfHeaders.RetryAfter">
            <summary> Number of seconds to wait before polling for status. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.DeploymentsWhatIfOperation">
            <summary> Returns changes that will be made by the deployment if executed at the scope of the resource group. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsWhatIfOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsWhatIfOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsWhatIfOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.DeploymentsWhatIfOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsWhatIfOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsWhatIfOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsWhatIfOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsWhatIfOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.DeploymentsWhatIfOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.FeaturesOperations">
            <summary> The Features service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesOperations.#ctor">
            <summary> Initializes a new instance of FeaturesOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of FeaturesOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the preview feature with the specified name. </summary>
            <param name="resourceProviderNamespace"> The resource provider namespace for the feature. </param>
            <param name="featureName"> The name of the feature to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the preview feature with the specified name. </summary>
            <param name="resourceProviderNamespace"> The resource provider namespace for the feature. </param>
            <param name="featureName"> The name of the feature to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesOperations.RegisterAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Registers the preview feature for the subscription. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="featureName"> The name of the feature to register. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesOperations.Register(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Registers the preview feature for the subscription. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="featureName"> The name of the feature to register. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesOperations.UnregisterAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Unregisters the preview feature for the subscription. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="featureName"> The name of the feature to unregister. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesOperations.Unregister(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Unregisters the preview feature for the subscription. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="featureName"> The name of the feature to unregister. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesOperations.ListAllAsync(System.Threading.CancellationToken)">
            <summary> Gets all the preview features that are available through AFEC for the subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesOperations.ListAll(System.Threading.CancellationToken)">
            <summary> Gets all the preview features that are available through AFEC for the subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesOperations.ListAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features in a provider namespace that are available through AFEC for the subscription. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider for getting features. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesOperations.List(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features in a provider namespace that are available through AFEC for the subscription. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider for getting features. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of FeaturesRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.ListAllAsync(System.Threading.CancellationToken)">
            <summary> Gets all the preview features that are available through AFEC for the subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.ListAll(System.Threading.CancellationToken)">
            <summary> Gets all the preview features that are available through AFEC for the subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.ListAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features in a provider namespace that are available through AFEC for the subscription. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider for getting features. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.List(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features in a provider namespace that are available through AFEC for the subscription. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider for getting features. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the preview feature with the specified name. </summary>
            <param name="resourceProviderNamespace"> The resource provider namespace for the feature. </param>
            <param name="featureName"> The name of the feature to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> or <paramref name="featureName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the preview feature with the specified name. </summary>
            <param name="resourceProviderNamespace"> The resource provider namespace for the feature. </param>
            <param name="featureName"> The name of the feature to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> or <paramref name="featureName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.RegisterAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Registers the preview feature for the subscription. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="featureName"> The name of the feature to register. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> or <paramref name="featureName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.Register(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Registers the preview feature for the subscription. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="featureName"> The name of the feature to register. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> or <paramref name="featureName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.UnregisterAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Unregisters the preview feature for the subscription. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="featureName"> The name of the feature to unregister. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> or <paramref name="featureName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.Unregister(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Unregisters the preview feature for the subscription. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="featureName"> The name of the feature to unregister. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> or <paramref name="featureName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.ListAllNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features that are available through AFEC for the subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.ListAllNextPage(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features that are available through AFEC for the subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.ListNextPageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features in a provider namespace that are available through AFEC for the subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider for getting features. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceProviderNamespace"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.FeaturesRestOperations.ListNextPage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the preview features in a provider namespace that are available through AFEC for the subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider for getting features. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceProviderNamespace"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ManagementLocksOperations">
            <summary> The ManagementLocks service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.#ctor">
            <summary> Initializes a new instance of ManagementLocksOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of ManagementLocksOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.CreateOrUpdateAtResourceGroupLevelAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group to lock. </param>
            <param name="lockName"> The lock name. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
            <param name="parameters"> The management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.CreateOrUpdateAtResourceGroupLevel(System.String,System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group to lock. </param>
            <param name="lockName"> The lock name. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
            <param name="parameters"> The management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.DeleteAtResourceGroupLevelAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the lock. </param>
            <param name="lockName"> The name of lock to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.DeleteAtResourceGroupLevel(System.String,System.String,System.Threading.CancellationToken)">
            <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the lock. </param>
            <param name="lockName"> The name of lock to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.GetAtResourceGroupLevelAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a management lock at the resource group level. </summary>
            <param name="resourceGroupName"> The name of the locked resource group. </param>
            <param name="lockName"> The name of the lock to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.GetAtResourceGroupLevel(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a management lock at the resource group level. </summary>
            <param name="resourceGroupName"> The name of the locked resource group. </param>
            <param name="lockName"> The name of the lock to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.CreateOrUpdateByScopeAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> Create or update a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use &apos;/subscriptions/{subscriptionId}&apos; for subscriptions, &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&apos; for resource groups, and &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&apos; for resources. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="parameters"> Create or update management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.CreateOrUpdateByScope(System.String,System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> Create or update a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use &apos;/subscriptions/{subscriptionId}&apos; for subscriptions, &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&apos; for resource groups, and &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&apos; for resources. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="parameters"> Create or update management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.DeleteByScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Delete a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.DeleteByScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Delete a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.GetByScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.GetByScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.CreateOrUpdateAtResourceLevelAsync(System.String,System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource to lock. </param>
            <param name="resourceProviderNamespace"> The resource provider namespace of the resource to lock. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource to lock. </param>
            <param name="resourceName"> The name of the resource to lock. </param>
            <param name="lockName"> The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
            <param name="parameters"> Parameters for creating or updating a  management lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.CreateOrUpdateAtResourceLevel(System.String,System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource to lock. </param>
            <param name="resourceProviderNamespace"> The resource provider namespace of the resource to lock. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource to lock. </param>
            <param name="resourceName"> The name of the resource to lock. </param>
            <param name="lockName"> The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
            <param name="parameters"> Parameters for creating or updating a  management lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.DeleteAtResourceLevelAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource with the lock to delete. </param>
            <param name="resourceProviderNamespace"> The resource provider namespace of the resource with the lock to delete. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource with the lock to delete. </param>
            <param name="resourceName"> The name of the resource with the lock to delete. </param>
            <param name="lockName"> The name of the lock to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.DeleteAtResourceLevel(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource with the lock to delete. </param>
            <param name="resourceProviderNamespace"> The resource provider namespace of the resource with the lock to delete. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource with the lock to delete. </param>
            <param name="resourceName"> The name of the resource with the lock to delete. </param>
            <param name="lockName"> The name of the lock to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.GetAtResourceLevelAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get the management lock of a resource or any level below resource. </summary>
            <param name="resourceGroupName"> The name of the resource group. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> An extra path parameter needed in some services, like SQL Databases. </param>
            <param name="resourceType"> The type of the resource. </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.GetAtResourceLevel(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get the management lock of a resource or any level below resource. </summary>
            <param name="resourceGroupName"> The name of the resource group. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> An extra path parameter needed in some services, like SQL Databases. </param>
            <param name="resourceType"> The type of the resource. </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.CreateOrUpdateAtSubscriptionLevelAsync(System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="lockName"> The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
            <param name="parameters"> The management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.CreateOrUpdateAtSubscriptionLevel(System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="lockName"> The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
            <param name="parameters"> The management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.DeleteAtSubscriptionLevelAsync(System.String,System.Threading.CancellationToken)">
            <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="lockName"> The name of lock to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.DeleteAtSubscriptionLevel(System.String,System.Threading.CancellationToken)">
            <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="lockName"> The name of lock to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.GetAtSubscriptionLevelAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets a management lock at the subscription level. </summary>
            <param name="lockName"> The name of the lock to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.GetAtSubscriptionLevel(System.String,System.Threading.CancellationToken)">
            <summary> Gets a management lock at the subscription level. </summary>
            <param name="lockName"> The name of the lock to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.ListAtResourceGroupLevelAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the locks to get. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.ListAtResourceGroupLevel(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the locks to get. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.ListAtResourceLevelAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a resource or any level below resource. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the locked resource. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the locked resource. </param>
            <param name="resourceName"> The name of the locked resource. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, or <paramref name="resourceName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.ListAtResourceLevel(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a resource or any level below resource. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the locked resource. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the locked resource. </param>
            <param name="resourceName"> The name of the locked resource. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, or <paramref name="resourceName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.ListAtSubscriptionLevelAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a subscription. </summary>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.ListAtSubscriptionLevel(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a subscription. </summary>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.ListByScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a scope. </summary>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use &apos;/subscriptions/{subscriptionId}&apos; for subscriptions, &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&apos; for resource groups, and &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&apos; for resources. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksOperations.ListByScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a scope. </summary>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use &apos;/subscriptions/{subscriptionId}&apos; for subscriptions, &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&apos; for resource groups, and &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&apos; for resources. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of ManagementLocksRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.CreateOrUpdateAtResourceGroupLevelAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group to lock. </param>
            <param name="lockName"> The lock name. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
            <param name="parameters"> The management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="lockName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.CreateOrUpdateAtResourceGroupLevel(System.String,System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group to lock. </param>
            <param name="lockName"> The lock name. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
            <param name="parameters"> The management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="lockName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.DeleteAtResourceGroupLevelAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the lock. </param>
            <param name="lockName"> The name of lock to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.DeleteAtResourceGroupLevel(System.String,System.String,System.Threading.CancellationToken)">
            <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the lock. </param>
            <param name="lockName"> The name of lock to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.GetAtResourceGroupLevelAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a management lock at the resource group level. </summary>
            <param name="resourceGroupName"> The name of the locked resource group. </param>
            <param name="lockName"> The name of the lock to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.GetAtResourceGroupLevel(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a management lock at the resource group level. </summary>
            <param name="resourceGroupName"> The name of the locked resource group. </param>
            <param name="lockName"> The name of the lock to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.CreateOrUpdateByScopeAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> Create or update a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use &apos;/subscriptions/{subscriptionId}&apos; for subscriptions, &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&apos; for resource groups, and &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&apos; for resources. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="parameters"> Create or update management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/>, <paramref name="lockName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.CreateOrUpdateByScope(System.String,System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> Create or update a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use &apos;/subscriptions/{subscriptionId}&apos; for subscriptions, &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&apos; for resource groups, and &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&apos; for resources. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="parameters"> Create or update management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/>, <paramref name="lockName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.DeleteByScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Delete a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.DeleteByScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Delete a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.GetByScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.GetByScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get a management lock by scope. </summary>
            <param name="scope"> The scope for the lock. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.CreateOrUpdateAtResourceLevelAsync(System.String,System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource to lock. </param>
            <param name="resourceProviderNamespace"> The resource provider namespace of the resource to lock. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource to lock. </param>
            <param name="resourceName"> The name of the resource to lock. </param>
            <param name="lockName"> The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
            <param name="parameters"> Parameters for creating or updating a  management lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, <paramref name="lockName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.CreateOrUpdateAtResourceLevel(System.String,System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource to lock. </param>
            <param name="resourceProviderNamespace"> The resource provider namespace of the resource to lock. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource to lock. </param>
            <param name="resourceName"> The name of the resource to lock. </param>
            <param name="lockName"> The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
            <param name="parameters"> Parameters for creating or updating a  management lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, <paramref name="lockName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.DeleteAtResourceLevelAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource with the lock to delete. </param>
            <param name="resourceProviderNamespace"> The resource provider namespace of the resource with the lock to delete. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource with the lock to delete. </param>
            <param name="resourceName"> The name of the resource with the lock to delete. </param>
            <param name="lockName"> The name of the lock to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, or <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.DeleteAtResourceLevel(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource with the lock to delete. </param>
            <param name="resourceProviderNamespace"> The resource provider namespace of the resource with the lock to delete. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource with the lock to delete. </param>
            <param name="resourceName"> The name of the resource with the lock to delete. </param>
            <param name="lockName"> The name of the lock to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, or <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.GetAtResourceLevelAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get the management lock of a resource or any level below resource. </summary>
            <param name="resourceGroupName"> The name of the resource group. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> An extra path parameter needed in some services, like SQL Databases. </param>
            <param name="resourceType"> The type of the resource. </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, or <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.GetAtResourceLevel(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get the management lock of a resource or any level below resource. </summary>
            <param name="resourceGroupName"> The name of the resource group. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> An extra path parameter needed in some services, like SQL Databases. </param>
            <param name="resourceType"> The type of the resource. </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="lockName"> The name of lock. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, or <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.CreateOrUpdateAtSubscriptionLevelAsync(System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="lockName"> The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
            <param name="parameters"> The management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="lockName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.CreateOrUpdateAtSubscriptionLevel(System.String,Azure.ResourceManager.Resources.Models.ManagementLockObject,System.Threading.CancellationToken)">
            <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="lockName"> The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
            <param name="parameters"> The management lock parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="lockName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.DeleteAtSubscriptionLevelAsync(System.String,System.Threading.CancellationToken)">
            <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="lockName"> The name of lock to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.DeleteAtSubscriptionLevel(System.String,System.Threading.CancellationToken)">
            <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
            <param name="lockName"> The name of lock to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.GetAtSubscriptionLevelAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets a management lock at the subscription level. </summary>
            <param name="lockName"> The name of the lock to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.GetAtSubscriptionLevel(System.String,System.Threading.CancellationToken)">
            <summary> Gets a management lock at the subscription level. </summary>
            <param name="lockName"> The name of the lock to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="lockName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListAtResourceGroupLevelAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the locks to get. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListAtResourceGroupLevel(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the locks to get. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListAtResourceLevelAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a resource or any level below resource. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the locked resource. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the locked resource. </param>
            <param name="resourceName"> The name of the locked resource. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, or <paramref name="resourceName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListAtResourceLevel(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a resource or any level below resource. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the locked resource. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the locked resource. </param>
            <param name="resourceName"> The name of the locked resource. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, or <paramref name="resourceName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListAtSubscriptionLevelAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a subscription. </summary>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListAtSubscriptionLevel(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a subscription. </summary>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListByScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a scope. </summary>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use &apos;/subscriptions/{subscriptionId}&apos; for subscriptions, &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&apos; for resource groups, and &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&apos; for resources. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListByScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a scope. </summary>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use &apos;/subscriptions/{subscriptionId}&apos; for subscriptions, &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&apos; for resource groups, and &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&apos; for resources. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListAtResourceGroupLevelNextPageAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group containing the locks to get. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListAtResourceGroupLevelNextPage(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group containing the locks to get. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListAtResourceLevelNextPageAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a resource or any level below resource. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group containing the locked resource. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the locked resource. </param>
            <param name="resourceName"> The name of the locked resource. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, or <paramref name="resourceName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListAtResourceLevelNextPage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a resource or any level below resource. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group containing the locked resource. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the locked resource. </param>
            <param name="resourceName"> The name of the locked resource. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, or <paramref name="resourceName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListAtSubscriptionLevelNextPageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListAtSubscriptionLevelNextPage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListByScopeNextPageAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a scope. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use &apos;/subscriptions/{subscriptionId}&apos; for subscriptions, &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&apos; for resource groups, and &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&apos; for resources. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ManagementLocksRestOperations.ListByScopeNextPage(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the management locks for a scope. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="scope"> The scope for the lock. When providing a scope for the assignment, use &apos;/subscriptions/{subscriptionId}&apos; for subscriptions, &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&apos; for resource groups, and &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&apos; for resources. </param>
            <param name="filter"> The filter to apply on the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="scope"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.Operations">
            <summary> The  service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Operations.#ctor">
            <summary> Initializes a new instance of Operations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Operations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.Uri)">
            <summary> Initializes a new instance of Operations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Operations.ListAsync(System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Resources REST API operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.Operations.List(System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Resources REST API operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="T:Azure.ResourceManager.Resources.PolicyAssignmentsOperations">
            <summary> The PolicyAssignments service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.#ctor">
            <summary> Initializes a new instance of PolicyAssignmentsOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of PolicyAssignmentsOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding &apos;/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
            <param name="policyAssignmentName"> The name of the policy assignment to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.Delete(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding &apos;/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
            <param name="policyAssignmentName"> The name of the policy assignment to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.CreateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.PolicyAssignment,System.Threading.CancellationToken)">
            <summary>  This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
            <param name="policyAssignmentName"> The name of the policy assignment. </param>
            <param name="parameters"> Parameters for the policy assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.Create(System.String,System.String,Azure.ResourceManager.Resources.Models.PolicyAssignment,System.Threading.CancellationToken)">
            <summary>  This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
            <param name="policyAssignmentName"> The name of the policy assignment. </param>
            <param name="parameters"> Parameters for the policy assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a single policy assignment, given its name and the scope it was created at. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
            <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a single policy assignment, given its name and the scope it was created at. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
            <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.DeleteByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy with the given ID. Policy assignment IDs have this format: &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. Valid formats for {scope} are: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos; (management group), &apos;/subscriptions/{subscriptionId}&apos; (subscription), &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos; (resource group), or &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos; (resource). </summary>
            <param name="policyAssignmentId"> The ID of the policy assignment to delete. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.DeleteById(System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy with the given ID. Policy assignment IDs have this format: &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. Valid formats for {scope} are: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos; (management group), &apos;/subscriptions/{subscriptionId}&apos; (subscription), &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos; (resource group), or &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos; (resource). </summary>
            <param name="policyAssignmentId"> The ID of the policy assignment to delete. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.CreateByIdAsync(System.String,Azure.ResourceManager.Resources.Models.PolicyAssignment,System.Threading.CancellationToken)">
            <summary> This operation creates or updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </summary>
            <param name="policyAssignmentId"> The ID of the policy assignment to create. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
            <param name="parameters"> Parameters for policy assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.CreateById(System.String,Azure.ResourceManager.Resources.Models.PolicyAssignment,System.Threading.CancellationToken)">
            <summary> This operation creates or updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </summary>
            <param name="policyAssignmentId"> The ID of the policy assignment to create. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
            <param name="parameters"> Parameters for policy assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.GetByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary> The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this format: &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </summary>
            <param name="policyAssignmentId"> The ID of the policy assignment to get. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.GetById(System.String,System.Threading.CancellationToken)">
            <summary> The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this format: &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </summary>
            <param name="policyAssignmentId"> The ID of the policy assignment to get. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.ListForResourceGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group that contains policy assignments. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.ListForResourceGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group that contains policy assignments. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.ListForResourceAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as &apos;&apos;). For example a web app could be specified as ({resourceProviderNamespace} == &apos;Microsoft.Web&apos;, {parentResourcePath} == &apos;&apos;, {resourceType} == &apos;sites&apos;, {resourceName} == &apos;MyWebApp&apos;). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} == &apos;Microsoft.Compute&apos;, {parentResourcePath} == &apos;virtualMachines/MyVirtualMachine&apos;, {resourceType} == &apos;domainNames&apos;, {resourceName} == &apos;MyComputerName&apos;). A convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == &apos;&apos;, {parentResourcePath} == &apos;&apos;, {resourceType} == &apos;Microsoft.Web/sites&apos;, {resourceName} == &apos;MyWebApp&apos;). </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. For example, the namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines). </param>
            <param name="parentResourcePath"> The parent resource path. Use empty string if there is none. </param>
            <param name="resourceType"> The resource type name. For example the type name of a web app is &apos;sites&apos; (from Microsoft.Web/sites). </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, or <paramref name="resourceName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.ListForResource(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as &apos;&apos;). For example a web app could be specified as ({resourceProviderNamespace} == &apos;Microsoft.Web&apos;, {parentResourcePath} == &apos;&apos;, {resourceType} == &apos;sites&apos;, {resourceName} == &apos;MyWebApp&apos;). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} == &apos;Microsoft.Compute&apos;, {parentResourcePath} == &apos;virtualMachines/MyVirtualMachine&apos;, {resourceType} == &apos;domainNames&apos;, {resourceName} == &apos;MyComputerName&apos;). A convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == &apos;&apos;, {parentResourcePath} == &apos;&apos;, {resourceType} == &apos;Microsoft.Web/sites&apos;, {resourceName} == &apos;MyWebApp&apos;). </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. For example, the namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines). </param>
            <param name="parentResourcePath"> The parent resource path. Use empty string if there is none. </param>
            <param name="resourceType"> The resource type name. For example the type name of a web app is &apos;sites&apos; (from Microsoft.Web/sites). </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, or <paramref name="resourceName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.ListForManagementGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group&apos;s ancestors. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the management group. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. A filter is required when listing policy assignments at management group scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId"/> or <paramref name="filter"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.ListForManagementGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group&apos;s ancestors. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the management group. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. A filter is required when listing policy assignments at management group scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId"/> or <paramref name="filter"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.ListAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsOperations.List(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of PolicyAssignmentsRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.DeleteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding &apos;/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
            <param name="policyAssignmentName"> The name of the policy assignment to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="policyAssignmentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.Delete(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding &apos;/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
            <param name="policyAssignmentName"> The name of the policy assignment to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="policyAssignmentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.CreateAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.PolicyAssignment,System.Threading.CancellationToken)">
            <summary>  This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
            <param name="policyAssignmentName"> The name of the policy assignment. </param>
            <param name="parameters"> Parameters for the policy assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/>, <paramref name="policyAssignmentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.Create(System.String,System.String,Azure.ResourceManager.Resources.Models.PolicyAssignment,System.Threading.CancellationToken)">
            <summary>  This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
            <param name="policyAssignmentName"> The name of the policy assignment. </param>
            <param name="parameters"> Parameters for the policy assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/>, <paramref name="policyAssignmentName"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a single policy assignment, given its name and the scope it was created at. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
            <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="policyAssignmentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a single policy assignment, given its name and the scope it was created at. </summary>
            <param name="scope"> The scope of the policy assignment. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </param>
            <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="policyAssignmentName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResourceGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group that contains policy assignments. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResourceGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group that contains policy assignments. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResourceAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as &apos;&apos;). For example a web app could be specified as ({resourceProviderNamespace} == &apos;Microsoft.Web&apos;, {parentResourcePath} == &apos;&apos;, {resourceType} == &apos;sites&apos;, {resourceName} == &apos;MyWebApp&apos;). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} == &apos;Microsoft.Compute&apos;, {parentResourcePath} == &apos;virtualMachines/MyVirtualMachine&apos;, {resourceType} == &apos;domainNames&apos;, {resourceName} == &apos;MyComputerName&apos;). A convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == &apos;&apos;, {parentResourcePath} == &apos;&apos;, {resourceType} == &apos;Microsoft.Web/sites&apos;, {resourceName} == &apos;MyWebApp&apos;). </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. For example, the namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines). </param>
            <param name="parentResourcePath"> The parent resource path. Use empty string if there is none. </param>
            <param name="resourceType"> The resource type name. For example the type name of a web app is &apos;sites&apos; (from Microsoft.Web/sites). </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, or <paramref name="resourceName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResource(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as &apos;&apos;). For example a web app could be specified as ({resourceProviderNamespace} == &apos;Microsoft.Web&apos;, {parentResourcePath} == &apos;&apos;, {resourceType} == &apos;sites&apos;, {resourceName} == &apos;MyWebApp&apos;). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} == &apos;Microsoft.Compute&apos;, {parentResourcePath} == &apos;virtualMachines/MyVirtualMachine&apos;, {resourceType} == &apos;domainNames&apos;, {resourceName} == &apos;MyComputerName&apos;). A convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == &apos;&apos;, {parentResourcePath} == &apos;&apos;, {resourceType} == &apos;Microsoft.Web/sites&apos;, {resourceName} == &apos;MyWebApp&apos;). </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. For example, the namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines). </param>
            <param name="parentResourcePath"> The parent resource path. Use empty string if there is none. </param>
            <param name="resourceType"> The resource type name. For example the type name of a web app is &apos;sites&apos; (from Microsoft.Web/sites). </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, or <paramref name="resourceName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForManagementGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group&apos;s ancestors. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the management group. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. A filter is required when listing policy assignments at management group scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId"/> or <paramref name="filter"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForManagementGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group&apos;s ancestors. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the management group. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. A filter is required when listing policy assignments at management group scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId"/> or <paramref name="filter"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.List(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </summary>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.DeleteByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy with the given ID. Policy assignment IDs have this format: &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. Valid formats for {scope} are: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos; (management group), &apos;/subscriptions/{subscriptionId}&apos; (subscription), &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos; (resource group), or &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos; (resource). </summary>
            <param name="policyAssignmentId"> The ID of the policy assignment to delete. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyAssignmentId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.DeleteById(System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy with the given ID. Policy assignment IDs have this format: &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. Valid formats for {scope} are: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos; (management group), &apos;/subscriptions/{subscriptionId}&apos; (subscription), &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos; (resource group), or &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos; (resource). </summary>
            <param name="policyAssignmentId"> The ID of the policy assignment to delete. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyAssignmentId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.CreateByIdAsync(System.String,Azure.ResourceManager.Resources.Models.PolicyAssignment,System.Threading.CancellationToken)">
            <summary> This operation creates or updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </summary>
            <param name="policyAssignmentId"> The ID of the policy assignment to create. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
            <param name="parameters"> Parameters for policy assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyAssignmentId"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.CreateById(System.String,Azure.ResourceManager.Resources.Models.PolicyAssignment,System.Threading.CancellationToken)">
            <summary> This operation creates or updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </summary>
            <param name="policyAssignmentId"> The ID of the policy assignment to create. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
            <param name="parameters"> Parameters for policy assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyAssignmentId"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.GetByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary> The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this format: &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </summary>
            <param name="policyAssignmentId"> The ID of the policy assignment to get. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyAssignmentId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.GetById(System.String,System.Threading.CancellationToken)">
            <summary> The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this format: &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. Valid scopes are: management group (format: &apos;/providers/Microsoft.Management/managementGroups/{managementGroup}&apos;), subscription (format: &apos;/subscriptions/{subscriptionId}&apos;), resource group (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;, or resource (format: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&apos;. </summary>
            <param name="policyAssignmentId"> The ID of the policy assignment to get. Use the format &apos;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&apos;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyAssignmentId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResourceGroupNextPageAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group that contains policy assignments. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResourceGroupNextPage(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group that contains policy assignments. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResourceNextPageAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as &apos;&apos;). For example a web app could be specified as ({resourceProviderNamespace} == &apos;Microsoft.Web&apos;, {parentResourcePath} == &apos;&apos;, {resourceType} == &apos;sites&apos;, {resourceName} == &apos;MyWebApp&apos;). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} == &apos;Microsoft.Compute&apos;, {parentResourcePath} == &apos;virtualMachines/MyVirtualMachine&apos;, {resourceType} == &apos;domainNames&apos;, {resourceName} == &apos;MyComputerName&apos;). A convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == &apos;&apos;, {parentResourcePath} == &apos;&apos;, {resourceType} == &apos;Microsoft.Web/sites&apos;, {resourceName} == &apos;MyWebApp&apos;). </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group containing the resource. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. For example, the namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines). </param>
            <param name="parentResourcePath"> The parent resource path. Use empty string if there is none. </param>
            <param name="resourceType"> The resource type name. For example the type name of a web app is &apos;sites&apos; (from Microsoft.Web/sites). </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, or <paramref name="resourceName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForResourceNextPage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as &apos;&apos;). For example a web app could be specified as ({resourceProviderNamespace} == &apos;Microsoft.Web&apos;, {parentResourcePath} == &apos;&apos;, {resourceType} == &apos;sites&apos;, {resourceName} == &apos;MyWebApp&apos;). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} == &apos;Microsoft.Compute&apos;, {parentResourcePath} == &apos;virtualMachines/MyVirtualMachine&apos;, {resourceType} == &apos;domainNames&apos;, {resourceName} == &apos;MyComputerName&apos;). A convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == &apos;&apos;, {parentResourcePath} == &apos;&apos;, {resourceType} == &apos;Microsoft.Web/sites&apos;, {resourceName} == &apos;MyWebApp&apos;). </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The name of the resource group containing the resource. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. For example, the namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines). </param>
            <param name="parentResourcePath"> The parent resource path. Use empty string if there is none. </param>
            <param name="resourceType"> The resource type name. For example the type name of a web app is &apos;sites&apos; (from Microsoft.Web/sites). </param>
            <param name="resourceName"> The name of the resource. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, or <paramref name="resourceName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForManagementGroupNextPageAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group&apos;s ancestors. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the management group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. A filter is required when listing policy assignments at management group scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="managementGroupId"/>, or <paramref name="filter"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListForManagementGroupNextPage(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group&apos;s ancestors. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the management group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. A filter is required when listing policy assignments at management group scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="managementGroupId"/>, or <paramref name="filter"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListNextPageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyAssignmentsRestOperations.ListNextPage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.PolicyDefinitionsOperations">
            <summary> The PolicyDefinitions service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.#ctor">
            <summary> Initializes a new instance of PolicyDefinitionsOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of PolicyDefinitionsOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.CreateOrUpdateAsync(System.String,Azure.ResourceManager.Resources.Models.PolicyDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy definition in the given subscription with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="parameters"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.CreateOrUpdate(System.String,Azure.ResourceManager.Resources.Models.PolicyDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy definition in the given subscription with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="parameters"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy definition in the given subscription with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.Delete(System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy definition in the given subscription with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy definition in the given subscription with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.Get(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy definition in the given subscription with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.GetBuiltInAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the built-in policy definition with the given name. </summary>
            <param name="policyDefinitionName"> The name of the built-in policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.GetBuiltIn(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the built-in policy definition with the given name. </summary>
            <param name="policyDefinitionName"> The name of the built-in policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.CreateOrUpdateAtManagementGroupAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.PolicyDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy definition in the given management group with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="parameters"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.CreateOrUpdateAtManagementGroup(System.String,System.String,Azure.ResourceManager.Resources.Models.PolicyDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy definition in the given management group with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="parameters"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.DeleteAtManagementGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy definition in the given management group with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to delete. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.DeleteAtManagementGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy definition in the given management group with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to delete. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.GetAtManagementGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy definition in the given management group with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.GetAtManagementGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy definition in the given management group with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.List(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.ListBuiltInAsync(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy definitions. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.ListBuiltIn(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy definitions. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.ListByManagementGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given management group. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsOperations.ListByManagementGroup(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given management group. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of PolicyDefinitionsRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.CreateOrUpdateAsync(System.String,Azure.ResourceManager.Resources.Models.PolicyDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy definition in the given subscription with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="parameters"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.CreateOrUpdate(System.String,Azure.ResourceManager.Resources.Models.PolicyDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy definition in the given subscription with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="parameters"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy definition in the given subscription with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.Delete(System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy definition in the given subscription with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy definition in the given subscription with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.Get(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy definition in the given subscription with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.GetBuiltInAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the built-in policy definition with the given name. </summary>
            <param name="policyDefinitionName"> The name of the built-in policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.GetBuiltIn(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the built-in policy definition with the given name. </summary>
            <param name="policyDefinitionName"> The name of the built-in policy definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.CreateOrUpdateAtManagementGroupAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.PolicyDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy definition in the given management group with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="parameters"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName"/>, <paramref name="managementGroupId"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.CreateOrUpdateAtManagementGroup(System.String,System.String,Azure.ResourceManager.Resources.Models.PolicyDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy definition in the given management group with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to create. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="parameters"> The policy definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName"/>, <paramref name="managementGroupId"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.DeleteAtManagementGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy definition in the given management group with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to delete. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName"/> or <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.DeleteAtManagementGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy definition in the given management group with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to delete. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName"/> or <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.GetAtManagementGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy definition in the given management group with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName"/> or <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.GetAtManagementGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy definition in the given management group with the given name. </summary>
            <param name="policyDefinitionName"> The name of the policy definition to get. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policyDefinitionName"/> or <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.List(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListBuiltInAsync(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy definitions. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListBuiltIn(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy definitions. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListByManagementGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given management group. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListByManagementGroup(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given management group. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListNextPage(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListBuiltInNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy definitions. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListBuiltInNextPage(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy definitions. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListByManagementGroupNextPageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given management group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicyDefinitionsRestOperations.ListByManagementGroupNextPage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy definitions in a given management group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations">
            <summary> The PolicySetDefinitions service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.#ctor">
            <summary> Initializes a new instance of PolicySetDefinitionsOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of PolicySetDefinitionsOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.CreateOrUpdateAsync(System.String,Azure.ResourceManager.Resources.Models.PolicySetDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy set definition in the given subscription with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="parameters"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.CreateOrUpdate(System.String,Azure.ResourceManager.Resources.Models.PolicySetDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy set definition in the given subscription with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="parameters"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy set definition in the given subscription with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.Delete(System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy set definition in the given subscription with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy set definition in the given subscription with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.Get(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy set definition in the given subscription with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.GetBuiltInAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the built-in policy set definition with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.GetBuiltIn(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the built-in policy set definition with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.CreateOrUpdateAtManagementGroupAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.PolicySetDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy set definition in the given management group with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="parameters"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.CreateOrUpdateAtManagementGroup(System.String,System.String,Azure.ResourceManager.Resources.Models.PolicySetDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy set definition in the given management group with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="parameters"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.DeleteAtManagementGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy set definition in the given management group with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to delete. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.DeleteAtManagementGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy set definition in the given management group with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to delete. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.GetAtManagementGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy set definition in the given management group with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.GetAtManagementGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy set definition in the given management group with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy set definitions in the given subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.List(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy set definitions in the given subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.ListBuiltInAsync(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy set definitions. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.ListBuiltIn(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy set definitions. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.ListByManagementGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the a policy set definition in the given management group. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsOperations.ListByManagementGroup(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the a policy set definition in the given management group. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of PolicySetDefinitionsRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.CreateOrUpdateAsync(System.String,Azure.ResourceManager.Resources.Models.PolicySetDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy set definition in the given subscription with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="parameters"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.CreateOrUpdate(System.String,Azure.ResourceManager.Resources.Models.PolicySetDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy set definition in the given subscription with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="parameters"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy set definition in the given subscription with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.Delete(System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy set definition in the given subscription with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy set definition in the given subscription with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.Get(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy set definition in the given subscription with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.GetBuiltInAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the built-in policy set definition with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.GetBuiltIn(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the built-in policy set definition with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy set definitions in the given subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.List(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy set definitions in the given subscription. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListBuiltInAsync(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy set definitions. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListBuiltIn(System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy set definitions. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.CreateOrUpdateAtManagementGroupAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.PolicySetDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy set definition in the given management group with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="parameters"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName"/>, <paramref name="managementGroupId"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.CreateOrUpdateAtManagementGroup(System.String,System.String,Azure.ResourceManager.Resources.Models.PolicySetDefinition,System.Threading.CancellationToken)">
            <summary> This operation creates or updates a policy set definition in the given management group with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to create. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="parameters"> The policy set definition properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName"/>, <paramref name="managementGroupId"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.DeleteAtManagementGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy set definition in the given management group with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to delete. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName"/> or <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.DeleteAtManagementGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation deletes the policy set definition in the given management group with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to delete. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName"/> or <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.GetAtManagementGroupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy set definition in the given management group with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName"/> or <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.GetAtManagementGroup(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves the policy set definition in the given management group with the given name. </summary>
            <param name="policySetDefinitionName"> The name of the policy set definition to get. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="policySetDefinitionName"/> or <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListByManagementGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the a policy set definition in the given management group. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListByManagementGroup(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the a policy set definition in the given management group. </summary>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy set definitions in the given subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListNextPage(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the policy set definitions in the given subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListBuiltInNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy set definitions. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListBuiltInNextPage(System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the built-in policy set definitions. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListByManagementGroupNextPageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the a policy set definition in the given management group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.PolicySetDefinitionsRestOperations.ListByManagementGroupNextPage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation retrieves a list of all the a policy set definition in the given management group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="managementGroupId"> The ID of the management group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="managementGroupId"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ProvidersOperations">
            <summary> The Providers service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersOperations.#ctor">
            <summary> Initializes a new instance of ProvidersOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of ProvidersOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersOperations.UnregisterAsync(System.String,System.Threading.CancellationToken)">
            <summary> Unregisters a subscription from a resource provider. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider to unregister. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersOperations.Unregister(System.String,System.Threading.CancellationToken)">
            <summary> Unregisters a subscription from a resource provider. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider to unregister. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersOperations.RegisterAsync(System.String,System.Threading.CancellationToken)">
            <summary> Registers a subscription with a resource provider. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider to register. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersOperations.Register(System.String,System.Threading.CancellationToken)">
            <summary> Registers a subscription with a resource provider. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider to register. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the specified resource provider. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the specified resource provider. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersOperations.GetAtTenantScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the specified resource provider at the tenant level. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersOperations.GetAtTenantScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the specified resource provider at the tenant level. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersOperations.ListAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for a subscription. </summary>
            <param name="top"> The number of results to return. If null is passed returns all deployments. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersOperations.List(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for a subscription. </summary>
            <param name="top"> The number of results to return. If null is passed returns all deployments. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersOperations.ListAtTenantScopeAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for the tenant. </summary>
            <param name="top"> The number of results to return. If null is passed returns all providers. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersOperations.ListAtTenantScope(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for the tenant. </summary>
            <param name="top"> The number of results to return. If null is passed returns all providers. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of ProvidersRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.UnregisterAsync(System.String,System.Threading.CancellationToken)">
            <summary> Unregisters a subscription from a resource provider. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider to unregister. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.Unregister(System.String,System.Threading.CancellationToken)">
            <summary> Unregisters a subscription from a resource provider. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider to unregister. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.RegisterAsync(System.String,System.Threading.CancellationToken)">
            <summary> Registers a subscription with a resource provider. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider to register. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.Register(System.String,System.Threading.CancellationToken)">
            <summary> Registers a subscription with a resource provider. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider to register. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ListAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for a subscription. </summary>
            <param name="top"> The number of results to return. If null is passed returns all deployments. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.List(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for a subscription. </summary>
            <param name="top"> The number of results to return. If null is passed returns all deployments. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ListAtTenantScopeAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for the tenant. </summary>
            <param name="top"> The number of results to return. If null is passed returns all providers. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ListAtTenantScope(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for the tenant. </summary>
            <param name="top"> The number of results to return. If null is passed returns all providers. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the specified resource provider. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.Get(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the specified resource provider. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.GetAtTenantScopeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the specified resource provider at the tenant level. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.GetAtTenantScope(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets the specified resource provider at the tenant level. </summary>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceProviderNamespace"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ListNextPageAsync(System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="top"> The number of results to return. If null is passed returns all deployments. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ListNextPage(System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="top"> The number of results to return. If null is passed returns all deployments. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ListAtTenantScopeNextPageAsync(System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for the tenant. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="top"> The number of results to return. If null is passed returns all providers. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ProvidersRestOperations.ListAtTenantScopeNextPage(System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Gets all resource providers for the tenant. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="top"> The number of results to return. If null is passed returns all providers. </param>
            <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourceGroupsDeleteOperation">
            <summary> When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupsDeleteOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupsDeleteOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupsDeleteOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupsDeleteOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsDeleteOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsDeleteOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsDeleteOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsDeleteOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsDeleteOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourceGroupsExportTemplateOperation">
            <summary> Captures the specified resource group as a template. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupsExportTemplateOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupsExportTemplateOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupsExportTemplateOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourceGroupsExportTemplateOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsExportTemplateOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsExportTemplateOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsExportTemplateOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsExportTemplateOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsExportTemplateOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourceGroupsOperations">
            <summary> The ResourceGroups service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.#ctor">
            <summary> Initializes a new instance of ResourceGroupsOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of ResourceGroupsOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.CheckExistenceAsync(System.String,System.Threading.CancellationToken)">
            <summary> Checks whether a resource group exists. </summary>
            <param name="resourceGroupName"> The name of the resource group to check. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.CheckExistence(System.String,System.Threading.CancellationToken)">
            <summary> Checks whether a resource group exists. </summary>
            <param name="resourceGroupName"> The name of the resource group to check. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.CreateOrUpdateAsync(System.String,Azure.ResourceManager.Resources.Models.ResourceGroup,System.Threading.CancellationToken)">
            <summary> Creates or updates a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group to create or update. Can include alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that match the allowed characters. </param>
            <param name="parameters"> Parameters supplied to the create or update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.CreateOrUpdate(System.String,Azure.ResourceManager.Resources.Models.ResourceGroup,System.Threading.CancellationToken)">
            <summary> Creates or updates a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group to create or update. Can include alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that match the allowed characters. </param>
            <param name="parameters"> Parameters supplied to the create or update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group to get. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.Get(System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group to get. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.UpdateAsync(System.String,Azure.ResourceManager.Resources.Models.ResourceGroupPatchable,System.Threading.CancellationToken)">
            <summary> Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained. </summary>
            <param name="resourceGroupName"> The name of the resource group to update. The name is case insensitive. </param>
            <param name="parameters"> Parameters supplied to update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.Update(System.String,Azure.ResourceManager.Resources.Models.ResourceGroupPatchable,System.Threading.CancellationToken)">
            <summary> Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained. </summary>
            <param name="resourceGroupName"> The name of the resource group to update. The name is case insensitive. </param>
            <param name="parameters"> Parameters supplied to update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.ListAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all the resource groups for a subscription. </summary>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.List(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all the resource groups for a subscription. </summary>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.StartDeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary> When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations. </summary>
            <param name="resourceGroupName"> The name of the resource group to delete. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.StartDelete(System.String,System.Threading.CancellationToken)">
            <summary> When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations. </summary>
            <param name="resourceGroupName"> The name of the resource group to delete. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.StartExportTemplateAsync(System.String,Azure.ResourceManager.Resources.Models.ExportTemplateRequest,System.Threading.CancellationToken)">
            <summary> Captures the specified resource group as a template. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="parameters"> Parameters for exporting the template. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsOperations.StartExportTemplate(System.String,Azure.ResourceManager.Resources.Models.ExportTemplateRequest,System.Threading.CancellationToken)">
            <summary> Captures the specified resource group as a template. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="parameters"> Parameters for exporting the template. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of ResourceGroupsRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.CheckExistenceAsync(System.String,System.Threading.CancellationToken)">
            <summary> Checks whether a resource group exists. </summary>
            <param name="resourceGroupName"> The name of the resource group to check. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.CheckExistence(System.String,System.Threading.CancellationToken)">
            <summary> Checks whether a resource group exists. </summary>
            <param name="resourceGroupName"> The name of the resource group to check. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.CreateOrUpdateAsync(System.String,Azure.ResourceManager.Resources.Models.ResourceGroup,System.Threading.CancellationToken)">
            <summary> Creates or updates a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group to create or update. Can include alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that match the allowed characters. </param>
            <param name="parameters"> Parameters supplied to the create or update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.CreateOrUpdate(System.String,Azure.ResourceManager.Resources.Models.ResourceGroup,System.Threading.CancellationToken)">
            <summary> Creates or updates a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group to create or update. Can include alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that match the allowed characters. </param>
            <param name="parameters"> Parameters supplied to the create or update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary> When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations. </summary>
            <param name="resourceGroupName"> The name of the resource group to delete. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.Delete(System.String,System.Threading.CancellationToken)">
            <summary> When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations. </summary>
            <param name="resourceGroupName"> The name of the resource group to delete. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group to get. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.Get(System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource group. </summary>
            <param name="resourceGroupName"> The name of the resource group to get. The name is case insensitive. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.UpdateAsync(System.String,Azure.ResourceManager.Resources.Models.ResourceGroupPatchable,System.Threading.CancellationToken)">
            <summary> Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained. </summary>
            <param name="resourceGroupName"> The name of the resource group to update. The name is case insensitive. </param>
            <param name="parameters"> Parameters supplied to update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.Update(System.String,Azure.ResourceManager.Resources.Models.ResourceGroupPatchable,System.Threading.CancellationToken)">
            <summary> Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained. </summary>
            <param name="resourceGroupName"> The name of the resource group to update. The name is case insensitive. </param>
            <param name="parameters"> Parameters supplied to update a resource group. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.ExportTemplateAsync(System.String,Azure.ResourceManager.Resources.Models.ExportTemplateRequest,System.Threading.CancellationToken)">
            <summary> Captures the specified resource group as a template. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="parameters"> Parameters for exporting the template. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.ExportTemplate(System.String,Azure.ResourceManager.Resources.Models.ExportTemplateRequest,System.Threading.CancellationToken)">
            <summary> Captures the specified resource group as a template. </summary>
            <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
            <param name="parameters"> Parameters for exporting the template. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.ListAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all the resource groups for a subscription. </summary>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.List(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all the resource groups for a subscription. </summary>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.ListNextPageAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all the resource groups for a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceGroupsRestOperations.ListNextPage(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets all the resource groups for a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourceLinksOperations">
            <summary> The ResourceLinks service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksOperations.#ctor">
            <summary> Initializes a new instance of ResourceLinksOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of ResourceLinksOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksOperations.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary> Deletes a resource link with the specified ID. </summary>
            <param name="linkId"> The fully qualified ID of the resource link. Use the format, /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}. For example, /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksOperations.Delete(System.String,System.Threading.CancellationToken)">
            <summary> Deletes a resource link with the specified ID. </summary>
            <param name="linkId"> The fully qualified ID of the resource link. Use the format, /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}. For example, /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksOperations.CreateOrUpdateAsync(System.String,Azure.ResourceManager.Resources.Models.ResourceLink,System.Threading.CancellationToken)">
            <summary> Creates or updates a resource link between the specified resources. </summary>
            <param name="linkId"> The fully qualified ID of the resource link. Use the format, /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}. For example, /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink. </param>
            <param name="parameters"> Parameters for creating or updating a resource link. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksOperations.CreateOrUpdate(System.String,Azure.ResourceManager.Resources.Models.ResourceLink,System.Threading.CancellationToken)">
            <summary> Creates or updates a resource link between the specified resources. </summary>
            <param name="linkId"> The fully qualified ID of the resource link. Use the format, /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}. For example, /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink. </param>
            <param name="parameters"> Parameters for creating or updating a resource link. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksOperations.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource link with the specified ID. </summary>
            <param name="linkId"> The fully qualified Id of the resource link. For example, /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksOperations.Get(System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource link with the specified ID. </summary>
            <param name="linkId"> The fully qualified Id of the resource link. For example, /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksOperations.ListAtSubscriptionAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the linked resources for the subscription. </summary>
            <param name="filter"> The filter to apply on the list resource links operation. The supported filter for list resource links is targetId. For example, $filter=targetId eq {value}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksOperations.ListAtSubscription(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the linked resources for the subscription. </summary>
            <param name="filter"> The filter to apply on the list resource links operation. The supported filter for list resource links is targetId. For example, $filter=targetId eq {value}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksOperations.ListAtSourceScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets a list of resource links at and below the specified source scope. </summary>
            <param name="scope"> The fully qualified ID of the scope for getting the resource links. For example, to list resource links at and under a resource group, set the scope to /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksOperations.ListAtSourceScope(System.String,System.Threading.CancellationToken)">
            <summary> Gets a list of resource links at and below the specified source scope. </summary>
            <param name="scope"> The fully qualified ID of the scope for getting the resource links. For example, to list resource links at and under a resource group, set the scope to /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of ResourceLinksRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary> Deletes a resource link with the specified ID. </summary>
            <param name="linkId"> The fully qualified ID of the resource link. Use the format, /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}. For example, /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="linkId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.Delete(System.String,System.Threading.CancellationToken)">
            <summary> Deletes a resource link with the specified ID. </summary>
            <param name="linkId"> The fully qualified ID of the resource link. Use the format, /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}. For example, /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="linkId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.CreateOrUpdateAsync(System.String,Azure.ResourceManager.Resources.Models.ResourceLink,System.Threading.CancellationToken)">
            <summary> Creates or updates a resource link between the specified resources. </summary>
            <param name="linkId"> The fully qualified ID of the resource link. Use the format, /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}. For example, /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink. </param>
            <param name="parameters"> Parameters for creating or updating a resource link. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="linkId"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.CreateOrUpdate(System.String,Azure.ResourceManager.Resources.Models.ResourceLink,System.Threading.CancellationToken)">
            <summary> Creates or updates a resource link between the specified resources. </summary>
            <param name="linkId"> The fully qualified ID of the resource link. Use the format, /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}. For example, /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink. </param>
            <param name="parameters"> Parameters for creating or updating a resource link. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="linkId"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource link with the specified ID. </summary>
            <param name="linkId"> The fully qualified Id of the resource link. For example, /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="linkId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.Get(System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource link with the specified ID. </summary>
            <param name="linkId"> The fully qualified Id of the resource link. For example, /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="linkId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.ListAtSubscriptionAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the linked resources for the subscription. </summary>
            <param name="filter"> The filter to apply on the list resource links operation. The supported filter for list resource links is targetId. For example, $filter=targetId eq {value}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.ListAtSubscription(System.String,System.Threading.CancellationToken)">
            <summary> Gets all the linked resources for the subscription. </summary>
            <param name="filter"> The filter to apply on the list resource links operation. The supported filter for list resource links is targetId. For example, $filter=targetId eq {value}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.ListAtSourceScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets a list of resource links at and below the specified source scope. </summary>
            <param name="scope"> The fully qualified ID of the scope for getting the resource links. For example, to list resource links at and under a resource group, set the scope to /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.ListAtSourceScope(System.String,System.Threading.CancellationToken)">
            <summary> Gets a list of resource links at and below the specified source scope. </summary>
            <param name="scope"> The fully qualified ID of the scope for getting the resource links. For example, to list resource links at and under a resource group, set the scope to /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.ListAtSubscriptionNextPageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the linked resources for the subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the list resource links operation. The supported filter for list resource links is targetId. For example, $filter=targetId eq {value}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.ListAtSubscriptionNextPage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets all the linked resources for the subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the list resource links operation. The supported filter for list resource links is targetId. For example, $filter=targetId eq {value}. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.ListAtSourceScopeNextPageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a list of resource links at and below the specified source scope. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="scope"> The fully qualified ID of the scope for getting the resource links. For example, to list resource links at and under a resource group, set the scope to /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourceLinksRestOperations.ListAtSourceScopeNextPage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a list of resource links at and below the specified source scope. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="scope"> The fully qualified ID of the scope for getting the resource links. For example, to list resource links at and under a resource group, set the scope to /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="scope"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateByIdOperation">
            <summary> Create a resource by ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateByIdOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateByIdOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateByIdOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateByIdOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateByIdOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateByIdOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateByIdOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateByIdOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateByIdOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateOperation">
            <summary> Creates a resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesCreateOrUpdateOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourcesDeleteByIdOperation">
            <summary> Deletes a resource by ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesDeleteByIdOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesDeleteByIdOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesDeleteByIdOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesDeleteByIdOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesDeleteByIdOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesDeleteByIdOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesDeleteByIdOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesDeleteByIdOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesDeleteByIdOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourcesDeleteOperation">
            <summary> Deletes a resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesDeleteOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesDeleteOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesDeleteOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesDeleteOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesDeleteOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesDeleteOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesDeleteOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesDeleteOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesDeleteOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourcesManagementClient">
            <summary> Resources service management client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesManagementClient.#ctor">
            <summary> Initializes a new instance of ResourcesManagementClient for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesManagementClient.#ctor(System.String,Azure.Core.TokenCredential,Azure.ResourceManager.Resources.ResourcesManagementClientOptions)">
            <summary> Initializes a new instance of ResourcesManagementClient. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="tokenCredential"> The OAuth token for making client requests. </param>
            <param name="options"> The options for configuring the client. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesManagementClient.#ctor(System.Uri,System.String,Azure.Core.TokenCredential,Azure.ResourceManager.Resources.ResourcesManagementClientOptions)">
            <summary> Initializes a new instance of ResourcesManagementClient. </summary>
            <param name="endpoint"> server parameter. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="tokenCredential"> The OAuth token for making client requests. </param>
            <param name="options"> The options for configuring the client. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.Operations">
            <summary> Returns an instance of Operations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.Deployments">
            <summary> Returns an instance of DeploymentsOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.Providers">
            <summary> Returns an instance of ProvidersOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.Resources">
            <summary> Returns an instance of ResourcesOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.ResourceGroups">
            <summary> Returns an instance of ResourceGroupsOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.Tags">
            <summary> Returns an instance of TagsOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.Deployment">
            <summary> Returns an instance of DeploymentOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.Subscriptions">
            <summary> Returns an instance of SubscriptionsOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.Tenants">
            <summary> Returns an instance of TenantsOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.PolicyAssignments">
            <summary> Returns an instance of PolicyAssignmentsOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.PolicyDefinitions">
            <summary> Returns an instance of PolicyDefinitionsOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.PolicySetDefinitions">
            <summary> Returns an instance of PolicySetDefinitionsOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.DeploymentScripts">
            <summary> Returns an instance of DeploymentScriptsOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.Service">
            <summary> Returns an instance of ServiceOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.Features">
            <summary> Returns an instance of FeaturesOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.Authorization">
            <summary> Returns an instance of AuthorizationOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.ManagementLocks">
            <summary> Returns an instance of ManagementLocksOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.ResourceLinks">
            <summary> Returns an instance of ResourceLinksOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.Applications">
            <summary> Returns an instance of ApplicationsOperations. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesManagementClient.ApplicationDefinitions">
            <summary> Returns an instance of ApplicationDefinitionsOperations. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourcesManagementClientOptions">
            <summary> Client options for Resources. </summary>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourcesMoveResourcesOperation">
            <summary> The resources to move must be in the same source resource group. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesMoveResourcesOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesMoveResourcesOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesMoveResourcesOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesMoveResourcesOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesMoveResourcesOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesMoveResourcesOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesMoveResourcesOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesMoveResourcesOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesMoveResourcesOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourcesOperations">
            <summary> The Resources service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.#ctor">
            <summary> Initializes a new instance of ResourcesOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of ResourcesOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.CheckExistenceAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether a resource exists. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource to check. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The resource provider of the resource to check. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type. </param>
            <param name="resourceName"> The name of the resource to check whether it exists. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.CheckExistence(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether a resource exists. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource to check. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The resource provider of the resource to check. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type. </param>
            <param name="resourceName"> The name of the resource to check whether it exists. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.GetAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource to get. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource. </param>
            <param name="resourceName"> The name of the resource to get. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.Get(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource to get. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource. </param>
            <param name="resourceName"> The name of the resource to get. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.CheckExistenceByIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks by ID whether a resource exists. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.CheckExistenceById(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks by ID whether a resource exists. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.GetByIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.GetById(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.ListByResourceGroupAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources for a resource group. </summary>
            <param name="resourceGroupName"> The resource group with the resources to get. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq &apos;Microsoft.Network/virtualNetworks&apos;&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with &apos;demo&apos; anywhere in the name, use: $filter=substringof(&apos;demo&apos;, name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.ListByResourceGroup(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources for a resource group. </summary>
            <param name="resourceGroupName"> The resource group with the resources to get. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq &apos;Microsoft.Network/virtualNetworks&apos;&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with &apos;demo&apos; anywhere in the name, use: $filter=substringof(&apos;demo&apos;, name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.ListAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources in a subscription. </summary>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq &apos;Microsoft.Network/virtualNetworks&apos;&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with &apos;demo&apos; anywhere in the name, use: $filter=substringof(&apos;demo&apos;, name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.List(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources in a subscription. </summary>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq &apos;Microsoft.Network/virtualNetworks&apos;&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with &apos;demo&apos; anywhere in the name, use: $filter=substringof(&apos;demo&apos;, name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartMoveResourcesAsync(System.String,Azure.ResourceManager.Resources.Models.ResourcesMoveInfo,System.Threading.CancellationToken)">
            <summary> The resources to move must be in the same source resource group. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. </summary>
            <param name="sourceResourceGroupName"> The name of the resource group containing the resources to move. </param>
            <param name="parameters"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sourceResourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartMoveResources(System.String,Azure.ResourceManager.Resources.Models.ResourcesMoveInfo,System.Threading.CancellationToken)">
            <summary> The resources to move must be in the same source resource group. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. </summary>
            <param name="sourceResourceGroupName"> The name of the resource group containing the resources to move. </param>
            <param name="parameters"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sourceResourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartValidateMoveResourcesAsync(System.String,Azure.ResourceManager.Resources.Models.ResourcesMoveInfo,System.Threading.CancellationToken)">
            <summary> This operation checks whether the specified resources can be moved to the target. The resources to move must be in the same source resource group. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation. </summary>
            <param name="sourceResourceGroupName"> The name of the resource group containing the resources to validate for move. </param>
            <param name="parameters"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sourceResourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartValidateMoveResources(System.String,Azure.ResourceManager.Resources.Models.ResourcesMoveInfo,System.Threading.CancellationToken)">
            <summary> This operation checks whether the specified resources can be moved to the target. The resources to move must be in the same source resource group. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation. </summary>
            <param name="sourceResourceGroupName"> The name of the resource group containing the resources to validate for move. </param>
            <param name="parameters"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sourceResourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartDeleteAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group that contains the resource to delete. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type. </param>
            <param name="resourceName"> The name of the resource to delete. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartDelete(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group that contains the resource to delete. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type. </param>
            <param name="resourceName"> The name of the resource to delete. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartCreateOrUpdateAsync(System.String,System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Creates a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group for the resource. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource to create. </param>
            <param name="resourceName"> The name of the resource to create. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Parameters for creating or updating the resource. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartCreateOrUpdate(System.String,System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Creates a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group for the resource. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource to create. </param>
            <param name="resourceName"> The name of the resource to create. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Parameters for creating or updating the resource. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartUpdateAsync(System.String,System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Updates a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group for the resource. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource to update. </param>
            <param name="resourceName"> The name of the resource to update. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Parameters for updating the resource. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartUpdate(System.String,System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Updates a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group for the resource. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource to update. </param>
            <param name="resourceName"> The name of the resource to update. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Parameters for updating the resource. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartDeleteByIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/> or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartDeleteById(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/> or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartCreateOrUpdateByIdAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Create a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Create or update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartCreateOrUpdateById(System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Create a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Create or update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartUpdateByIdAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Updates a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesOperations.StartUpdateById(System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Updates a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of ResourcesRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ListByResourceGroupAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources for a resource group. </summary>
            <param name="resourceGroupName"> The resource group with the resources to get. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq &apos;Microsoft.Network/virtualNetworks&apos;&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with &apos;demo&apos; anywhere in the name, use: $filter=substringof(&apos;demo&apos;, name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ListByResourceGroup(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources for a resource group. </summary>
            <param name="resourceGroupName"> The resource group with the resources to get. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq &apos;Microsoft.Network/virtualNetworks&apos;&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with &apos;demo&apos; anywhere in the name, use: $filter=substringof(&apos;demo&apos;, name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.MoveResourcesAsync(System.String,Azure.ResourceManager.Resources.Models.ResourcesMoveInfo,System.Threading.CancellationToken)">
            <summary> The resources to move must be in the same source resource group. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. </summary>
            <param name="sourceResourceGroupName"> The name of the resource group containing the resources to move. </param>
            <param name="parameters"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sourceResourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.MoveResources(System.String,Azure.ResourceManager.Resources.Models.ResourcesMoveInfo,System.Threading.CancellationToken)">
            <summary> The resources to move must be in the same source resource group. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. </summary>
            <param name="sourceResourceGroupName"> The name of the resource group containing the resources to move. </param>
            <param name="parameters"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sourceResourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ValidateMoveResourcesAsync(System.String,Azure.ResourceManager.Resources.Models.ResourcesMoveInfo,System.Threading.CancellationToken)">
            <summary> This operation checks whether the specified resources can be moved to the target. The resources to move must be in the same source resource group. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation. </summary>
            <param name="sourceResourceGroupName"> The name of the resource group containing the resources to validate for move. </param>
            <param name="parameters"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sourceResourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ValidateMoveResources(System.String,Azure.ResourceManager.Resources.Models.ResourcesMoveInfo,System.Threading.CancellationToken)">
            <summary> This operation checks whether the specified resources can be moved to the target. The resources to move must be in the same source resource group. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation. </summary>
            <param name="sourceResourceGroupName"> The name of the resource group containing the resources to validate for move. </param>
            <param name="parameters"> Parameters for moving resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sourceResourceGroupName"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ListAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources in a subscription. </summary>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq &apos;Microsoft.Network/virtualNetworks&apos;&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with &apos;demo&apos; anywhere in the name, use: $filter=substringof(&apos;demo&apos;, name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.List(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources in a subscription. </summary>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq &apos;Microsoft.Network/virtualNetworks&apos;&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with &apos;demo&apos; anywhere in the name, use: $filter=substringof(&apos;demo&apos;, name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.CheckExistenceAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether a resource exists. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource to check. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The resource provider of the resource to check. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type. </param>
            <param name="resourceName"> The name of the resource to check whether it exists. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.CheckExistence(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks whether a resource exists. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource to check. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The resource provider of the resource to check. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type. </param>
            <param name="resourceName"> The name of the resource to check whether it exists. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.DeleteAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group that contains the resource to delete. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type. </param>
            <param name="resourceName"> The name of the resource to delete. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.Delete(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group that contains the resource to delete. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type. </param>
            <param name="resourceName"> The name of the resource to delete. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.CreateOrUpdateAsync(System.String,System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Creates a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group for the resource. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource to create. </param>
            <param name="resourceName"> The name of the resource to create. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Parameters for creating or updating the resource. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.CreateOrUpdate(System.String,System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Creates a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group for the resource. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource to create. </param>
            <param name="resourceName"> The name of the resource to create. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Parameters for creating or updating the resource. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.UpdateAsync(System.String,System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Updates a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group for the resource. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource to update. </param>
            <param name="resourceName"> The name of the resource to update. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Parameters for updating the resource. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.Update(System.String,System.String,System.String,System.String,System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Updates a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group for the resource. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource to update. </param>
            <param name="resourceName"> The name of the resource to update. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Parameters for updating the resource. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.GetAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource to get. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource. </param>
            <param name="resourceName"> The name of the resource to get. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.Get(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource. </summary>
            <param name="resourceGroupName"> The name of the resource group containing the resource to get. The name is case insensitive. </param>
            <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
            <param name="parentResourcePath"> The parent resource identity. </param>
            <param name="resourceType"> The resource type of the resource. </param>
            <param name="resourceName"> The name of the resource to get. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceProviderNamespace"/>, <paramref name="parentResourcePath"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/>, or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.CheckExistenceByIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks by ID whether a resource exists. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/> or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.CheckExistenceById(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Checks by ID whether a resource exists. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/> or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.DeleteByIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/> or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.DeleteById(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/> or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.CreateOrUpdateByIdAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Create a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Create or update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.CreateOrUpdateById(System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Create a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Create or update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.UpdateByIdAsync(System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Updates a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.UpdateById(System.String,System.String,Azure.ResourceManager.Resources.Models.GenericResource,System.Threading.CancellationToken)">
            <summary> Updates a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="parameters"> Update resource parameters. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="apiVersion"/>, or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.GetByIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/> or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.GetById(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a resource by ID. </summary>
            <param name="resourceId"> The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}. </param>
            <param name="apiVersion"> The API version to use for the operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="resourceId"/> or <paramref name="apiVersion"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ListByResourceGroupNextPageAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources for a resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The resource group with the resources to get. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq &apos;Microsoft.Network/virtualNetworks&apos;&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with &apos;demo&apos; anywhere in the name, use: $filter=substringof(&apos;demo&apos;, name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ListByResourceGroupNextPage(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources for a resource group. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="resourceGroupName"> The resource group with the resources to get. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq &apos;Microsoft.Network/virtualNetworks&apos;&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with &apos;demo&apos; anywhere in the name, use: $filter=substringof(&apos;demo&apos;, name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resources. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="resourceGroupName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ListNextPageAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources in a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq &apos;Microsoft.Network/virtualNetworks&apos;&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with &apos;demo&apos; anywhere in the name, use: $filter=substringof(&apos;demo&apos;, name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesRestOperations.ListNextPage(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get all the resources in a subscription. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="filter"> The filter to apply on the operation.&lt;br&gt;&lt;br&gt;The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.&lt;br&gt;&lt;br&gt;For example, to filter by a resource type, use: $filter=resourceType eq &apos;Microsoft.Network/virtualNetworks&apos;&lt;br&gt;&lt;br&gt;You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.&lt;br&gt;&lt;br&gt;For example, to get all resources with &apos;demo&apos; anywhere in the name, use: $filter=substringof(&apos;demo&apos;, name)&lt;br&gt;&lt;br&gt;You can link more than one substringof together by adding and/or operators.&lt;br&gt;&lt;br&gt;You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq &apos;tag1&apos; and tagValue eq &apos;Value1&apos;. When you filter by a tag name and value, the tags for each resource are not returned in the results.&lt;br&gt;&lt;br&gt;You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. </param>
            <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
            <param name="top"> The number of results to return. If null is passed, returns all resource groups. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourcesUpdateByIdOperation">
            <summary> Updates a resource by ID. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesUpdateByIdOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesUpdateByIdOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesUpdateByIdOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesUpdateByIdOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesUpdateByIdOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesUpdateByIdOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesUpdateByIdOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesUpdateByIdOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesUpdateByIdOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourcesUpdateOperation">
            <summary> Updates a resource. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesUpdateOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesUpdateOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesUpdateOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesUpdateOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesUpdateOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesUpdateOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesUpdateOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesUpdateOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesUpdateOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.ResourceManager.Resources.ResourcesValidateMoveResourcesOperation">
            <summary> This operation checks whether the specified resources can be moved to the target. The resources to move must be in the same source resource group. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation. </summary>
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesValidateMoveResourcesOperation.Id">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesValidateMoveResourcesOperation.Value">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesValidateMoveResourcesOperation.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:Azure.ResourceManager.Resources.ResourcesValidateMoveResourcesOperation.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesValidateMoveResourcesOperation.GetRawResponse">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesValidateMoveResourcesOperation.UpdateStatus(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesValidateMoveResourcesOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesValidateMoveResourcesOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.ResourcesValidateMoveResourcesOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.ResourceManager.Resources.RestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.Uri)">
            <summary> Initializes a new instance of RestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.RestOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Resources REST API operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.RestOperations.List(System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Resources REST API operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.RestOperations.ListNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Resources REST API operations. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.RestOperations.ListNextPage(System.String,System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Resources REST API operations. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.ServiceOperations">
            <summary> The Service service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ServiceOperations.#ctor">
            <summary> Initializes a new instance of ServiceOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ServiceOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.Uri)">
            <summary> Initializes a new instance of ServiceOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ServiceOperations.ListOperationsAsync(System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Features REST API operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ServiceOperations.ListOperations(System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Features REST API operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ServiceRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.Uri)">
            <summary> Initializes a new instance of ServiceRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ServiceRestOperations.ListOperationsAsync(System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Features REST API operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ServiceRestOperations.ListOperations(System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Features REST API operations. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ServiceRestOperations.ListOperationsNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Features REST API operations. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.ServiceRestOperations.ListOperationsNextPage(System.String,System.Threading.CancellationToken)">
            <summary> Lists all of the available Microsoft.Features REST API operations. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.SubscriptionsOperations">
            <summary> The Subscriptions service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsOperations.#ctor">
            <summary> Initializes a new instance of SubscriptionsOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.Uri)">
            <summary> Initializes a new instance of SubscriptionsOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsOperations.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets details about a specified subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsOperations.Get(System.String,System.Threading.CancellationToken)">
            <summary> Gets details about a specified subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsOperations.ListLocationsAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation provides all the locations that are available for resource providers; however, each resource provider may support a subset of this list. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsOperations.ListLocations(System.String,System.Threading.CancellationToken)">
            <summary> This operation provides all the locations that are available for resource providers; however, each resource provider may support a subset of this list. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> Gets all subscriptions for a tenant. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsOperations.List(System.Threading.CancellationToken)">
            <summary> Gets all subscriptions for a tenant. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.Uri)">
            <summary> Initializes a new instance of SubscriptionsRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.ListLocationsAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation provides all the locations that are available for resource providers; however, each resource provider may support a subset of this list. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.ListLocations(System.String,System.Threading.CancellationToken)">
            <summary> This operation provides all the locations that are available for resource providers; however, each resource provider may support a subset of this list. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets details about a specified subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.Get(System.String,System.Threading.CancellationToken)">
            <summary> Gets details about a specified subscription. </summary>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> Gets all subscriptions for a tenant. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.List(System.Threading.CancellationToken)">
            <summary> Gets all subscriptions for a tenant. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.ListNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets all subscriptions for a tenant. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.SubscriptionsRestOperations.ListNextPage(System.String,System.Threading.CancellationToken)">
            <summary> Gets all subscriptions for a tenant. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.TagsOperations">
            <summary> The Tags service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.#ctor">
            <summary> Initializes a new instance of TagsOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of TagsOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.DeleteValueAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows deleting a value from the list of predefined values for an existing predefined tag name. The value being deleted must not be in use as a tag value for the given tag name for any resource. </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.DeleteValue(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows deleting a value from the list of predefined values for an existing predefined tag name. The value being deleted must not be in use as a tag value for the given tag name for any resource. </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.CreateOrUpdateValueAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows adding a value to the list of predefined values for an existing predefined tag name. A tag value can have a maximum of 256 characters. </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.CreateOrUpdateValue(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows adding a value to the list of predefined values for an existing predefined tag name. A tag value can have a maximum of 256 characters. </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.CreateOrUpdateAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation allows adding a name to the list of predefined tag names for the given subscription. A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the following prefixes which are reserved for Azure use: &apos;microsoft&apos;, &apos;azure&apos;, &apos;windows&apos;. </summary>
            <param name="tagName"> The name of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.CreateOrUpdate(System.String,System.Threading.CancellationToken)">
            <summary> This operation allows adding a name to the list of predefined tag names for the given subscription. A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the following prefixes which are reserved for Azure use: &apos;microsoft&apos;, &apos;azure&apos;, &apos;windows&apos;. </summary>
            <param name="tagName"> The name of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation allows deleting a name from the list of predefined tag names for the given subscription. The name being deleted must not be in use as a tag name for any resource. All predefined values for the given name must have already been deleted. </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.Delete(System.String,System.Threading.CancellationToken)">
            <summary> This operation allows deleting a name from the list of predefined tag names for the given subscription. The name being deleted must not be in use as a tag name for any resource. All predefined values for the given name must have already been deleted. </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.CreateOrUpdateAtScopeAsync(System.String,Azure.ResourceManager.Resources.Models.TagsResource,System.Threading.CancellationToken)">
            <summary> This operation allows adding or replacing the entire set of tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="parameters"> The TagsResource to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.CreateOrUpdateAtScope(System.String,Azure.ResourceManager.Resources.Models.TagsResource,System.Threading.CancellationToken)">
            <summary> This operation allows adding or replacing the entire set of tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="parameters"> The TagsResource to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.UpdateAtScopeAsync(System.String,Azure.ResourceManager.Resources.Models.TagsPatchResource,System.Threading.CancellationToken)">
            <summary> This operation allows replacing, merging or selectively deleting tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The &apos;replace&apos; option replaces the entire set of existing tags with a new set. The &apos;merge&apos; option allows adding tags with new names and updating the values of tags with existing names. The &apos;delete&apos; option allows selectively deleting tags based on given names or name/value pairs. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="parameters"> The TagsPatchResource to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.UpdateAtScope(System.String,Azure.ResourceManager.Resources.Models.TagsPatchResource,System.Threading.CancellationToken)">
            <summary> This operation allows replacing, merging or selectively deleting tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The &apos;replace&apos; option replaces the entire set of existing tags with a new set. The &apos;merge&apos; option allows adding tags with new names and updating the values of tags with existing names. The &apos;delete&apos; option allows selectively deleting tags based on given names or name/value pairs. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="parameters"> The TagsPatchResource to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.GetAtScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets the entire set of tags on a resource or subscription. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.GetAtScope(System.String,System.Threading.CancellationToken)">
            <summary> Gets the entire set of tags on a resource or subscription. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.DeleteAtScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Deletes the entire set of tags on a resource or subscription. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.DeleteAtScope(System.String,System.Threading.CancellationToken)">
            <summary> Deletes the entire set of tags on a resource or subscription. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsOperations.List(System.Threading.CancellationToken)">
            <summary> This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.Uri)">
            <summary> Initializes a new instance of TagsRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="subscriptionId"> The ID of the target subscription. </param>
            <param name="endpoint"> server parameter. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.DeleteValueAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows deleting a value from the list of predefined values for an existing predefined tag name. The value being deleted must not be in use as a tag value for the given tag name for any resource. </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> or <paramref name="tagValue"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.DeleteValue(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows deleting a value from the list of predefined values for an existing predefined tag name. The value being deleted must not be in use as a tag value for the given tag name for any resource. </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> or <paramref name="tagValue"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.CreateOrUpdateValueAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows adding a value to the list of predefined values for an existing predefined tag name. A tag value can have a maximum of 256 characters. </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> or <paramref name="tagValue"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.CreateOrUpdateValue(System.String,System.String,System.Threading.CancellationToken)">
            <summary> This operation allows adding a value to the list of predefined values for an existing predefined tag name. A tag value can have a maximum of 256 characters. </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="tagValue"> The value of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> or <paramref name="tagValue"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.CreateOrUpdateAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation allows adding a name to the list of predefined tag names for the given subscription. A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the following prefixes which are reserved for Azure use: &apos;microsoft&apos;, &apos;azure&apos;, &apos;windows&apos;. </summary>
            <param name="tagName"> The name of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.CreateOrUpdate(System.String,System.Threading.CancellationToken)">
            <summary> This operation allows adding a name to the list of predefined tag names for the given subscription. A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the following prefixes which are reserved for Azure use: &apos;microsoft&apos;, &apos;azure&apos;, &apos;windows&apos;. </summary>
            <param name="tagName"> The name of the tag to create. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation allows deleting a name from the list of predefined tag names for the given subscription. The name being deleted must not be in use as a tag name for any resource. All predefined values for the given name must have already been deleted. </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.Delete(System.String,System.Threading.CancellationToken)">
            <summary> This operation allows deleting a name from the list of predefined tag names for the given subscription. The name being deleted must not be in use as a tag name for any resource. All predefined values for the given name must have already been deleted. </summary>
            <param name="tagName"> The name of the tag. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.List(System.Threading.CancellationToken)">
            <summary> This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.CreateOrUpdateAtScopeAsync(System.String,Azure.ResourceManager.Resources.Models.TagsResource,System.Threading.CancellationToken)">
            <summary> This operation allows adding or replacing the entire set of tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="parameters"> The TagsResource to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.CreateOrUpdateAtScope(System.String,Azure.ResourceManager.Resources.Models.TagsResource,System.Threading.CancellationToken)">
            <summary> This operation allows adding or replacing the entire set of tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="parameters"> The TagsResource to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.UpdateAtScopeAsync(System.String,Azure.ResourceManager.Resources.Models.TagsPatchResource,System.Threading.CancellationToken)">
            <summary> This operation allows replacing, merging or selectively deleting tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The &apos;replace&apos; option replaces the entire set of existing tags with a new set. The &apos;merge&apos; option allows adding tags with new names and updating the values of tags with existing names. The &apos;delete&apos; option allows selectively deleting tags based on given names or name/value pairs. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="parameters"> The TagsPatchResource to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.UpdateAtScope(System.String,Azure.ResourceManager.Resources.Models.TagsPatchResource,System.Threading.CancellationToken)">
            <summary> This operation allows replacing, merging or selectively deleting tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The &apos;replace&apos; option replaces the entire set of existing tags with a new set. The &apos;merge&apos; option allows adding tags with new names and updating the values of tags with existing names. The &apos;delete&apos; option allows selectively deleting tags based on given names or name/value pairs. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="parameters"> The TagsPatchResource to use. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> or <paramref name="parameters"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.GetAtScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets the entire set of tags on a resource or subscription. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.GetAtScope(System.String,System.Threading.CancellationToken)">
            <summary> Gets the entire set of tags on a resource or subscription. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.DeleteAtScopeAsync(System.String,System.Threading.CancellationToken)">
            <summary> Deletes the entire set of tags on a resource or subscription. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.DeleteAtScope(System.String,System.Threading.CancellationToken)">
            <summary> Deletes the entire set of tags on a resource or subscription. </summary>
            <param name="scope"> The resource scope. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.ListNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TagsRestOperations.ListNextPage(System.String,System.Threading.CancellationToken)">
            <summary> This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="T:Azure.ResourceManager.Resources.TenantsOperations">
            <summary> The Tenants service client. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantsOperations.#ctor">
            <summary> Initializes a new instance of TenantsOperations for mocking. </summary>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantsOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.Uri)">
            <summary> Initializes a new instance of TenantsOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantsOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> Gets the tenants for your account. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantsOperations.List(System.Threading.CancellationToken)">
            <summary> Gets the tenants for your account. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantsRestOperations.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.Uri)">
            <summary> Initializes a new instance of TenantsRestOperations. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="endpoint"> server parameter. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantsRestOperations.ListAsync(System.Threading.CancellationToken)">
            <summary> Gets the tenants for your account. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantsRestOperations.List(System.Threading.CancellationToken)">
            <summary> Gets the tenants for your account. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantsRestOperations.ListNextPageAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets the tenants for your account. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="M:Azure.ResourceManager.Resources.TenantsRestOperations.ListNextPage(System.String,System.Threading.CancellationToken)">
            <summary> Gets the tenants for your account. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        </member>
        <member name="T:Azure.Core.ArmOperationHelpers`1">
            <summary>
            This implements the ARM scenarios for LROs. It is highly recommended to read the ARM spec prior to modifying this code:
            https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#asynchronous-operations
            Other reference documents include:
            https://github.com/Azure/autorest/blob/master/docs/extensions/readme.md#x-ms-long-running-operation
            https://github.com/Azure/adx-documentation-pr/blob/master/sdks/LRO/LRO_AzureSDK.md
            </summary>
            <typeparam name="T">The final result of the LRO.</typeparam>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Usage">
            <summary>
            Gets or sets a coma separated list of additional model usage modes. Allowed values: model, error, intput, output.
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Formats">
            <summary>
            Gets or sets a coma separated list of additional model serialization formats.
            </summary>
        </member>
        <member name="T:Azure.Core.ArrayBufferWriter`1">
            <summary>
            Represents a heap-based, array-backed output sink into which <typeparam name="T"/> data can be written.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1"/>, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1"/>, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity"/> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1"/>.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:Azure.Core.ArrayBufferWriter`1"/> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1"/> that <paramref name="count"/> amount of data was written to the output <see cref="T:System.Span`1"/>/<see cref="T:System.Memory`1"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1"/> to write to that is at least the requested length (specified by <paramref name="sizeHint"/>).
            If no <paramref name="sizeHint"/> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint"/> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1"/>.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1"/> to write to that is at least the requested length (specified by <paramref name="sizeHint"/>).
            If no <paramref name="sizeHint"/> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint"/> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1"/>.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            HACK HACK HACK. Some runtime environments like Azure.Functions downgrade System.Diagnostic.DiagnosticSource package version causing method not found exceptions in customer apps
            This type is a temporary workaround to avoid the issue.
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1"/> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1"/> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator"/> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Azure.Core.AzureResourceProviderNamespaceAttribute">
            <summary>
            This attribute should be set on all client assemblies with value of one of the resource providers
            from the https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers list.
            </summary>
        </member>
    </members>
</doc>
